
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[806] =
    {   0,
       76,   76,  120,  120,  133,  133,  148,  148,  192,  192,
      139,  139,  202,  201,   44,  201,   44,  201,   43,  201,
       44,  201,   44,  201,   44,  201,   44,  201,   42,   44,
      201,   44,  201,   44,  201,   27,   44,  201,   44,  201,
       44,  201,   44,  201,   44,  201,   44,  201,   42,   44,
      201,   44,  201,   44,  201,   89,  201,   88,  201,   89,
      201,   86,   89,  201,   89,  201,   89,  201,  201,   90,
      201,  110,  201,  109,  201,  110,  201,  107,  110,  201,
      110,  201,   71,  201,   71,  201,   70,  201,   71,  201,
       71,  201,   71,  201,   67,   71,  201,   71,  201,   71,

      201,   75,  201,   74,  201,   75,  201,   72,   75,  201,
       75,  201,   75,  201,   75,  201,   79,  201,   78,  201,
       76,   79,  201,   76,   79,  201,   79,  201,   76,   79,
      201,   76,   79,  201,   79,  201,   71,  201,   70,  201,
       71,  201,   71,  201,   71,  201,   71,  201,   71,  201,
       98,  201,   97,  201,   95,   98,  201,   98,  201,  102,
      201,  101,  201,  102,  201,  102,  201,  106,  201,  105,
      201,  106,  201,  106,  201,   94,  201,   91,  201,   94,
      201,   92,   94,  201,   94,  201,   94,  201,   58,  201,
       57,  201,   58,  201,   55,   58,  201,   58,  201,   62,

      201,   62,  201,   61,  201,   62,  201,   62,  201,   62,
      201,   59,   62,  201,   62,  201,   62,  201,   66,  201,
       65,  201,   66,  201,   63,   66,  201,   66,  201,   82,
      201,   80,  201,  201,   84,  201,   85,  201,  201,  116,
      201,  115,  201,  114,  116,  201,  116,  201,  120,  123,
      201,  117,  201,  120,  123,  201,  123,  201,  123,  201,
      125,  201,  124,  201,  201,  128,  201,  128,  201,  126,
      201,  128,  201,  128,  201,  133,  137,  201,  134,  201,
      137,  201,  137,  201,  137,  201,  137,  201,  137,  201,
      113,  201,  111,  201,  113,  201,  146,  201,  144,  201,

      138,  146,  201,  143,  146,  201,  146,  201,  149,  201,
      148,  149,  201,  147,  201,  149,  201,  156,  157,  201,
      155,  201,  157,  201,  157,  201,  157,  201,  167,  168,
      201,  158,  201,  168,  201,  168,  201,  168,  201,  171,
      201,  169,  201,  171,  201,  175,  201,  173,  201,  172,
      175,  201,  175,  201,  178,  181,  201,  176,  201,  179,
      181,  201,  180,  181,  201,  181,  201,  181,  201,  184,
      201,  182,  201,  184,  201,  187,  201,  186,  201,  187,
      201,  185,  187,  201,  187,  201,  190,  201,  189,  201,
      190,  201,  188,  190,  201,  190,  201,   52,   54,  201,

       53,  201,   54,  201,   54,  201,  131,  201,  130,  201,
      129,  131,  201,  131,  201,   47,   48,  201,   46,  201,
       48,  201,   48,  201,  192,  194,  201,  193,  201,  194,
      201,  194,  201,  194,  201,  197,  201,  196,  201,  195,
      197,  201,  197,  201,  199,  200,  201,  198,  201,  200,
      201,  139,  201,  139,  142,  201,  140,  201,  141,  201,
       41,    4,   34,   36,   38,   36,   26,   26,   18,   26,
       18,   18,   18,   18,   18,   18,   24,   25,   20,   26,
       27,   18,   18,   18,   18,   18,   18,   18,   18,   30,
       31,   34,   28,   86,   86,   87,   86,   90,  107,  107,

      108,   67,   67,   69,   67,   72,   72,   73,   72,   76,
       76,   76,   76,   76,   76,   77,   76,   95,   96,   99,
      100,  104,  103,  104,   92,   92,   93,   92,   55,   55,
       55,   56,   59,   59,   60,   59,   63,   63,   64,   80,
       81,   84,   83,  114,  120,  117,  120,  122,  122,  119,
      124,  127,  133,  136,  135,  112,  143,  145,  148,  147,
      156,  167,  170,  172,  174,  178,  177,  183,  185,  185,
      188,  188,   52,  129,   47,  192,  191,  195,  199,  139,
       26,   35,   33,   40,   36,   40,   40,   40,   36,   40,
       40,   37,    7,    1,    1,    2,   18,   18,   18,   18,

       22,   23,   18,   18,   18,   20,    5,   18,   18,   18,
       18,   18,   18,   18,   32,   33,   29,   86,   86,   67,
       72,   72,   76,   76,   76,   92,   92,   55,   55,   55,
       55,   59,   63,  121,   49,   50,   51,   45,  191,   40,
       40,   16,    1,   19,    2, 8198,   18,16390,   18,   18,
       18,   18,   18,   18, 8198,   18,16390,   18,   18,   18,
       18,   18,   86,   72,   76,   76,   68,   92,   55,   55,
       55,   63,  121,  151,  159,   45,   15,   39,    7,   13,
     8198, 8198,   18,   18,   18,   21,   18,   18,    5, 8198,
       18,   18,   18,   86,   72,   76,   92,    3,   14,    8,

       18,   18,   21,   18,   18,   18,   18,   18,   86,   72,
       76,   92,   80,  153,  161,   18,   18,   18,   18,   18,
       18,   18,   86,   72,   76,   92,  152,  150,  160,   18,
       18,   18,   18,   18,   18,   18,   86,   88,  109,   70,
       72,   74,   76,   78,   97,  101,  105,   91,   92,   57,
       61,   65,   82,   85,  115,  118,  125,  126,  132,  134,
      111,  144,  154,  155,  158,  169,  173,  176,  182,  186,
      189,  130,   46,  193,  196,  198,   10,    9,   18,   18,
       18,    5,   18,   18,  162,   12,   11,   18,   18,   18,
       18,   18,   18,  165,   17,   18,   17,   18,  166,  163,

       17,   18,  166,  164,   41
    } ;

static yyconst flex_int16_t yy_accept[1162] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
       23,   25,   27,   29,   32,   34,   36,   39,   41,   43,

       45,   47,   49,   52,   54,   56,   58,   60,   62,   65,
       67,   69,   70,   72,   74,   76,   78,   81,   83,   85,
       87,   89,   91,   93,   95,   98,  100,  102,  104,  106,
      108,  111,  113,  115,  117,  119,  121,  124,  127,  129,
      132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  155,  158,  160,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  180,  182,  185,  187,  189,  191,  193,
      195,  198,  200,  202,  204,  206,  208,  210,  212,  215,
      217,  219,  221,  223,  225,  228,  230,  232,  234,  235,
      237,  239,  240,  242,  244,  247,  249,  252,  254,  257,

      259,  261,  263,  265,  266,  268,  270,  272,  274,  276,
      279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  304,  307,  309,  311,  314,  316,  318,  321,
      323,  325,  327,  329,  332,  334,  336,  338,  340,  342,
      344,  346,  348,  350,  353,  355,  358,  360,  363,  366,
      368,  370,  372,  374,  376,  378,  380,  382,  385,  387,
      389,  391,  393,  396,  398,  401,  403,  405,  407,  409,
      411,  414,  416,  419,  421,  423,  425,  428,  430,  432,
      434,  436,  438,  440,  443,  445,  448,  450,  452,  454,
      457,  459,  461,  461,  461,  461,  461,  462,  462,  462,

      463,  463,  463,  463,  463,  463,  464,  465,  466,  466,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  468,  469,  470,  471,  472,  473,
      474,  475,  476,  477,  478,  479,  481,  482,  483,  484,
      485,  486,  487,  488,  489,  490,  490,  490,  490,  490,
      490,  490,  491,  492,  493,  493,  494,  494,  494,  494,
      494,  494,  495,  496,  496,  496,  496,  497,  498,  498,
      499,  500,  500,  501,  501,  501,  502,  502,  502,  502,
      502,  502,  503,  503,  503,  504,  504,  505,  505,  505,
      505,  506,  506,  507,  508,  508,  508,  508,  509,  510,

      510,  511,  512,  512,  513,  514,  515,  515,  515,  516,
      516,  517,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  519,  519,  520,  520,
      520,  521,  521,  523,  523,  523,  524,  524,  525,  525,
      525,  526,  527,  527,  527,  527,  528,  529,  530,  530,
      530,  531,  531,  532,  532,  533,  533,  533,  533,  533,
      533,  534,  534,  534,  535,  535,  536,  536,  536,  536,
      537,  538,  538,  539,  539,  540,  540,  541,  541,  541,
      542,  542,  543,  543,  544,  544,  545,  545,  546,  547,
      548,  548,  549,  550,  550,  551,  551,  552,  552,  552,

      552,  552,  553,  553,  554,  555,  556,  556,  556,  556,
      557,  557,  558,  558,  559,  559,  560,  561,  561,  561,
      562,  562,  562,  562,  563,  563,  563,  563,  563,  563,
      563,  564,  564,  565,  565,  566,  566,  567,  567,  568,
      568,  568,  569,  569,  570,  570,  571,  571,  571,  572,
      572,  573,  573,  573,  574,  574,  574,  575,  575,  576,
      576,  576,  577,  578,  578,  579,  579,  580,  580,  581,
      582,  582,  582,  582,  582,  583,  584,  585,  587,  588,
      589,  591,  592,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  594,  595,  596,

      597,  598,  599,  600,  601,  602,  603,  603,  604,  605,
      606,  607,  608,  609,  610,  611,  612,  613,  614,  615,
      615,  615,  615,  615,  616,  617,  617,  618,  619,  619,
      620,  620,  620,  620,  621,  622,  622,  623,  624,  624,
      625,  625,  626,  626,  626,  626,  626,  626,  626,  627,
      627,  628,  629,  630,  631,  632,  632,  632,  633,  633,
      634,  634,  634,  634,  634,  634,  634,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  636,  637,  638,  638,  638,  639,

      639,  640,  640,  640,  640,  640,  640,  640,  640,  641,
      642,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  644,  645,  646,  649,  650,  651,  651,
      652,  653,  654,  654,  655,  658,  659,  660,  661,  662,
      663,  663,  663,  663,  664,  664,  664,  665,  666,  666,
      667,  668,  668,  668,  668,  669,  669,  670,  671,  672,
      672,  672,  673,  673,  673,  673,  673,  673,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  677,  677,  677,  677,

      677,  677,  678,  678,  678,  679,  679,  679,  679,  679,
      679,  681,  681,  681,  681,  682,  684,  685,  686,  687,
      688,  689,  691,  692,  693,  694,  694,  695,  695,  695,
      696,  697,  697,  697,  697,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  699,  700,  700,  700,  700,  701,  701,  701,  701,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,

      710,  710,  711,  712,  712,  712,  712,  713,  713,  713,
      713,  713,  713,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  717,  718,  719,  720,  721,
      722,  723,  724,  724,  724,  725,  726,  726,  726,  726,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  728,  729,  729,  729,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  731,  732,  733,  734,  735,  736,  737,  739,  740,
      741,  743,  745,  746,  747,  748,  750,  751,  752,  753,
      754,  755,  756,  757,  758,  759,  759,  760,  760,  760,
      760,  760,  760,  760,  760,  761,  762,  763,  764,  765,
      765,  765,  765,  765,  765,  766,  767,  768,  769,  770,
      771,  772,  773,  774,  775,  776,  777,  777,  777,  778,
      779,  780,  781,  782,  783,  784,  785,  785,  785,  785,

      785,  785,  785,  785,  785,  785,  785,  786,  786,  786,
      787,  788,  789,  790,  790,  791,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  793,
      793,  794,  794,  794,  794,  794,  794,  794,  795,  795,
      795,  797,  797,  799,  799,  799,  800,  801,  801,  803,
      803,  803,  804,  804,  804,  804,  804,  804,  805,  806,
      806
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   21,   21,   21,   22,    1,   23,
        1,   24,    1,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   31,   31,   35,   36,   31,   37,   38,
       31,   39,   31,   40,   41,   31,   31,   31,   31,   31,
       42,   43,   44,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   31,   55,   56,   57,   58,
       59,   60,   31,   61,   62,   63,   64,   65,   66,   67,
       68,   31,   69,   70,   71,   72,    1,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    7,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   18,    7,   19,   20,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,    1,   22,    1,   23,   21,   21,   21,   21,   21,
       21,   21,   21,   24,   21,   21,   21,   25,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,    7,   26,
       27,   28,   29
    } ;

static yyconst flex_int16_t yy_base[1385] =
    {   0,
        0,    0,    0,   72,  142,  214, 5132, 5131,  286,    0,
      359,    0,  432,  504,  576,  648,  720,    0,  793,    0,
       72,   73,   75,   80,  866,  938, 1010,    0, 1083,    0,
     1156,    0, 1229,    0,   78,   87, 1302,    0,   92,   94,
     1375,    0,   96,  126,  158,  185,   81,   93, 1448, 1521,
      190,  197,  153,  238,  239,  443,  119,  129, 1594,    0,
      448,  455,  131,  137, 1667,    0, 1740,    0,  205,  475,
      517,  520, 1813,    0,  191,  449,  527,  528, 1886,    0,
      138,  202,   99,  101, 5132, 8889, 8889,  567,  482, 5124,
     5119, 5102,  181,  235, 1954, 2011,  251, 2076, 2147,  104,

      530,  606,  672,  537,  467, 8889, 8889, 5119,  237,  516,
      909, 5119, 8889, 8889, 8889,    0,  103,  491, 8889,  621,
      676,  896, 1476, 5098,  962,  562,  600, 8889, 8889, 5112,
      599,  619, 5094, 1535, 8889, 8889, 2217,  952, 1544, 1956,
     8889, 2020,  983, 1472, 2085, 2107, 5095, 1964,  630, 8889,
     8889,    0,  927, 8889, 8889, 5109, 1462, 8889, 8889, 5108,
     1497, 8889, 8889, 5107,  885, 1465, 2028, 8889, 8889,    0,
     2172, 1509, 8889, 1567, 2007, 2129, 2180, 5091, 2241, 1959,
      697, 8889, 8889,    0, 5095, 1995, 8889, 5094, 2046,    0,
     8889, 2050, 8889, 8889,    0, 5065,  879, 8889, 5066, 2190,

     2288, 8889,    0, 5062, 8889,  168, 8889, 5099, 5055,    0,
     8889, 8889, 5081, 5085, 5044,  132, 8889, 8889, 2151, 8889,
     8889, 8889,    0, 2202, 8889,  891, 8889, 5047,    0, 8889,
     8889,  137,  445,    0, 8889, 8889,  489,  944, 8889, 8889,
     2206, 8889, 8889,    0, 2262,    0, 8889, 8889, 8889, 8889,
     2269, 8889, 8889, 2273, 8889, 8889,    0,  187, 5046, 8889,
     8889,    0,  244, 5043,    0, 8889, 5035, 5034, 8889, 8889,
        0, 5039,    0, 8889, 5067, 5037,    0, 8889, 8889, 5008,
      190, 8889, 8889,    0, 5034,    0, 8889, 5033,    0,    0,
     8889, 8889, 2054, 2353, 2418,  914, 2065, 5026, 5063, 8889,

        0, 5044, 5039,    0,  272,  437, 8889, 8889, 2490, 5038,
      459, 5045,  647,  216,  571,  644,  646,  660, 2277,  451,
      850, 5010, 4994, 8889,  853, 2562, 4985, 4992, 5005, 4996,
     1507,  420, 4992, 8889, 8889,    0, 2305, 1504, 2115, 2101,
     2252, 2070, 2330, 2315, 2303, 2633,  610, 2278,  708,  982,
     2335,  918, 2364, 2365,  988, 8889, 1554, 2324, 2386, 2390,
     5044, 8889, 2119,  953, 2367, 1572, 8889, 2376, 5047, 8889,
      544, 5035,  573, 5021, 1580, 8889, 4986, 2435, 2445, 5014,
     2471, 2461, 2350, 2518, 2534, 1974, 8889, 4973, 2411, 2543,
        0, 5020, 8889, 2507, 1983, 2536, 2428, 8889, 2551, 5019,

      464, 2703, 2775, 5018, 8889, 2558, 2021, 2571, 5017, 2479,
     8889, 2574, 2606, 2657, 5001, 2666, 2731, 2616, 2799, 2747,
        0, 2809, 2639, 2682, 1499,    0, 2539, 8889, 4939, 4984,
     8889, 2597, 8889, 4934, 4982, 8889, 2601, 8889, 4927, 4975,
     8889, 2634, 2137, 2676, 2610, 8889, 2722, 2820, 2830,    0,
     2846, 4954, 2854, 2624, 8889, 4892, 2875, 2879, 4922, 2900,
     2908, 2697, 2924, 2932, 2634, 8889, 4887, 2752, 2953,    0,
     4925, 4929, 4919, 2662, 8889, 4879, 4917, 4880, 2687, 8889,
     4876,    0, 2757, 8889, 4875,    0, 4874, 2127, 8889, 4886,
     4883, 8889, 4918, 2765, 8889, 4870,    0, 4869, 1553, 4916,

     4915, 8889, 4860,    0, 8889, 8889, 4857, 4858, 2804, 8889,
     4854,    0, 2825, 8889, 4852, 2888, 8889, 4862, 4848,    0,
      611, 4851, 4845,    0, 4842, 4848, 4852,  580, 4841, 2859,
     8889, 4840,    0, 2867, 8889, 4839,    0, 2884, 8889, 4838,
     2913, 8889, 4831,  956, 4877,  975, 4860, 4824, 1564, 4870,
     1948, 4855, 4820,    0, 4865,  202,    0, 4817,    0,  102,
     4816,    0,    0, 4815,    0, 4814,    0, 4813,    0, 4816,
     4810, 4838,    0, 4842,  919, 4833, 8889, 8889, 4829, 2996,
     4827, 4834, 8889, 4832, 1932, 4795, 4780,  495, 2091,  662,
     2268, 8889, 1945,  865, 1441, 4786, 4782, 2064, 2959,    0,

     2201, 2304, 2395, 2279, 8889, 8889,    0, 2248, 2761, 2572,
        0,    0, 2416, 2514, 2938, 2937, 2972, 2942, 2973, 3027,
     2264, 2661, 3039, 8889, 3048, 3055, 2345, 2877, 2949, 3009,
        0, 4753, 4752,    0, 3057, 3063, 3065,  589, 3125, 3071,
     3098, 3137, 4793, 2948, 2958, 4745, 4744, 4738, 3074, 3081,
     3134, 3180, 3170, 3201, 3209, 4710, 4705,    0,    0, 4734,
     4696, 4686, 4694, 4693, 4692,    0,    0, 4691, 4690, 4689,
     4693, 4682, 4679, 4678, 4676, 4665, 4674, 4657, 4660, 4664,
     2526, 4651, 4663, 4660, 4643, 4642, 4640, 4635, 4630,    0,
     4627,    0, 4626, 8889, 8889, 8889, 4624, 4651, 2377, 4618,

        0, 4617, 4616, 4612, 2402, 4610, 4654,    0, 2907, 2490,
     8889, 1465, 4603, 4602, 2027, 4630, 2971, 2072, 3099, 1449,
     4579, 3838, 2789, 8889,    0, 3231, 2985, 3057, 3823, 3031,
     3043, 2943, 3850, 3303, 3361, 3155, 3304, 3346, 3347, 3176,
     3317, 3321, 3391, 3295, 3831, 3823, 3380, 3461, 3533, 3393,
     8889, 3820, 3819, 3814, 3402,    0, 3437, 3487, 3514, 3812,
     3805, 3844, 3796, 3777, 3757, 3753, 3737,    0, 3728, 3726,
     3717, 3513, 3709, 3702, 3700, 3681, 3688, 3683, 8889, 3670,
     3670, 3667, 8889, 3660, 3666, 3647, 3643, 3645, 3631, 3627,
     3623, 3622, 3615, 3614, 3599, 2977, 3598, 3592, 3588, 3539,

     3537, 8889, 3570, 3315, 8889, 3562, 3533, 3516, 3185, 3390,
     8889, 2092, 3511, 3517,    0, 3020, 3108, 3354, 3460, 3161,
     3445, 3605, 3450, 3509, 3510, 3629, 3504, 3478, 3470, 3618,
     3636, 3437, 3432, 3431, 3620, 3579, 3425, 3414, 3404, 3397,
     3399, 3393, 3387, 3385, 3378, 3377, 3349, 3340, 3297, 3309,
      650, 3291, 3112, 3293, 3286, 3285, 3284, 3280, 3267, 3265,
     3163, 3175,  829, 3161, 3165, 3154, 2123, 3157, 3143, 3136,
     3126, 3121, 3120, 3114, 3103, 3096, 3095, 3089, 3078, 3071,
     3095, 8889, 3046, 3044, 3420, 8889, 3062, 3424, 3029, 3015,
     3309, 3496, 8889, 3497, 3650, 3639, 3522, 3657, 3647, 3025,

     3009, 3649, 3684, 3007, 3000, 2990, 3666, 3713, 3721, 2988,
     2977, 2970, 8889, 2952, 2946, 2942, 2941, 2937, 2936, 2921,
     1525, 2908, 2889, 2880, 2866, 2857, 2846, 2857, 2844, 2851,
     2838, 2813, 2807, 8889, 2802,    0,    0, 2796, 8889, 2775,
     3305, 2776, 2777, 2767, 2758, 2749, 2748, 2742, 2724, 2696,
     2694, 2690, 2685, 2684, 2683, 2677, 2676, 2675, 2662, 2636,
     2672, 3566, 2633, 2605, 3587, 3475, 3589, 3693, 3702, 3709,
     3742, 3733, 2611, 2602, 3739, 3746, 2596, 2584, 2579, 3755,
     2571, 2563, 2555, 2536, 2522, 2494, 2488, 2469, 2465, 2468,
     2464,    0, 2454, 2459, 2427, 2426, 2432, 2421, 2413, 2397,

     2392, 2390, 2385,    0, 8889, 8889, 2384, 2386, 8889, 2383,
     2365, 2354, 2347, 2346, 2340, 2322, 2314, 2310, 2281, 2275,
     2273, 2268, 2266, 2254, 2243, 2238, 2223, 2209, 2244, 2232,
     3760, 3340, 3492, 3776, 3769, 3744, 3778, 3779, 8889, 8889,
     3786, 3819, 8889, 8889, 8889, 3796, 8889, 8889, 8889, 8889,
     8889, 8889, 8889, 8889, 8889, 2196, 8889, 2190, 2181, 2180,
     2179, 2190, 2180, 2162, 8889, 8889, 8889, 8889, 8889, 2155,
     2152, 3313, 2156, 2145, 8889, 8889, 8889, 8889, 8889, 8889,
     8889, 8889, 8889, 8889, 8889, 8889, 2154, 2142, 8889, 8889,
     3788, 3786, 3822, 2143, 3797, 3815, 2091, 2077, 2055, 2049,

     2048, 2029, 2025, 2020, 1983, 1975, 8889, 1937, 1942, 8889,
     8889, 3339, 3764,   71, 3826, 3828, 1512, 1494, 1483, 1445,
     1429, 1432, 1410,  915,  931, 3323,  900,  870, 3804,  125,
     3840,  838,  818,  648,  611,  574,  573, 8889, 3416,  543,
     3508, 1989, 3844,  510,  482, 3591, 8889,  423, 3846, 1453,
      223, 3848,  211, 1942,   70, 3850,  420, 8889, 3854, 8889,
     3897, 3926, 3955, 3984, 4013, 4042, 4071, 4100, 4129, 4158,
     4187, 4216, 4245, 4274, 4303, 4332, 4361, 4390, 4419, 4448,
     4477, 4506, 4535, 4564, 4593, 4622, 4644, 4662, 4678, 4697,
     4714, 4733, 4761, 4779, 4808, 4817, 4832, 4860, 4888, 4916,

     4945, 4963, 4992, 5016, 5044, 5072, 5100, 5116, 5145, 5174,
     5203, 5221, 5230, 5258, 5286, 5314, 5342, 5351, 5366, 5382,
     5411, 5427, 5456, 5485, 5501, 5530, 5559, 5575, 5600, 5629,
     5645, 5674, 5683, 5698, 5707, 5722, 5751, 5767, 5796, 5825,
     5841, 5870, 5899, 5922, 5950, 5959, 5972, 5990, 6002, 6027,
     6036, 3843, 6053, 6077, 6102, 6120, 6138, 6167, 6182, 6204,
     6232, 6260, 6288, 6301, 6330, 6348, 6366, 6395, 6424, 6448,
     6466, 6494, 6522, 6550, 6579, 6607, 6623, 6652, 6681, 6710,
     6728, 6746, 6774, 6783, 6811, 6839, 6867, 6895, 6908, 6923,
     6945, 6961, 6990, 7006, 7035, 7064, 7086, 7102, 7131, 7160,

     7176, 7201, 7230, 7246, 7275, 7290, 7312, 7327, 7349, 7378,
     7394, 7423, 7452, 3855, 7468, 7497, 7526, 7539, 7568, 7584,
     7598, 7623, 7652, 7680, 3861, 7704, 7729, 3867, 4632, 7757,
     7771, 7789, 7798, 7811, 7829, 7847, 7876, 7900, 7924, 7953,
     7981, 7999, 8017, 8045, 8073, 8101, 8114, 8123, 8138, 8147,
     8160, 8189, 8198, 8207, 4637, 8236, 8252, 8268, 8293, 4685,
     8321, 8346, 8355, 8379, 8403, 8418, 8436, 8465, 8489, 8507,
     8516, 8544, 8572, 8587, 8603, 8628, 8657, 8685, 8714, 8743,
     8772, 8801, 8830, 8859
    } ;

static yyconst flex_int16_t yy_def[1385] =
    {   0,
     1161, 1161, 1160,    3, 1162, 1162, 1163, 1163, 1160,    9,
     1160,   11, 1164, 1164, 1165, 1165, 1160,   17, 1160,   19,
     1166, 1166, 1167, 1167, 1168, 1168, 1160,   27, 1160,   29,
     1160,   31, 1160,   33, 1169, 1169, 1160,   37, 1170, 1170,
     1160,   41, 1171, 1171, 1172, 1172, 1173, 1173, 1174, 1174,
     1175, 1175, 1176, 1176, 1177, 1177, 1178, 1178, 1160,   59,
     1179, 1179, 1180, 1180, 1160,   65, 1160,   67, 1181, 1181,
     1181, 1181, 1160,   73, 1182, 1182, 1183, 1183, 1160,   79,
     1184, 1184, 1185, 1185, 1160, 1160, 1160, 1160, 1160, 1186,
     1187, 1188, 1188, 1189, 1160, 1190, 1191, 1192, 1160, 1160,

     1188, 1188, 1189, 1188, 1160, 1160, 1160, 1193, 1194, 1194,
     1194, 1195, 1160, 1160, 1160, 1196, 1197, 1160, 1160, 1160,
     1160, 1198, 1198, 1160, 1199, 1160, 1200, 1160, 1160, 1201,
     1202, 1202, 1160, 1202, 1160, 1160, 1203, 1204, 1204, 1204,
     1160, 1204, 1160, 1160, 1205, 1205, 1160, 1206, 1207, 1160,
     1160, 1208, 1160, 1160, 1160, 1209, 1160, 1160, 1160, 1210,
     1160, 1160, 1160, 1211, 1212, 1212, 1212, 1160, 1160, 1213,
     1214, 1160, 1160, 1160, 1160, 1215, 1215, 1160, 1216, 1160,
     1217, 1160, 1160, 1218, 1219, 1160, 1160, 1220, 1160, 1221,
     1160, 1160, 1160, 1160, 1222, 1160, 1223, 1160, 1224, 1160,

     1160, 1160, 1225, 1160, 1160, 1160, 1160, 1226, 1160, 1227,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1228, 1160, 1160, 1160, 1160, 1160, 1229, 1160,
     1160, 1160, 1160, 1230, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1231, 1160, 1232, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1233, 1234, 1160, 1160,
     1160, 1235, 1236, 1160, 1237, 1160, 1160, 1160, 1160, 1160,
     1238, 1160, 1239, 1160, 1160, 1160, 1240, 1160, 1160, 1160,
     1160, 1160, 1160, 1241, 1160, 1242, 1160, 1160, 1243, 1243,
     1160, 1160, 1160, 1244, 1244, 1160, 1160, 1160, 1245, 1160,

     1246, 1247, 1248, 1249, 1160, 1248, 1160, 1160, 1250, 1248,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1251, 1244, 1251,  326,  326,  326,
      326,  326,  326, 1160, 1160, 1252, 1253, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1248, 1160, 1160, 1248, 1248, 1160, 1160,
     1255, 1160, 1256, 1257, 1256, 1160, 1160, 1256, 1258, 1160,
     1259, 1260, 1259, 1160, 1160, 1160, 1160, 1160, 1261, 1160,
     1261, 1262, 1263, 1261, 1262, 1160, 1160, 1160, 1263, 1263,
     1264, 1265, 1160, 1266, 1267, 1266, 1160, 1160, 1266, 1268,

     1268, 1269, 1269, 1268, 1160, 1270, 1271, 1270, 1268, 1160,
     1160, 1270, 1160, 1272, 1160, 1272, 1273, 1274, 1272, 1160,
     1275, 1273, 1274, 1274, 1276, 1277, 1160, 1160, 1160, 1278,
     1160, 1160, 1160, 1160, 1279, 1160, 1160, 1160, 1160, 1280,
     1160, 1281, 1282, 1281, 1160, 1160, 1281, 1283, 1160, 1284,
     1283, 1160, 1285, 1160, 1160, 1160, 1160, 1286, 1160, 1286,
     1287, 1288, 1286, 1287, 1160, 1160, 1160, 1288, 1288, 1289,
     1290, 1291, 1290, 1160, 1160, 1160, 1292, 1160, 1160, 1160,
     1160, 1293, 1160, 1160, 1160, 1294, 1160, 1295, 1160, 1296,
     1160, 1160, 1297, 1160, 1160, 1160, 1298, 1160, 1160, 1299,

     1299, 1160, 1160, 1300, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1301, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1302,
     1160, 1160, 1160, 1303, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1304, 1160, 1160, 1160, 1305, 1160, 1160, 1160,
     1160, 1160, 1160, 1306, 1307, 1306, 1160, 1160, 1308, 1309,
     1308, 1160, 1160, 1310, 1160, 1160, 1311, 1160, 1312, 1160,
     1160, 1313, 1314, 1160, 1315, 1160, 1316, 1160, 1317, 1160,
     1160, 1318, 1319, 1320, 1160, 1321, 1160, 1160, 1321, 1322,
     1321, 1320, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1323, 1160, 1160, 1160, 1160, 1160, 1160, 1324, 1324, 1325,

     1160, 1326, 1326, 1326, 1160, 1160, 1327, 1326, 1326, 1326,
     1328, 1329, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1160,
     1160, 1160, 1160, 1160, 1321, 1160, 1160, 1331, 1331, 1332,
     1333, 1160, 1160, 1334, 1335, 1335, 1336, 1160, 1337, 1338,
     1338, 1339, 1340, 1160, 1341, 1160, 1160, 1160, 1342, 1342,
     1343, 1344, 1345, 1346, 1346, 1160, 1160, 1347, 1348, 1349,
     1160, 1160, 1160, 1160, 1160, 1350, 1351, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1352, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1353,
     1160, 1354, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1355, 1160, 1160, 1160, 1160, 1160, 1356, 1357, 1358, 1160,
     1160, 1160, 1160, 1160, 1160, 1359, 1359, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1360, 1160, 1361, 1361, 1362, 1361,
     1361, 1361, 1363, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1160, 1160, 1365, 1366, 1160, 1160, 1367, 1368, 1368, 1369,
     1160, 1160, 1160, 1160, 1370, 1371, 1372, 1372, 1373, 1160,
     1160, 1374, 1160, 1160, 1160, 1160, 1160, 1351, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1375, 1358, 1160, 1160, 1160, 1160, 1160, 1376,
     1160, 1160, 1160, 1160, 1377, 1377, 1361, 1361, 1160, 1361,
     1364, 1363, 1364, 1364, 1364, 1160, 1366, 1160, 1160, 1367,
     1369, 1160, 1160, 1160, 1370, 1378, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1379, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1375, 1160, 1160, 1160, 1380, 1160, 1376, 1376, 1160, 1160,
     1361, 1361, 1160, 1361, 1364, 1364, 1364, 1364, 1366, 1160,

     1160, 1367, 1369, 1160, 1160, 1160, 1370, 1378, 1378, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1381, 1382, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1380, 1380, 1160, 1160, 1361, 1361, 1361, 1364, 1364, 1364,
     1364, 1366, 1160, 1160, 1367, 1369, 1160, 1160, 1160, 1370,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1383, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1384, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1361, 1361, 1361, 1364, 1364, 1364, 1364, 1366, 1160, 1160,
     1367, 1369, 1160, 1160, 1160, 1370, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1361, 1361, 1160, 1363, 1364, 1364, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1361, 1361, 1363, 1364, 1364, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1361, 1363,
     1364, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1361, 1363, 1364, 1160, 1160, 1160, 1160, 1160, 1160, 1363,
     1160, 1160, 1160, 1363, 1160, 1160, 1363, 1160, 1363,    0,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160
    } ;

static yyconst flex_int16_t yy_nxt[8963] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   87,   92,   87,   93,   94,   87,   92,   92,
       92,   87,   95,   87,   96,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   87,   98,   87,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   87,   87,
       87,   87,   87,   99,  155,  155,   99,  159,  156,  156,
      191,  160,  159,  218,  100,  101,  160,  102,  103,  191,
       86,  104,  104,  105,  198,  218,  198,  206,  207,   86,

      206,  290,  208,  290,  199,  352,  199,  698,  352,  291,
      292,  291,  292,  612,  157,  157,  200,  161,  200,  372,
      192,  240,  161,  219,  374,  699, 1130,  206,  207,  192,
      206,  240,  208,  253,  201,  219,  201,  992,  209,  253,
      287,  105,  106,  106,  107,  106,  106,  106,  108,  106,
      106,  106,  106,  106,  106,  230,  106,  231,  106,  110,
      211,  241,  212,  110,  106,  106,  106,  612,  209,  499,
      213,  241,  499,  254,  500,  214,  508,  232, 1142,  254,
      288,  507,  215,  106,  111,  106,  521,  211,  305,  212,
      522,  226,  227,  274,  226,  233,  306,  213,  226,  227,

      216,  226,  214,  545,  287,  304,  275,  266,  547,  215,
      106,  106,  106,  106,  106,  106,  107,  106,  106,  106,
      108,  106,  106,  106,  106,  106,  106,  216,  106,  267,
      106,  110,  228,  276,  564,  110,  106,  106,  106,  228,
      230,  235,  231,  236,  288,  695,  307,  267,  303,  308,
      303,  309,  588,  364,  365,  106,  111,  106,  365,  304,
      550,  563,  232,  237,  303,  552,  303,  303, 1156,  303,
      303,  303,  696,  575,  588,  304,  575,  311, 1155,  365,
      233,  238,  106,  106,  106,  106,  114,  114,  115,  114,
      114,  114,  114,  114,  116,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  114,  118,  114,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  114,  114,  114,  114,  117,  119,
      120,  121,  120,  120,  119,  119,  119,  122,  119,  119,
      119,  119,  119,  119,  119,  123,  119,  119,  119,  119,
      124,  119,  119,  119,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      119,  126,  119,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  119,  119,  119,
      127,  125,  128,  128,  129,  128,  128,  128,  130,  128,
      128,  128,  128,  128,  128,  235,  128,  236,  128,  132,
      247,  274,  576,  132,  133,  128,  128,  247,  248,  249,
      583,  304,  612,  583,  275,  248,  249,  237,  359,  608,
      638,  359,  250,  128,  134,  128,  595,  266,  609,  250,
     1159, 1153,  360,  296,  297,  238,  296,  404,  351,  523,
      251,  276,  375,  376,  521,  375,  595,  251,  522,  267,

      128,  128,  128,  128,  128,  128,  129,  128,  128,  128,
      130,  128,  128,  128,  128,  128,  128,  267,  128,  266,
      128,  132,  266,  715,  298,  132,  133,  128,  128,  278,
      278,  352, 1160,  365,  352,  377,  351,  365,  525,  279,
      279,  268,  526,  715,  268,  128,  134,  128,  527,  992,
      528,  280,  280,  357,  304,  358,  358,  358,  365,  268,
      372,  304,  268,  386,  387,  374,  386, 1151,  293,  281,
      281,  293,  128,  128,  128,  128,  135,  135,  136,  135,
      135,  135,  137,  135,  135,  135,  135,  135,  135,  372,
      135,  294,  135,  139,  374,  405, 1148,  139,  140,  141,

      135,  389,  389,  389,  389,  589,  388,  353,  390,  295,
      353,  352,  405,  305,  352,  395,  396,  135,  142,  135,
      396,  354,  378,  378,  378,  378,  589,  351, 1146,  683,
      304,  423,  423,  423,  423, 1160,  396,  379,  424,  992,
      396,  396,  380,  684,  135,  135,  135,  135,  135,  135,
      136,  135,  135,  135,  137,  135,  135,  135,  135,  135,
      135,  396,  135,  589,  135,  139,  676,  992,  677,  139,
      140,  141,  135,  355,  356,  351,  355,  378,  378,  378,
      378,  590,  589,  307,  585,  303,  308,  303,  309,  135,
      142,  135,  379,  589,  589,  924,  304,  380,  468,  468,

      468,  468,  590, 1145,  589,  469,  585,  586,  587,  355,
      356,  925,  355,  589,  311,  589,  135,  135,  135,  135,
      119,  143,  144,  143,  143,  119,  119,  119,  145,  119,
      119,  119,  119,  119,  119,  119,  146,  119,  119,  119,
      119,  147,  119,  119,  119,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  119,  126,  119,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  119,  119,
      119,  149,  148,  150,  150,  151,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  150,  153,  150,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  150,  150,  150,  150,  152,  162,  162,  163,  162,
      162,  162,  164,  162,  162,  162,  162,  162,  162,  939,
      162,  489,  162,  166,  589,  992,  940,  166,  162,  162,
      162,  490,  516,  517,  719,  516, 1144,  378,  378,  378,

      378,  443,  444,  599,  381,  589,  444,  162,  167,  162,
      366,  367,  379,  366,  719,  296,  297,  380,  296,  352,
      575,  491,  352,  575,  600, 1160,  365,  444,  427,  428,
      365,  427, 1140,  518,  162,  162,  162,  162,  162,  162,
      163,  162,  162,  162,  164,  162,  162,  162,  162,  162,
      162,  365,  162,  368,  162,  166,  298, 1139,  405,  166,
      162,  162,  162,  378,  378,  378,  378,  383,  407,  408,
      629,  429,  545,  408,  629,  405, 1137,  547,  379,  162,
      167,  162,  992,  380,  413,  413,  413,  413,  529,  355,
      356,  545,  355,  525,  408,  629,  547,  526,  621,  414,

      622,  622,  622,  527,  415,  528,  162,  162,  162,  162,
      168,  168,  169,  168,  168,  168,  168,  168,  170,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  168,  172,  168,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  168,  168,
      168,  168,  171,  173,  174,  175,  174,  174,  173,  173,
      173,  176,  173,  173,  173,  173,  173,  173,  173,  177,

      173,  173,  173,  173,  178,  173,  173,  173,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  173,  180,  173,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  173,  173,  173,  181,  179,  182,  182,  183,  182,
      182,  182,  182,  182,  184,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  182,  186,  182,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  182,  182,  182,  182,  185,   86,
       86,  187,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
       86,  189,   86,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,   86,   86,   86,

       86,  188,  193,  193,  194,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  193,  196,  193,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      193,  193,  193,  193,  195,   86,   86,  202,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,   86,  204,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,   86,   86,   86,   86,  203,  220,  220,
      221,  220,  220,  220,  220,  220,  220,  220,  222,  220,
      220,  220,  220,  432,  433,  220,  432,  720, 1136,  220,
      220,  220,  220,  413,  413,  413,  413,  384,  384,  384,
      384, 1160,  444,  812,  381, 1135,  444,  720,  414,  220,
      224,  220,  379,  415,  806,  612,  992,  380,  437,  438,

      644,  437, 1154,  644,  812,  601,  434,  444,  601,  421,
      454,  455,  992,  454,  806,  605,  220,  220,  220,  220,
      220,  220,  220,  221,  220,  220,  220,  220,  220,  220,
      220,  222,  220,  220,  220,  220,  397,  398,  220,  397,
     1134,  439,  220,  220,  220,  220,  612,  383,  606, 1133,
     1160, 1160,  396,  456,  499,  627,  396,  499,  627,  500,
     1160,  408,  220,  224,  220,  408, 1132, 1160,  457,  457,
      457,  457,  991,  366,  367,  607,  366,  396,  304,  399,
      550,  375,  376,  458,  375,  552,  408,  992,  459,  220,
      220,  220,  220,  220,  242,  242,  243,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  242,  245,  242,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  242,  242,  242,  242,  244,  255,  255,  256,
      255,  255,  255,  255,  255,  257,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  255,  259,
      255,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  255,  255,  255,  255,  258,
      260,  260,  261,  260,  260,  260,  260,  260,  262,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  260,  264,  260,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  260,  260,
      260,  260,  263,  269,  269,  270,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  269,  272,  269,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  269,  269,  269,  269,  271,  282,  282,  283,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  282,  285,  282,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  282,  282,  282,  282,  284,  312,
      465,  466,  409,  465,  550,  420,  413,  413,  420,  552,
      712,  313, 1160,  408,  421,  386,  387,  408,  386,  405,
      414,  314,  315,  718,  612,  415,  316,  317, 1157, 1128,
      318,  319,  712,  320,  321, 1127,  474,  475,  408,  474,

      636,  314,  315,  467,  636,  718,  316,  317,  457,  457,
      457,  457,  318,  319,  322,  323,  320,  321,  324,  324,
      324,  410,  411,  458,  410,  636, 1160, 1126,  459,  445,
      446,  612,  445,  324,  324,  325, 1160,  408,  641,  476,
     1125,  408,  641, 1160, 1160,  444, 1150,  479,  480,  444,
      479,  483,  484,  327,  483,  293,  809,  328,  293,  329,
      330,  331,  408,  641,  412,  723,  296,  297,  723,  296,
      444,  601,  447,  332,  601, 1124,  809,  333,  294,  334,
     1123,  335,  336,  324,  324,  324,  413,  413,  413,  413,
      481, 1122,  591,  416,  485,  591,  295,  589,  324,  324,

      327,  414,  601, 1121, 1120,  601,  415,  298,  419,  419,
      419,  419,  612, 1119,  592,  416,  601,  589,  325,  601,
      339,  589,  340,  414,  341,  342,  343,  616,  415,  489,
      457,  457,  457,  457, 1118,  364,  365,  460,  344,  490,
      365,  589,  345,  612,  334,  458,  335,  336,  346, 1117,
      459,  346,  509,  510,  650,  509,  418,  612,  650,  347,
      347,  365,  348,  349,  614, 1111,  350,  350,  351,  491,
      613,  294,  944,  449,  449,  449,  449, 1110,  418,  650,
      450,  463,  463,  463,  463, 1160,  945, 1114,  460,  295,
      451,  451,  451,  452, 1109,  511,  458,  492,  492,  492,

      462,  459,  601,  513,  514,  601,  513,  530,  531, 1108,
      530, 1106,  492,  492,  493, 1105,  351,  400,  400, 1104,
      400,  400,  400,  401,  400,  400,  400,  400,  400,  400,
     1103,  400,  492,  400,  403, 1102, 1101, 1100,  403,  400,
      404,  400,  457,  457,  457,  457,  515, 1099, 1098,  601,
      532,  462,  601,  601, 1097, 1090,  601,  458,  400,  403,
      400,  492,  459,  534,  535,  627,  534, 1089,  627,  717,
      538,  539,  717,  538,  541,  542, 1088,  541,  591,  353,
      601,  591,  353,  601, 1087,  400,  400,  400,  400,  494,
      495,  592,  494,  620,  612,  492,  492,  492,  297,  351,

      592,  615,  593, 1086,  601,  601,  536,  601,  601,  730,
      492,  492,  492,  540, 1085,  594,  601,  543,  303,  601,
      303,  303,  593,  303,  303,  303, 1084,  728, 1083,  304,
      493,  601,  496, 1082,  601, 1081,  359,  594,  605,  359,
      357, 1080,  358,  358,  358,  612,  627,  351,  304,  627,
      360,  389,  389,  389,  389,  726,  351,  612,  390,  492,
      324,  324,  324,  619,  617,  353,  623,  624,  353,  623,
     1079,  606,  612,  618, 1078,  324,  324,  570,  796,  360,
      625,  796, 1077, 1160,  365,  351,  626,  359,  365,  304,
      359,  359,  364,  365,  359,  324,  601,  365,  607,  601,

     1076,  360,  330,  331,  351,  620, 1075,  351, 1074,  365,
      724,  351,  389,  389,  389,  389, 1073,  601,  365,  390,
      601,  334, 1072,  335,  336,  324,  324,  324, 1071,  397,
      398,  630,  397,  351,  626, 1070,  378,  378,  378,  378,
      324,  324,  324,  724, 1069,  517,  384,  384,  384,  384,
     1067,  379, 1066,  381,  727,  351,  380, 1065,  612,  351,
      570,  379,  378,  378,  378,  378,  380,  330,  331,  734,
      724, 1064, 1160, 1160, 1160, 1160, 1063,  379, 1062, 1160,
      410,  411,  380,  410, 1061, 1060,  334, 1160,  335,  336,
      577,  805, 1160,  577,  805,  577,  577,  577,  577,  577,

      577,  578,  577,  579,  577,  579,  580,  577, 1059, 1058,
     1056,  577,  577,  577,  582,  601,  383,  992,  601,  384,
      384,  384,  384,  395,  396, 1055,  381,  783,  396, 1054,
      783,  577,  577,  577,  379,  378,  378,  378,  378,  380,
      427,  428, 1160,  427, 1160, 1160, 1160, 1160, 1053,  396,
      379, 1160, 1160,  396, 1052,  380,  612,  396,  577,  577,
      577,  577,  577,  601,  405,  735,  601,  395,  396, 1160,
     1160, 1160,  396,  601,  407,  408,  601, 1160,  396,  408,
      405,  405, 1051,  784, 1160, 1160, 1160, 1160,  408,  383,
      407,  408,  408,  396, 1160,  408, 1050,  405,  432,  433,

      408,  432,  437,  438, 1160,  437,  637,  413,  413,  413,
      413,  445,  446,  408,  445, 1049,  408,  423,  423,  423,
      423,  732,  414, 1048,  424,  454,  455,  415,  454,  642,
     1160, 1047, 1160, 1160,  346,  465,  466,  346,  465, 1045,
      423,  423,  423,  423, 1044,  347,  347,  424,  348,  349,
      443,  444,  350,  350,  351,  444, 1043,  294,  419,  419,
      419,  419, 1040,  474,  475,  416,  474, 1160, 1160, 1160,
     1160, 1039, 1030,  414, 1160,  295,  444,  621,  415,  622,
      622,  622, 1160, 1160, 1160, 1160, 1160, 1160,  479,  480,
     1160,  479, 1160,  444, 1029,  886, 1028,  444,  468,  468,

      468,  468,  351,  400,  400,  469,  400,  400,  400,  638,
      400,  400,  400,  400,  400,  400, 1027,  400,  444,  639,
      403, 1026, 1025, 1024,  403,  400,  404,  400,  418, 1023,
     1022, 1021,  420,  413,  413,  420, 1020, 1160,  443,  444,
     1019,  421, 1018,  444,  400,  403,  400,  414,  420,  413,
      413,  420,  415,  468,  468,  468,  468,  421,  483,  484,
      469,  483,  601,  414,  444,  601,  494,  495,  415,  494,
     1017,  400,  400,  400,  400,  400,  400,  651,  400,  400,
      400,  638,  400,  400,  400,  400,  400,  400, 1016,  400,
      723,  400,  403,  723, 1015, 1014,  403,  400,  400,  400,

      419,  419,  419,  419, 1013,  509,  510,  416,  509,  731,
      420,  413,  413,  420, 1012,  414,  400,  403,  400,  421,
      415,  449,  449,  449,  449,  414,  513,  514,  450,  513,
      415,  449,  449,  449,  449, 1011, 1010, 1008,  451,  451,
      451,  452, 1007,  400,  400,  400,  400,  449,  449,  449,
      449,  452, 1004, 1003,  450,  449,  449,  449,  449, 1002,
      530,  531,  450,  530,  451,  451,  451,  452,  534,  535,
      418,  534,  654,  654,  654,  452,  457,  457,  457,  457,
      463,  463,  463,  463, 1001,  538,  539,  460,  538,  516,
      517,  458,  516,  364,  629,  458,  459, 1000,  629,  999,

      459, 1160, 1160, 1160, 1160,  998,  997,  996, 1160,  457,
      457,  457,  457,  992,  541,  542, 1160,  541,  307,  629,
      303, 1160,  303,  804,  458,  463,  463,  463,  463,  459,
      518,  304,  460,  457,  457,  457,  457,  995,  601,  601,
      458,  601,  601,  601,  601,  459,  601,  601,  458,  644,
      462,  994,  644,  459, 1160, 1160, 1160, 1160,  421,  644,
      723, 1160,  644,  723,  993, 1160,  629,  724,  421,  990,
      629, 1160,  717,  601,  601,  717,  601,  601,  796,  612,
      612,  796,  989,  988,  612,  737,  601,  987,  986,  601,
      739,  629,  985,  820,  592,  462,  577,  736,  984,  577,

      724,  577,  577,  577,  577,  577,  577,  578,  577,  579,
      577,  579,  709,  577,  612,  612,  983,  577,  577,  577,
      582,  816,  740,  982,  816,  364,  365,  724,  623,  624,
      365,  623,  601,  738,  981,  601,  979,  577,  710,  577,
      623,  624,  741,  623,  601,  817,  978,  601,  626,  623,
      624,  365,  623,  977,  742,  974,  623,  624,  601,  623,
      626,  601,  744,  743,  577,  577,  577,  577,  577,  626,
      742,  973,  304,  395,  636,  964,  626,  405,  636, 1160,
      636,  395,  396,  963,  636,  811,  396,  407,  641,  960,
      443,  650,  641,  726,  405,  650,  626, 1160,  650,  636,

      810,  726,  650,  810, 1160,  636,  959,  396,  626,  601,
      818,  708,  601,  641, 1160,  641,  650,  626,  747,  641,
      958, 1160,  811,  650,  626,  400,  400,  957,  400,  400,
      400,  638,  400,  400,  400,  400,  400,  400,  956,  400,
      641,  400,  749,  405,  955,  954,  749,  400,  400,  400,
      443,  444,  953,  407,  408,  444,  601,  891,  408,  601,
      405,  927,  601,  952,  928,  601,  400,  749,  400,  951,
      950,  759,  759,  759,  759,  949,  444,  601,  450,  408,
      601,  449,  449,  449,  449,  948,  885,  755,  756,  885,
      750,  452,  947,  400,  400,  400,  400,  612,  757,  757,

      757,  452,  449,  449,  449,  449,  946,  943,  886,  450,
      449,  449,  449,  449,  894,  823,  942,  450,  612,  654,
      654,  654,  452,  941,  938,  937,  825,  654,  654,  654,
      452,  815,  816,  815,  815,  816,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  815,  815,  815,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  815,

      815,  815,  815,  815,  601,  601, 1009,  601,  601, 1009,
      601,  364,  365,  601, 1107,  936,  365, 1107,  623,  624,
      935,  623,  623,  624, 1138,  623,  307, 1138,  303,  933,
      303,  804,  741,  932,  931,  930,  826,  365,  626,  304,
      601,  601,  626,  601,  601,  612,  612,  601,  601,  929,
      601,  601,  827,  926,  923,  601,  965,  824,  601,  922,
      821,  815,  816,  815,  815,  816,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  626,  726,  612,  612,
      626,  888,  623,  624,  888,  623,  395,  396,  921,  405,

     1092,  396,  815,  822,  815,  735,  743,  920,  735,  407,
      408,  892,  626,  811,  408,  304,  405, 1147,  443,  444,
     1147,  962,  396,  444,  962,  888,  919,  918,  888,  815,
      815,  815,  815,  815,  917,  408,  916,  830,  449,  449,
      449,  449,  915,  886,  444,  756,  601,  811,  914,  601,
      831,  601,  913,  912,  601,  757,  757,  757,  452,  835,
      626,  400,  400,  911,  400,  400,  400,  638,  400,  400,
      400,  400,  400,  400,  910,  400,  601,  639,  749,  601,
      906,  905,  749,  400,  404,  400,  904,  612,  449,  449,
      449,  449,  612,  601,  895,  756,  601,  601,  601,  896,

      601,  601,  400,  749,  400,  757,  757,  757,  452, 1149,
      601,  601, 1149,  601,  601,  759,  759,  759,  759,  901,
      364,  365,  450,  601, 1032,  365,  601,  900,  893,  400,
      400,  400,  400,  400,  400,  452,  400,  400,  400,  638,
      400,  400,  400,  400,  400,  400,  365,  400,  726,  400,
      749,  612,  612,  899,  749,  400,  400,  400,  966,  967,
      847,  848,  890,  898,  612,  849,  897,  962,  850,  851,
      962,  889,  884,  852,  400,  749,  400,  853,  883,  854,
      449,  449,  449,  449,  970,  882,  708,  756,  601,  886,
      601,  601, 1152,  601,  880, 1152,  879,  908,  908,  908,

      452,  400,  400,  400,  400,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      623,  624, 1031,  623,  395,  396,  443,  444, 1033,  396,
      601,  444,  405,  601,  741,  878,  815,  815,  815,  877,
      626,  601,  407,  408,  601,  876,  875,  408,  601,  405,
      396,  601,  444,  364,  365,  395,  396,  902,  365,  907,
      396,  874,  873,  815,  815,  815,  815,  815,  408,  872,
      871,  612,  443,  444,  870,  903,  969,  444,  869,  365,
      405,  396,  612,  972,  601,  975,  968,  601,  626,  612,

      407,  408,  868,  601,  867,  408,  601,  405,  444,  866,
      601,  865,  980,  601,  449,  449,  449,  449,  864,  971,
      863,  756,  449,  449,  449,  449,  408,  862,  861,  756,
      976,  908,  908,  908,  452,  612,  860,  859,  858,  908,
      908,  908,  452,  601,  612,  601,  601, 1035,  601,  364,
      365,  612,  405, 1034,  365,  395,  396,  857, 1036,  856,
      396,  601,  407,  408,  601,  601,  855,  408,  601,  405,
      601,  443,  444,  601,  846,  365,  444, 1093,  297,  601,
     1093,  396,  601,  845,  612,  844,  612,  601,  408,  601,
      601, 1037,  601, 1038,  843,  364,  365,  444,  601, 1041,

      365,  601,  395,  396, 1096,  601, 1042,  396,  601, 1129,
      842,  612,  443,  444,  841, 1046,  601,  444, 1094,  601,
      612,  365, 1091, 1093,  297,  405, 1093,  601,  396,  601,
      601, 1095,  601,  840,  735,  407,  408, 1112,  444,  612,
      408,  601,  405, 1113,  601, 1149, 1115, 1149, 1149, 1152,
     1149, 1158, 1152,  839, 1158,  296,  297,  612,  296, 1141,
      472,  408,  838,  611,  298,  611,  611,  611,  612,  837,
      612,  834, 1116, 1131,  735,  701,  833,  832,  701,  701,
      829,  725,  612,  725,  725,  725,  612,  611,  828,  611,
      611,  611,  612,  819,  814, 1143, 1094,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  299,  299,  813,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  302,  733,  592,  733,  733,  733,  701,  808,  807,
      701,  701,  802,  801,  302,  800,  302,  302,  302,  799,
      798,  797,  302,  303,  699,  303,  303,  795,  303,  794,
      793,  303,  303,  792,  303,  303,  303,  310,  791,  310,
      310,  310,  310,  790,  310,  789,  788,  310,  310,  310,

      310,  310,  310,  326,  326,  725,  787,  725,  725,  725,
      786,  785,  782,  781,  780,  326,  326,  326,  326,  326,
      326,  326,  778,  326,  326,  337,  777,  337,  337,  776,
      337,  775,  774,  337,  337,  773,  337,  337,  337,  338,
      338,  772,  771,  770,  769,  767,  766,  765,  764,  763,
      472,  338,  338,  338,  338,  338,  338,  338,  761,  338,
      338,  361,  361,  760,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      363,  754,  363,  363,  363,  363,  363,  753,  752,  363,

      363,  363,  363,  363,  751,  746,  745,  363,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  371,  722,  371,
      371,  371,  721,  714,  713,  371,  373,  711,  373,  373,
     1160,  304,  373,  304,  373,  373,  373,  304,  708,  573,
      373,  382,  382,  382,  382,  706,  705,  382,  704,  703,
      702,  700,  697,  694,  382,  693,  550,  382,  692,  691,
      382,  545,  382,  382,  382,  690,  689,  382,  382,  385,
      385,  385,  385,  688,  687,  686,  685,  682,  681,  680,

      679,  678,  385,  675,  385,  385,  519,  674,  385,  673,
      385,  385,  385,  672,  671,  670,  385,  391,  391,  391,
      391,  502,  502,  391,  669,  668,  666,  496,  491,  665,
      664,  663,  662,  478,  661,  472,  391,  659,  391,  391,
      391,  472,  657,  458,  391,  392,  392,  656,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  394,  653,  394,  394,  394,  394,
      394,  441,  648,  394,  394,  394,  394,  394,  436,  647,
      431,  394,  402,  402,  646,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  406,  414,  638,  638,  638,  393,  406,  633,  406,
      406,  406,  406,  406,  406,  379,  406,  406,  406,  406,
      406,  632,  372,  631,  406,  417,  417,  417,  417,  370,
      362,  417,  610,  604,  603,  602,  600,  597,  417,  596,
      584,  417,  304,  304,  417,  573,  417,  417,  417,  300,
      571,  417,  417,  422,  422,  422,  422,  568,  566,  563,
      422,  561,  560,  558,  556,  555,  422,  553,  422,  422,
      548,  519,  422,  507,  422,  422,  422,  506,  505,  503,

      422,  425,  425,  425,  425,  502,  498,  425,  491,  487,
      478,  472,  458,  441,  436,  431,  414,  393,  393,  379,
      425,  370,  425,  425,  425,  362,  304,  301,  425,  426,
      300, 1160,  426,  113,  113, 1160,  426, 1160,  426,  426,
      426, 1160, 1160, 1160,  426,  430,  430, 1160,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  435,  435, 1160,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  440,  440, 1160,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  442, 1160,  442,  442,  442,  442,  442, 1160,
     1160,  442,  442,  442,  442,  442, 1160, 1160, 1160,  442,
      448, 1160,  448,  448,  448, 1160, 1160, 1160,  448,  453,
      453,  453,  453, 1160, 1160,  453, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  453,  453, 1160, 1160,  453, 1160,
      453,  453,  453, 1160, 1160, 1160,  453,  461,  461,  461,
      461, 1160, 1160,  461, 1160, 1160, 1160, 1160, 1160, 1160,

      461, 1160, 1160,  461, 1160, 1160,  461, 1160,  461,  461,
      461, 1160, 1160,  461,  461,  464,  464,  464,  464, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  464, 1160,
      464,  464, 1160, 1160,  464, 1160,  464,  464,  464, 1160,
     1160, 1160,  464,  470,  470,  470,  470, 1160, 1160,  470,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160,  470, 1160,  470,  470,  470, 1160, 1160, 1160,
      470,  471, 1160,  471,  471,  471, 1160, 1160, 1160,  471,
      473, 1160,  473, 1160, 1160, 1160,  473, 1160,  473,  473,
      473, 1160, 1160, 1160,  473,  477,  477, 1160,  477, 1160,

     1160, 1160,  477, 1160,  477,  477,  477, 1160, 1160, 1160,
      477,  482,  482, 1160,  482,  482,  482,  482,  482,  482,
      482, 1160,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482, 1160,  482,  482,  482,  482,  482,  482,  482,
      486, 1160, 1160,  486, 1160, 1160, 1160,  486, 1160,  486,
      486,  486, 1160, 1160, 1160,  486,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488, 1160,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  490,  490, 1160,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490, 1160,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  497, 1160, 1160,  497, 1160, 1160,
     1160,  497, 1160,  497,  497,  497, 1160, 1160, 1160,  497,
      501,  501, 1160,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  504,
      504, 1160,  504, 1160,  504,  504,  504,  504,  504, 1160,
      504,  504,  504,  504, 1160,  504,  504,  504, 1160,  504,
     1160,  504,  504,  504,  504,  504,  504,  504,  512,  512,
     1160,  512, 1160, 1160, 1160,  512, 1160,  512,  512,  512,

      520,  520, 1160,  520, 1160,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520, 1160,
      520, 1160,  520,  520,  520,  520,  520,  520,  520,  524,
      524, 1160,  524, 1160,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524, 1160,  524,
     1160,  524,  524,  524,  524,  524,  524,  524,  533, 1160,
     1160,  533, 1160, 1160, 1160,  533, 1160,  533,  533,  533,
     1160, 1160, 1160,  533,  537,  537, 1160,  537,  537,  537,
      537,  537, 1160, 1160,  537,  537,  537,  537,  537,  537,
      537,  537,  537, 1160,  537, 1160,  537,  537,  537,  537,

      537,  537,  537,  544, 1160,  544,  544,  544, 1160, 1160,
     1160,  544,  546, 1160,  546,  546, 1160, 1160,  546, 1160,
      546,  546,  546, 1160, 1160, 1160,  546,  549, 1160,  549,
      549,  549, 1160, 1160, 1160,  549,  551, 1160,  551,  551,
     1160, 1160,  551, 1160,  551,  551,  551, 1160, 1160, 1160,
      551,  554,  554, 1160,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
     1160,  554, 1160,  554,  554,  554,  554,  554,  554,  554,
      557, 1160, 1160,  557, 1160, 1160, 1160,  557, 1160,  557,
      557,  557, 1160, 1160, 1160,  557,  559,  559, 1160,  559,

      559,  559,  559,  559,  559,  559,  559,  559,  559, 1160,
      559,  559,  559,  559,  559,  559,  559, 1160,  559,  559,
      559,  559,  559,  559,  559,  562,  562, 1160,  562,  562,
      562,  562,  562,  562,  562, 1160,  562,  562,  562,  562,
      562,  562,  562,  562, 1160,  562, 1160,  562,  562,  562,
      562,  562,  562,  562,  565, 1160,  565,  565,  565, 1160,
     1160,  565, 1160,  565,  565,  565, 1160, 1160, 1160,  565,
      567,  567, 1160,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567, 1160,  567,  567,  567,  567,  567,  567,  567,  569,

      569,  569,  569,  569,  569,  569,  569, 1160, 1160,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  326,  326,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
      326,  326,  326,  326,  326,  326,  326, 1160,  326,  326,
      299,  299, 1160,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  302,
     1160,  302,  302,  302, 1160, 1160, 1160,  302,  572,  572,
     1160, 1160,  572, 1160,  572,  572,  572, 1160, 1160, 1160,

      572,  303, 1160,  303,  303, 1160,  303, 1160, 1160,  303,
      303, 1160,  303,  303,  303,  574, 1160, 1160,  574, 1160,
     1160, 1160,  574, 1160,  574,  574,  574,  581, 1160, 1160,
      581, 1160,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  598, 1160,  598,  598,
      598, 1160, 1160,  598,  337, 1160,  337,  337, 1160,  337,
     1160, 1160,  337,  337, 1160,  337,  337,  337,  338, 1160,
     1160,  338, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160,  338,  338,  338,

      338,  338,  361,  361, 1160,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  363, 1160,  363,  363,  363,  363,  363, 1160, 1160,
      363,  363,  363,  363,  363, 1160, 1160, 1160,  363,  628,
     1160,  628, 1160,  628,  628,  628, 1160, 1160,  628,  628,
      628,  628,  628, 1160, 1160, 1160,  628,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  373, 1160,  373,  373,

     1160, 1160,  373, 1160,  373,  373,  373, 1160, 1160, 1160,
      373,  371, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  371, 1160,  371,  371,  371, 1160,
     1160, 1160,  371,  382,  382,  382,  382, 1160, 1160,  382,
     1160, 1160, 1160, 1160, 1160, 1160,  382, 1160, 1160,  382,
     1160, 1160,  382, 1160,  382,  382,  382, 1160, 1160,  382,
      382,  385,  385,  385,  385, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  385, 1160,  385,  385, 1160, 1160,
      385, 1160,  385,  385,  385, 1160, 1160, 1160,  385,  391,
      391,  391,  391, 1160, 1160,  391, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  391, 1160,
      391,  391,  391, 1160, 1160, 1160,  391,  634, 1160, 1160,
     1160,  634, 1160,  634,  634,  634, 1160, 1160, 1160,  634,
      392,  392, 1160,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  394,
     1160,  394,  394,  394,  394,  394, 1160, 1160,  394,  394,
      394,  394,  394, 1160, 1160, 1160,  394,  635, 1160,  635,
     1160,  635,  635,  635, 1160, 1160,  635,  635,  635,  635,
      635, 1160, 1160, 1160,  635,  400,  400, 1160,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  402,  402, 1160,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  406, 1160, 1160, 1160, 1160, 1160,  406,
     1160,  406,  406,  406,  406,  406,  406, 1160,  406,  406,
      406,  406,  406, 1160, 1160, 1160,  406,  640, 1160,  640,
     1160,  640,  640,  640, 1160, 1160,  640,  640,  640,  640,
      640, 1160, 1160, 1160,  640,  417,  417,  417,  417, 1160,

     1160,  417, 1160, 1160, 1160, 1160, 1160, 1160,  417, 1160,
     1160,  417, 1160, 1160,  417, 1160,  417,  417,  417, 1160,
     1160,  417,  417,  422,  422,  422,  422, 1160, 1160, 1160,
      422, 1160, 1160, 1160, 1160, 1160,  422, 1160,  422,  422,
     1160, 1160,  422, 1160,  422,  422,  422, 1160, 1160, 1160,
      422,  425,  425,  425,  425, 1160, 1160,  425, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
      425, 1160,  425,  425,  425, 1160, 1160, 1160,  425,  643,
      643,  643,  643,  643,  643,  643,  643,  643, 1160,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  645, 1160,
     1160,  645, 1160, 1160, 1160,  645, 1160, 1160, 1160, 1160,
     1160, 1160, 1160,  645, 1160, 1160, 1160,  645, 1160,  645,
      645,  645, 1160, 1160, 1160,  645,  426, 1160, 1160,  426,
     1160, 1160, 1160,  426, 1160,  426,  426,  426, 1160, 1160,
     1160,  426,  430,  430, 1160,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  435,  435, 1160,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      440,  440, 1160,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  442,
     1160,  442,  442,  442,  442,  442, 1160, 1160,  442,  442,
      442,  442,  442, 1160, 1160, 1160,  442,  649, 1160,  649,
     1160,  649,  649,  649, 1160, 1160,  649,  649,  649,  649,
      649, 1160, 1160, 1160,  649,  453,  453,  453,  453, 1160,
     1160,  453, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
      453,  453, 1160, 1160,  453, 1160,  453,  453,  453, 1160,

     1160, 1160,  453,  652, 1160,  652,  652,  652, 1160, 1160,
     1160,  652,  655,  655,  655,  655, 1160, 1160,  655, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160,  655,  655, 1160,
     1160,  655, 1160,  655,  655,  655, 1160, 1160, 1160,  655,
      461,  461,  461,  461, 1160, 1160,  461, 1160, 1160, 1160,
     1160, 1160, 1160,  461, 1160, 1160,  461, 1160, 1160,  461,
     1160,  461,  461,  461, 1160, 1160,  461,  461,  464,  464,
      464,  464, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160,  464, 1160,  464,  464, 1160, 1160,  464, 1160,  464,
      464,  464, 1160, 1160, 1160,  464,  470,  470,  470,  470,

     1160, 1160,  470, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160,  470, 1160,  470,  470,  470,
     1160, 1160, 1160,  470,  658, 1160, 1160, 1160,  658, 1160,
      658,  658,  658, 1160, 1160, 1160,  658,  473, 1160,  473,
     1160, 1160, 1160,  473, 1160,  473,  473,  473, 1160, 1160,
     1160,  473,  660, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160,  660, 1160,  660,  660,  660,
     1160, 1160, 1160,  660,  477,  477, 1160,  477, 1160, 1160,
     1160,  477, 1160,  477,  477,  477, 1160, 1160, 1160,  477,
      482,  482, 1160,  482,  482,  482,  482,  482,  482,  482,

     1160,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482, 1160,  482,  482,  482,  482,  482,  482,  482,  486,
     1160, 1160,  486, 1160, 1160, 1160,  486, 1160,  486,  486,
      486, 1160, 1160, 1160,  486,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488, 1160,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  490,  490, 1160,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490, 1160,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  667, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160,  667, 1160,  667,  667,
      667, 1160, 1160, 1160,  667,  497, 1160, 1160,  497, 1160,
     1160, 1160,  497, 1160,  497,  497,  497, 1160, 1160, 1160,
      497,  501,  501, 1160,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      504,  504, 1160,  504, 1160,  504,  504,  504,  504,  504,
     1160,  504,  504,  504,  504, 1160,  504,  504,  504, 1160,
      504, 1160,  504,  504,  504,  504,  504,  504,  504,  512,
      512, 1160,  512, 1160, 1160, 1160,  512, 1160,  512,  512,

      512,  520,  520, 1160,  520, 1160,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
     1160,  520, 1160,  520,  520,  520,  520,  520,  520,  520,
      524,  524, 1160,  524, 1160,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524, 1160,
      524, 1160,  524,  524,  524,  524,  524,  524,  524,  533,
     1160, 1160,  533, 1160, 1160, 1160,  533, 1160,  533,  533,
      533, 1160, 1160, 1160,  533,  537,  537, 1160,  537,  537,
      537,  537,  537, 1160, 1160,  537,  537,  537,  537,  537,
      537,  537,  537,  537, 1160,  537, 1160,  537,  537,  537,

      537,  537,  537,  537,  546, 1160,  546,  546, 1160, 1160,
      546, 1160,  546,  546,  546, 1160, 1160, 1160,  546,  544,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160,  544, 1160,  544,  544,  544, 1160, 1160, 1160,
      544,  551, 1160,  551,  551, 1160, 1160,  551, 1160,  551,
      551,  551, 1160, 1160, 1160,  551,  549, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  549,
     1160,  549,  549,  549, 1160, 1160, 1160,  549,  554,  554,
     1160,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554, 1160,  554, 1160,

      554,  554,  554,  554,  554,  554,  554,  557, 1160, 1160,
      557, 1160, 1160, 1160,  557, 1160,  557,  557,  557, 1160,
     1160, 1160,  557,  559,  559, 1160,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559, 1160,  559,  559,  559,
      559,  559,  559,  559, 1160,  559,  559,  559,  559,  559,
      559,  559,  562,  562, 1160,  562,  562,  562,  562,  562,
      562,  562, 1160,  562,  562,  562,  562,  562,  562,  562,
      562, 1160,  562, 1160,  562,  562,  562,  562,  562,  562,
      562,  565, 1160,  565,  565,  565, 1160, 1160,  565, 1160,
      565,  565,  565, 1160, 1160, 1160,  565,  567,  567, 1160,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567, 1160,  567,
      567,  567,  567,  567,  567,  567,  569,  569,  569,  569,
      569,  569,  569,  569, 1160, 1160,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  572,  572, 1160, 1160,  572,
     1160,  572,  572,  572, 1160, 1160, 1160,  572,  707,  707,
     1160,  707,  707,  707,  707, 1160,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  574,  574, 1160,

      574, 1160, 1160, 1160,  574, 1160,  574,  574,  574,  303,
     1160,  303,  303, 1160,  303, 1160, 1160,  303,  303, 1160,
      303,  303,  303,  581, 1160, 1160,  581, 1160,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  716,  716, 1160,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  598, 1160, 1160,  598, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

      598, 1160,  598,  598,  598,  326, 1160, 1160,  326, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  326, 1160,  326,  326,  326,  729,
      729, 1160,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729, 1160,  729,  729,  338, 1160,
     1160,  338, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160,  338,  338,  338,
      338,  338,  628, 1160,  628,  628,  628,  628,  628, 1160,
     1160,  628,  628,  628,  628,  628, 1160, 1160, 1160,  628,

      363, 1160,  363,  363,  363,  363,  363, 1160, 1160,  363,
      363,  363,  363,  363, 1160, 1160, 1160,  363,  371, 1160,
      371,  371,  371, 1160, 1160, 1160,  371,  634, 1160, 1160,
     1160,  634, 1160,  634,  634,  634, 1160, 1160, 1160,  634,
      635, 1160,  635,  635,  635,  635,  635, 1160, 1160,  635,
      635,  635,  635,  635, 1160, 1160, 1160,  635,  394, 1160,
      394,  394,  394,  394,  394, 1160, 1160,  394,  394,  394,
      394,  394, 1160, 1160, 1160,  394,  748,  748, 1160,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  640, 1160, 1160, 1160, 1160,
     1160,  640, 1160,  640,  640,  640,  640,  640,  640, 1160,
      640,  640,  640,  640,  640, 1160, 1160, 1160,  640,  406,
     1160, 1160, 1160, 1160, 1160,  406, 1160,  406,  406,  406,
      406,  406,  406, 1160,  406,  406,  406,  406,  406, 1160,
     1160, 1160,  406,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  645, 1160, 1160,  645, 1160, 1160, 1160,  645,
     1160, 1160, 1160, 1160, 1160, 1160, 1160,  645, 1160, 1160,

     1160,  645, 1160,  645,  645,  645, 1160, 1160, 1160,  645,
      649, 1160,  649,  649,  649,  649,  649, 1160, 1160,  649,
      649,  649,  649,  649, 1160, 1160, 1160,  649,  442, 1160,
      442,  442,  442,  442,  442, 1160, 1160,  442,  442,  442,
      442,  442, 1160, 1160, 1160,  442,  758,  758,  758,  758,
     1160, 1160,  758, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160,  758,  758, 1160, 1160,  758, 1160,  758,  758,  758,
     1160, 1160, 1160,  758,  652,  652,  652,  652, 1160, 1160,
      652, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
      652, 1160, 1160,  652, 1160,  652,  652,  652, 1160, 1160,

     1160,  652,  655,  655,  655,  655, 1160, 1160,  655, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160,  655,  655, 1160,
     1160,  655, 1160,  655,  655,  655, 1160, 1160, 1160,  655,
      658, 1160, 1160, 1160,  658, 1160,  658,  658,  658, 1160,
     1160, 1160,  658,  660, 1160,  660,  660,  660, 1160, 1160,
     1160,  660,  762, 1160,  762, 1160, 1160, 1160,  762, 1160,
      762,  762,  762, 1160, 1160, 1160,  762,  667, 1160,  667,
      667,  667, 1160, 1160, 1160,  667,  768, 1160, 1160, 1160,
      768, 1160,  768,  768,  768, 1160, 1160, 1160,  768,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,

      779,  779,  779,  779,  779, 1160,  779,  779,  779, 1160,
      779, 1160, 1160,  779,  779,  779,  779,  779,  544, 1160,
      544,  544,  544, 1160, 1160, 1160,  544,  549, 1160,  549,
      549,  549, 1160, 1160, 1160,  549,  707,  707, 1160,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  803, 1160, 1160,  803, 1160,
     1160, 1160,  803, 1160,  803,  803,  803,  310, 1160,  310,
     1160,  310,  310, 1160,  310, 1160, 1160,  310,  310, 1160,
      310,  310,  310,  716,  716, 1160,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  326, 1160, 1160,  326, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160,  326, 1160,  326,  326,  326,  729,  729, 1160,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  733,  733,  733,  733,  733,
      338, 1160, 1160,  338, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  338,

      338,  338,  338,  338,  303,  303, 1160,  303, 1160, 1160,
     1160, 1160, 1160, 1160,  303, 1160,  303,  303, 1160,  303,
      303, 1160,  303,  303, 1160,  303,  303,  303,  303,  363,
     1160,  363,  363,  363,  363,  363, 1160, 1160,  363,  363,
      363,  363,  363, 1160, 1160, 1160,  363,  394, 1160,  394,
      394,  394,  394,  394, 1160, 1160,  394,  394,  394,  394,
      394, 1160, 1160, 1160,  394,  748,  748, 1160,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  406, 1160, 1160, 1160, 1160, 1160,

      406, 1160,  406,  406,  406,  406,  406,  406, 1160,  406,
      406,  406,  406,  406, 1160, 1160, 1160,  406,  442, 1160,
      442,  442,  442,  442,  442, 1160, 1160,  442,  442,  442,
      442,  442, 1160, 1160, 1160,  442,  836, 1160,  836,  836,
      836, 1160, 1160, 1160,  836,  758,  758,  758,  758, 1160,
     1160,  758, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
      758,  758, 1160, 1160,  758, 1160,  758,  758,  758, 1160,
     1160, 1160,  758,  652,  652,  652,  652, 1160, 1160,  652,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  652,
     1160, 1160,  652, 1160,  652,  652,  652, 1160, 1160, 1160,

      652,  762, 1160,  762, 1160, 1160, 1160,  762, 1160,  762,
      762,  762, 1160, 1160, 1160,  762,  881,  881, 1160,  881,
     1160, 1160, 1160,  881, 1160,  881,  881,  881,  887,  887,
     1160,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815, 1160,  815, 1160,
     1160, 1160,  815,  815,  815,  815,  909,  909,  909,  909,
     1160, 1160,  909, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160,  909,  909, 1160, 1160,  909, 1160,  909,  909,  909,
     1160, 1160, 1160,  909,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
     1160,  934,  934,  934, 1160,  934, 1160,  934, 1160,  934,
      934,  934,  934,  961,  961, 1160,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1160, 1005,
     1005, 1005, 1160, 1005, 1160, 1160, 1160, 1005, 1005, 1005,

     1005, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1160, 1006, 1006,
     1006, 1160, 1006, 1160, 1160, 1160, 1006, 1006, 1006, 1006,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1160, 1057, 1057, 1057,
     1160, 1057, 1160, 1160, 1160, 1057, 1057, 1057, 1057, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1160, 1068, 1068, 1068, 1160,
     1068, 1160, 1160, 1160, 1068, 1068, 1068, 1068,   85, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160
    } ;

static yyconst flex_int16_t yy_chk[8963] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,   21,   22,    4,   23,   21,   22,
       35,   23,   24,   47,    4,    4,   24,    4,    4,   36,
       35,    4,    4,    4,   39,   48,   40,   43,   43,   36,

       43,   83,   43,   84,   39,  100,   40,  560,  100,   83,
       83,   84,   84, 1114,   21,   22,   39,   23,   40,  117,
       35,   57,   24,   47,  117,  560, 1114,   44,   44,   36,
       44,   58,   44,   63,   39,   48,   40, 1155,   43,   64,
       81,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   53,    5,   53,    5,    5,
       45,   57,   45,    5,    5,    5,    5, 1130,   44,  206,
       45,   58,  206,   63,  206,   45,  216,   53, 1130,   64,
       81,  216,   45,    5,    5,    5,  232,   46,   93,   46,
      232,   51,   51,   75,   51,   53,   93,   46,   52,   52,

       45,   52,   46,  258,   82,   93,   75,   69,  258,   46,
        5,    5,    5,    5,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,   46,    6,   69,
        6,    6,   51,   75,  281,    6,    6,    6,    6,   52,
       54,   55,   54,   55,   82,  556,   94,   69,   94,   94,
       94,   94,  314,  109,  109,    6,    6,    6,  109,   94,
      263,  281,   54,   55,   97,  263,   97,   97, 1153,   97,
       97,   97,  556,  305,  314,   97,  305,   94, 1151,  109,
       54,   55,    6,    6,    6,    6,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   56,   13,   56,   13,   13,
       61,   76,  306,   13,   13,   13,   13,   62,   61,   61,
      311,  306, 1157,  311,   76,   62,   62,   56,  105,  332,
      401,  105,   61,   13,   13,   13,  320,   70,  332,   62,
     1157, 1148,  105,   89,   89,   56,   89,  401,  105,  233,
       61,   76,  118,  118,  233,  118,  320,   62,  233,   70,

       13,   13,   13,   13,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   70,   14,   71,
       14,   14,   72,  588,   89,   14,   14,   14,   14,   77,
       78,  101,  110,  110,  101,  118,  105,  110,  237,   77,
       78,   71,  237,  588,   72,   14,   14,   14,  237, 1145,
      237,   77,   78,  104,  101,  104,  104,  104,  110,   71,
      371,  104,   72,  126,  126,  371,  126, 1144,   88,   77,
       78,   88,   14,   14,   14,   14,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,  373,
       15,   88,   15,   15,  373,  638, 1140,   15,   15,   15,

       15,  127,  127,  127,  127,  315,  126,  102,  127,   88,
      102,  347,  638,  102,  347,  131,  131,   15,   15,   15,
      131,  102,  120,  120,  120,  120,  315,  102, 1137,  528,
      102,  149,  149,  149,  149,  132,  132,  120,  149, 1136,
      132,  131,  120,  528,   15,   15,   15,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,  132,   16,  316,   16,   16,  521, 1135,  521,   16,
       16,   16,   16,  103,  103,  102,  103,  121,  121,  121,
      121,  317,  316,  103,  313,  103,  103,  103,  103,   16,
       16,   16,  121,  590,  318,  851,  103,  121,  181,  181,

      181,  181,  317, 1134,  316,  181,  313,  313,  313,  349,
      349,  851,  349,  590,  103,  318,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  863,
       25,  197,   25,   25,  321, 1133,  863,   25,   25,   25,
       25,  197,  226,  226,  594,  226, 1132,  122,  122,  122,

      122,  165,  165,  325,  122,  321,  165,   25,   25,   25,
      111,  111,  122,  111,  594,  296,  296,  122,  296,  352,
      575,  197,  352,  575,  325,  111,  111,  165,  153,  153,
      111,  153, 1128,  226,   25,   25,   25,   25,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  111,   26,  111,   26,   26,  296, 1127,  138,   26,
       26,   26,   26,  125,  125,  125,  125,  122,  138,  138,
      364,  153,  544,  138,  364,  138, 1125,  544,  125,   26,
       26,   26, 1124,  125,  143,  143,  143,  143,  238,  355,
      355,  546,  355,  238,  138,  364,  546,  238,  350,  143,

      350,  350,  350,  238,  143,  238,   26,   26,   26,   26,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,  157,  157,   49,  157,  595, 1123,   49,
       49,   49,   49,  144,  144,  144,  144,  123,  123,  123,
      123,  166,  166,  720,  123, 1122,  166,  595,  144,   49,
       49,   49,  123,  144,  712, 1150, 1121,  123,  161,  161,

      425,  161, 1150,  425,  720,  338,  157,  166,  338,  425,
      172,  172, 1120,  172,  712,  331,   49,   49,   49,   49,
       49,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,  134,  134,   50,  134,
     1119,  161,   50,   50,   50,   50,  338,  123,  331, 1118,
      139,  134,  134,  172,  499,  357,  134,  499,  357,  499,
      139,  139,   50,   50,   50,  139, 1117,  139,  174,  174,
      174,  174,  921,  366,  366,  331,  366,  134,  357,  134,
      549,  375,  375,  174,  375,  549,  139,  921,  174,   50,
       50,   50,   50,   50,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   95,
      180,  180,  140,  180,  551,  148,  148,  148,  148,  551,
      585,   95,  140,  140,  148,  386,  386,  140,  386,  140,
      148,   95,   95,  593, 1154,  148,   95,   95, 1154, 1109,
       95,   95,  585,   95,   95, 1108,  186,  186,  140,  186,

      395,   95,   95,  180,  395,  593,   95,   95,  175,  175,
      175,  175,   95,   95,   95,   95,   95,   95,   96,   96,
       96,  142,  142,  175,  142,  395,  142, 1106,  175,  167,
      167, 1142,  167,   96,   96,   96,  142,  142,  407,  186,
     1105,  142,  407,  142,  167,  167, 1142,  189,  189,  167,
      189,  192,  192,   96,  192,  293,  715,   96,  293,   96,
       96,   96,  142,  407,  142,  598,  297,  297,  598,  297,
      167,  342,  167,   96,  342, 1104,  715,   96,  293,   96,
     1103,   96,   96,   98,   98,   98,  145,  145,  145,  145,
      189, 1102,  589,  145,  192,  589,  293,  718,   98,   98,

       98,  145,  340, 1101, 1100,  340,  145,  297,  146,  146,
      146,  146,  342, 1099,  589,  146,  339,  718,   98,  339,
       98,  812,   98,  146,   98,   98,   98,  342,  146,  488,
      176,  176,  176,  176, 1098,  363,  363,  176,   98,  488,
      363,  812,   98,  340,   98,  176,   98,   98,   99, 1097,
      176,   99,  219,  219,  443,  219,  145,  339,  443,   99,
       99,  363,   99,   99,  340, 1088,   99,   99,   99,  488,
      339,   99,  867,  171,  171,  171,  171, 1087,  146,  443,
      171,  177,  177,  177,  177, 1094,  867, 1094,  177,   99,
      171,  171,  171,  171, 1074,  219,  177,  200,  200,  200,

      176,  177,  601,  224,  224,  601,  224,  241,  241, 1073,
      241, 1071,  200,  200,  200, 1070,   99,  137,  137, 1064,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
     1063,  137,  200,  137,  137, 1062, 1061, 1060,  137,  137,
      137,  137,  179,  179,  179,  179,  224, 1059, 1058,  608,
      241,  177,  608,  341, 1056, 1030,  341,  179,  137,  137,
      137,  200,  179,  245,  245,  621,  245, 1029,  621,  591,
      251,  251,  591,  251,  254,  254, 1028,  254,  319,  348,
      604,  319,  348,  604, 1027,  137,  137,  137,  137,  201,
      201,  591,  201,  348,  341,  201,  201,  201, 1026,  348,

      319,  341,  319, 1025,  345,  602,  245,  345,  602,  608,
      201,  201,  201,  251, 1024,  319,  344,  254,  337,  344,
      337,  337,  319,  337,  337,  337, 1023,  604, 1022,  337,
      201,  343,  201, 1021,  343, 1020,  351,  319,  343,  351,
      358, 1019,  358,  358,  358,  345,  627,  348,  358,  627,
      351,  383,  383,  383,  383,  602,  351,  344,  383,  201,
      294,  294,  294,  345,  344,  353,  354,  354,  353,  354,
     1018,  343,  343,  344, 1017,  294,  294,  294,  699,  353,
      354,  699, 1016,  365,  365,  353,  354,  359,  365,  354,
      359,  360,  368,  368,  360,  294,  603,  368,  343,  603,

     1015,  359,  294,  294,  351,  360, 1014,  359, 1013,  365,
      705,  360,  389,  389,  389,  389, 1012,  613,  368,  389,
      613,  294, 1011,  294,  294,  295,  295,  295, 1010,  397,
      397,  368,  397,  353,  354, 1008,  378,  378,  378,  378,
      295,  295,  295,  705, 1007, 1003,  379,  379,  379,  379,
     1002,  378, 1001,  379,  603,  359,  378, 1000,  613,  360,
      295,  379,  382,  382,  382,  382,  379,  295,  295,  613,
      705,  999,  381,  381,  381,  381,  998,  382,  997,  381,
      410,  410,  382,  410,  996,  995,  295,  381,  295,  295,
      309,  710,  381,  309,  710,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  994,  993,
      991,  309,  309,  309,  309,  614,  379,  990,  614,  384,
      384,  384,  384,  394,  394,  989,  384,  681,  394,  988,
      681,  309,  309,  309,  384,  385,  385,  385,  385,  384,
      427,  427,  381,  427,  390,  390,  390,  390,  987,  394,
      385,  390,  396,  396,  986,  385,  614,  396,  309,  309,
      309,  309,  309,  326,  406,  614,  326,  399,  399,  326,
      326,  326,  399,  610,  406,  406,  610,  408,  396,  406,
      412,  406,  985,  681,  326,  326,  326,  408,  408,  384,
      412,  412,  408,  399,  408,  412,  984,  412,  432,  432,

      406,  432,  437,  437,  326,  437,  399,  413,  413,  413,
      413,  445,  445,  408,  445,  983,  412,  418,  418,  418,
      418,  610,  413,  982,  418,  454,  454,  413,  454,  412,
      326,  981,  326,  326,  346,  465,  465,  346,  465,  979,
      423,  423,  423,  423,  978,  346,  346,  423,  346,  346,
      442,  442,  346,  346,  346,  442,  977,  346,  414,  414,
      414,  414,  974,  474,  474,  414,  474,  416,  416,  416,
      416,  973,  964,  414,  416,  346,  442,  622,  414,  622,
      622,  622,  416,  424,  424,  424,  424,  416,  479,  479,
      424,  479,  444,  444,  963,  961,  960,  444,  462,  462,

      462,  462,  346,  402,  402,  462,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  959,  402,  444,  402,
      402,  958,  957,  956,  402,  402,  402,  402,  414,  955,
      954,  953,  417,  417,  417,  417,  952,  416,  447,  447,
      951,  417,  950,  447,  402,  402,  402,  417,  420,  420,
      420,  420,  417,  468,  468,  468,  468,  420,  483,  483,
      468,  483,  609,  420,  447,  609,  494,  494,  420,  494,
      949,  402,  402,  402,  402,  403,  403,  447,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  948,  403,
      723,  403,  403,  723,  947,  946,  403,  403,  403,  403,

      419,  419,  419,  419,  945,  509,  509,  419,  509,  609,
      422,  422,  422,  422,  944,  419,  403,  403,  403,  422,
      419,  448,  448,  448,  448,  422,  513,  513,  448,  513,
      422,  449,  449,  449,  449,  943,  942,  940,  448,  448,
      448,  448,  938,  403,  403,  403,  403,  451,  451,  451,
      451,  449,  935,  933,  451,  453,  453,  453,  453,  932,
      530,  530,  453,  530,  451,  451,  451,  451,  534,  534,
      419,  534,  453,  453,  453,  453,  457,  457,  457,  457,
      458,  458,  458,  458,  931,  538,  538,  458,  538,  516,
      516,  457,  516,  628,  628,  458,  457,  930,  628,  929,

      458,  460,  460,  460,  460,  928,  927,  926,  460,  461,
      461,  461,  461,  925,  541,  541,  460,  541,  709,  628,
      709,  460,  709,  709,  461,  463,  463,  463,  463,  461,
      516,  709,  463,  464,  464,  464,  464,  924,  616,  615,
      463,  616,  615,  618,  732,  463,  618,  732,  464,  644,
      458,  923,  644,  464,  469,  469,  469,  469,  644,  645,
      599,  469,  645,  599,  922,  629,  629,  599,  645,  920,
      629,  460,  717,  617,  619,  717,  617,  619,  796,  616,
      615,  796,  919,  918,  618,  616,  727,  917,  916,  727,
      618,  629,  915,  732,  717,  463,  580,  615,  914,  580,

      599,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  617,  619,  912,  580,  580,  580,
      580,  816,  619,  911,  816,  630,  630,  599,  620,  620,
      630,  620,  730,  617,  910,  730,  906,  580,  580,  580,
      623,  623,  620,  623,  731,  727,  905,  731,  620,  625,
      625,  630,  625,  904,  623,  901,  626,  626,  728,  626,
      623,  728,  630,  625,  580,  580,  580,  580,  580,  625,
      626,  900,  625,  635,  635,  890,  626,  640,  635,  636,
      636,  637,  637,  889,  636,  887,  637,  640,  640,  884,
      649,  649,  640,  730,  640,  649,  620,  650,  650,  635,

      719,  731,  650,  719,  641,  636,  883,  637,  623,  817,
      728,  881,  817,  640,  641,  641,  649,  625,  637,  641,
      880,  641,  719,  650,  626,  639,  639,  879,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  878,  639,
      641,  639,  639,  642,  877,  876,  639,  639,  639,  639,
      651,  651,  875,  642,  642,  651,  736,  817,  642,  736,
      642,  853,  820,  874,  853,  820,  639,  639,  639,  873,
      872,  653,  653,  653,  653,  871,  651,  740,  653,  642,
      740,  652,  652,  652,  652,  870,  809,  651,  652,  809,
      642,  653,  869,  639,  639,  639,  639,  736,  652,  652,

      652,  652,  654,  654,  654,  654,  868,  866,  809,  654,
      655,  655,  655,  655,  820,  736,  865,  655,  740,  654,
      654,  654,  654,  864,  862,  861,  740,  655,  655,  655,
      655,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  734,  737,  941,  734,  737,  941,
      891,  744,  744,  891, 1072,  860,  744, 1072,  741,  741,
      859,  741,  742,  742, 1126,  742,  804, 1126,  804,  858,
      804,  804,  741,  857,  856,  855,  742,  744,  741,  804,
     1112, 1032,  742, 1112, 1032,  734,  737,  738,  739,  854,
      738,  739,  744,  852,  850,  818,  891,  737,  818,  849,
      734,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  741, 1112,  738,  739,
      742,  810,  743,  743,  810,  743,  747,  747,  848,  750,

     1032,  747,  735,  735,  735,  739,  743,  847,  738,  750,
      750,  818,  743,  810,  750,  743,  750, 1139,  755,  755,
     1139,  885,  747,  755,  885,  888,  846,  845,  888,  735,
      735,  735,  735,  735,  844,  750,  843,  747,  757,  757,
      757,  757,  842,  885,  755,  757,  821,  888,  841,  821,
      750,  823,  840,  839,  823,  757,  757,  757,  757,  755,
      743,  748,  748,  838,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  837,  748,  966,  748,  748,  966,
      834,  833,  748,  748,  748,  748,  832,  821,  758,  758,
      758,  758,  823, 1033,  821,  758, 1033,  892,  894,  823,

      892,  894,  748,  748,  748,  758,  758,  758,  758, 1141,
      824,  825, 1141,  824,  825,  759,  759,  759,  759,  829,
      827,  827,  759,  897,  966,  827,  897,  828,  819,  748,
      748,  748,  748,  749,  749,  759,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  827,  749, 1033,  749,
      749,  824,  825,  827,  749,  749,  749,  749,  892,  894,
      772,  772,  814,  825,  897,  772,  824,  962,  772,  772,
      962,  813,  808,  772,  749,  749,  749,  772,  807,  772,
      836,  836,  836,  836,  897,  806,  803,  836,  965,  962,
      967,  965, 1146,  967,  801, 1146,  800,  836,  836,  836,

      836,  749,  749,  749,  749,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      826,  826,  965,  826,  830,  830,  835,  835,  967,  830,
      896,  835,  831,  896,  826,  799,  822,  822,  822,  798,
      826,  895,  831,  831,  895,  797,  795,  831,  898,  831,
      830,  898,  835,  899,  899,  902,  902,  830,  899,  835,
      902,  794,  793,  822,  822,  822,  822,  822,  831,  792,
      791,  896,  907,  907,  790,  831,  896,  907,  789,  899,
      903,  902,  895,  899,  968,  902,  895,  968,  826,  898,

      903,  903,  788,  969,  787,  903,  969,  903,  907,  786,
      970,  785,  907,  970,  908,  908,  908,  908,  784,  898,
      782,  908,  909,  909,  909,  909,  903,  781,  780,  909,
      903,  908,  908,  908,  908,  968,  778,  777,  776,  909,
      909,  909,  909,  971,  969, 1036,  971,  969, 1036,  972,
      972,  970,  976,  968,  972,  975,  975,  775,  970,  774,
      975, 1031,  976,  976, 1031, 1113,  773,  976, 1113,  976,
     1035,  980,  980, 1035,  771,  972,  980, 1034, 1034, 1037,
     1034,  975, 1037,  770,  971,  769, 1036, 1092,  976, 1091,
     1092,  971, 1091,  972,  767, 1038, 1038,  980, 1095,  975,

     1038, 1095, 1041, 1041, 1036, 1129,  976, 1041, 1129, 1113,
      766, 1035, 1046, 1046,  765,  980, 1096, 1046, 1034, 1096,
     1037, 1038, 1031, 1093, 1093, 1042, 1093, 1115, 1041, 1116,
     1115, 1035, 1116,  764, 1037, 1042, 1042, 1091, 1046, 1095,
     1042, 1131, 1042, 1092, 1131, 1143, 1095, 1149, 1143, 1152,
     1149, 1156, 1152,  763, 1156, 1159, 1159, 1096, 1159, 1129,
      762, 1042,  761, 1252, 1093, 1252, 1252, 1252, 1115,  760,
     1116,  754, 1096, 1116, 1115, 1314,  753,  752, 1314, 1314,
      746, 1325, 1131, 1325, 1325, 1325, 1143, 1328,  745, 1328,
     1328, 1328,  733,  729,  722, 1131, 1159, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,

     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,

     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185, 1185, 1185,

     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1186, 1186,  721, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1187, 1329,  716, 1329, 1329, 1329, 1355,  714,  713,
     1355, 1355,  707,  706, 1187,  704, 1187, 1187, 1187,  703,
      702,  700, 1187, 1188,  698, 1188, 1188,  697, 1188,  693,
      691, 1188, 1188,  689, 1188, 1188, 1188, 1189,  688, 1189,
     1189, 1189, 1189,  687, 1189,  686,  685, 1189, 1189, 1189,

     1189, 1189, 1189, 1190, 1190, 1360,  684, 1360, 1360, 1360,
      683,  682,  680,  679,  678, 1190, 1190, 1190, 1190, 1190,
     1190, 1190,  677, 1190, 1190, 1191,  676, 1191, 1191,  675,
     1191,  674,  673, 1191, 1191,  672, 1191, 1191, 1191, 1192,
     1192,  671,  670,  669,  668,  665,  664,  663,  662,  661,
      660, 1192, 1192, 1192, 1192, 1192, 1192, 1192,  657, 1192,
     1192, 1193, 1193,  656, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1194,  648, 1194, 1194, 1194, 1194, 1194,  647,  646, 1194,

     1194, 1194, 1194, 1194,  643,  633,  632, 1194, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,  597, 1196,
     1196, 1196,  596,  587,  586, 1196, 1197,  584, 1197, 1197,
      582,  581, 1197,  579, 1197, 1197, 1197,  576,  574,  572,
     1197, 1198, 1198, 1198, 1198,  571,  570, 1198,  568,  566,
      564,  561,  558,  555, 1198,  553,  552, 1198,  550,  548,
     1198,  547, 1198, 1198, 1198,  545,  543, 1198, 1198, 1199,
     1199, 1199, 1199,  540,  536,  532,  529,  527,  526,  525,

      523,  522, 1199,  519, 1199, 1199,  518,  515, 1199,  511,
     1199, 1199, 1199,  508,  507,  503, 1199, 1200, 1200, 1200,
     1200,  501,  500, 1200,  498,  496,  493,  491,  490,  487,
      485,  481,  478,  477,  476,  473, 1200,  472, 1200, 1200,
     1200,  471,  467,  459, 1200, 1201, 1201,  456, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1202,  452, 1202, 1202, 1202, 1202,
     1202,  440,  439, 1202, 1202, 1202, 1202, 1202,  435,  434,
      430, 1202, 1203, 1203,  429, 1203, 1203, 1203, 1203, 1203,

     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1204,  415,  409,  404,  400,  392, 1204,  388, 1204,
     1204, 1204, 1204, 1204, 1204,  380, 1204, 1204, 1204, 1204,
     1204,  377,  374,  372, 1204, 1205, 1205, 1205, 1205,  369,
      361, 1205,  333,  330,  329,  328,  327,  323, 1205,  322,
      312, 1205,  310,  303, 1205,  302, 1205, 1205, 1205,  299,
      298, 1205, 1205, 1206, 1206, 1206, 1206,  288,  285,  280,
     1206,  276,  275,  272,  268,  267, 1206,  264, 1206, 1206,
      259,  228, 1206,  215, 1206, 1206, 1206,  214,  213,  209,

     1206, 1207, 1207, 1207, 1207,  208,  204, 1207,  199,  196,
      188,  185,  178,  164,  160,  156,  147,  133,  130,  124,
     1207,  112, 1207, 1207, 1207,  108,   92,   91, 1207, 1208,
       90,   85, 1208,    8,    7,    0, 1208,    0, 1208, 1208,
     1208,    0,    0,    0, 1208, 1209, 1209,    0, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1210, 1210,    0, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1211, 1211,    0, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1212,    0, 1212, 1212, 1212, 1212, 1212,    0,
        0, 1212, 1212, 1212, 1212, 1212,    0,    0,    0, 1212,
     1213,    0, 1213, 1213, 1213,    0,    0,    0, 1213, 1214,
     1214, 1214, 1214,    0,    0, 1214,    0,    0,    0,    0,
        0,    0,    0,    0, 1214, 1214,    0,    0, 1214,    0,
     1214, 1214, 1214,    0,    0,    0, 1214, 1215, 1215, 1215,
     1215,    0,    0, 1215,    0,    0,    0,    0,    0,    0,

     1215,    0,    0, 1215,    0,    0, 1215,    0, 1215, 1215,
     1215,    0,    0, 1215, 1215, 1216, 1216, 1216, 1216,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1216,    0,
     1216, 1216,    0,    0, 1216,    0, 1216, 1216, 1216,    0,
        0,    0, 1216, 1217, 1217, 1217, 1217,    0,    0, 1217,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1217,    0, 1217, 1217, 1217,    0,    0,    0,
     1217, 1218,    0, 1218, 1218, 1218,    0,    0,    0, 1218,
     1219,    0, 1219,    0,    0,    0, 1219,    0, 1219, 1219,
     1219,    0,    0,    0, 1219, 1220, 1220,    0, 1220,    0,

        0,    0, 1220,    0, 1220, 1220, 1220,    0,    0,    0,
     1220, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1221, 1221,
     1221,    0, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221,    0, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1222,    0,    0, 1222,    0,    0,    0, 1222,    0, 1222,
     1222, 1222,    0,    0,    0, 1222, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223,    0, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1224, 1224,    0, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224,    0, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1225,    0,    0, 1225,    0,    0,
        0, 1225,    0, 1225, 1225, 1225,    0,    0,    0, 1225,
     1226, 1226,    0, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227,
     1227,    0, 1227,    0, 1227, 1227, 1227, 1227, 1227,    0,
     1227, 1227, 1227, 1227,    0, 1227, 1227, 1227,    0, 1227,
        0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228,
        0, 1228,    0,    0,    0, 1228,    0, 1228, 1228, 1228,

     1229, 1229,    0, 1229,    0, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,    0,
     1229,    0, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230,
     1230,    0, 1230,    0, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,    0, 1230,
        0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,    0,
        0, 1231,    0,    0,    0, 1231,    0, 1231, 1231, 1231,
        0,    0,    0, 1231, 1232, 1232,    0, 1232, 1232, 1232,
     1232, 1232,    0,    0, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232,    0, 1232,    0, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1233,    0, 1233, 1233, 1233,    0,    0,
        0, 1233, 1234,    0, 1234, 1234,    0,    0, 1234,    0,
     1234, 1234, 1234,    0,    0,    0, 1234, 1235,    0, 1235,
     1235, 1235,    0,    0,    0, 1235, 1236,    0, 1236, 1236,
        0,    0, 1236,    0, 1236, 1236, 1236,    0,    0,    0,
     1236, 1237, 1237,    0, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
        0, 1237,    0, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1238,    0,    0, 1238,    0,    0,    0, 1238,    0, 1238,
     1238, 1238,    0,    0,    0, 1238, 1239, 1239,    0, 1239,

     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,    0,
     1239, 1239, 1239, 1239, 1239, 1239, 1239,    0, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1240, 1240,    0, 1240, 1240,
     1240, 1240, 1240, 1240, 1240,    0, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240,    0, 1240,    0, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1241,    0, 1241, 1241, 1241,    0,
        0, 1241,    0, 1241, 1241, 1241,    0,    0,    0, 1241,
     1242, 1242,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1243,    0,    0, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1244, 1244, 1244, 1244, 1244, 1244, 1244,    0, 1244, 1244,
     1245, 1245,    0, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1246,
        0, 1246, 1246, 1246,    0,    0,    0, 1246, 1247, 1247,
        0,    0, 1247,    0, 1247, 1247, 1247,    0,    0,    0,

     1247, 1248,    0, 1248, 1248,    0, 1248,    0,    0, 1248,
     1248,    0, 1248, 1248, 1248, 1249,    0,    0, 1249,    0,
        0,    0, 1249,    0, 1249, 1249, 1249, 1250,    0,    0,
     1250,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1251,    0, 1251, 1251,
     1251,    0,    0, 1251, 1253,    0, 1253, 1253,    0, 1253,
        0,    0, 1253, 1253,    0, 1253, 1253, 1253, 1254,    0,
        0, 1254,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1254, 1254, 1254,

     1254, 1254, 1255, 1255,    0, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1256,    0, 1256, 1256, 1256, 1256, 1256,    0,    0,
     1256, 1256, 1256, 1256, 1256,    0,    0,    0, 1256, 1257,
        0, 1257,    0, 1257, 1257, 1257,    0,    0, 1257, 1257,
     1257, 1257, 1257,    0,    0,    0, 1257, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1259,    0, 1259, 1259,

        0,    0, 1259,    0, 1259, 1259, 1259,    0,    0,    0,
     1259, 1260,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1260,    0, 1260, 1260, 1260,    0,
        0,    0, 1260, 1261, 1261, 1261, 1261,    0,    0, 1261,
        0,    0,    0,    0,    0,    0, 1261,    0,    0, 1261,
        0,    0, 1261,    0, 1261, 1261, 1261,    0,    0, 1261,
     1261, 1262, 1262, 1262, 1262,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1262,    0, 1262, 1262,    0,    0,
     1262,    0, 1262, 1262, 1262,    0,    0,    0, 1262, 1263,
     1263, 1263, 1263,    0,    0, 1263,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1263,    0,
     1263, 1263, 1263,    0,    0,    0, 1263, 1264,    0,    0,
        0, 1264,    0, 1264, 1264, 1264,    0,    0,    0, 1264,
     1265, 1265,    0, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1266,
        0, 1266, 1266, 1266, 1266, 1266,    0,    0, 1266, 1266,
     1266, 1266, 1266,    0,    0,    0, 1266, 1267,    0, 1267,
        0, 1267, 1267, 1267,    0,    0, 1267, 1267, 1267, 1267,
     1267,    0,    0,    0, 1267, 1268, 1268,    0, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1269, 1269,    0, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1270,    0,    0,    0,    0,    0, 1270,
        0, 1270, 1270, 1270, 1270, 1270, 1270,    0, 1270, 1270,
     1270, 1270, 1270,    0,    0,    0, 1270, 1271,    0, 1271,
        0, 1271, 1271, 1271,    0,    0, 1271, 1271, 1271, 1271,
     1271,    0,    0,    0, 1271, 1272, 1272, 1272, 1272,    0,

        0, 1272,    0,    0,    0,    0,    0,    0, 1272,    0,
        0, 1272,    0,    0, 1272,    0, 1272, 1272, 1272,    0,
        0, 1272, 1272, 1273, 1273, 1273, 1273,    0,    0,    0,
     1273,    0,    0,    0,    0,    0, 1273,    0, 1273, 1273,
        0,    0, 1273,    0, 1273, 1273, 1273,    0,    0,    0,
     1273, 1274, 1274, 1274, 1274,    0,    0, 1274,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1274,    0, 1274, 1274, 1274,    0,    0,    0, 1274, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,    0, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,

     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1276,    0,
        0, 1276,    0,    0,    0, 1276,    0,    0,    0,    0,
        0,    0,    0, 1276,    0,    0,    0, 1276,    0, 1276,
     1276, 1276,    0,    0,    0, 1276, 1277,    0,    0, 1277,
        0,    0,    0, 1277,    0, 1277, 1277, 1277,    0,    0,
        0, 1277, 1278, 1278,    0, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1279, 1279,    0, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,

     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1280, 1280,    0, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1281,
        0, 1281, 1281, 1281, 1281, 1281,    0,    0, 1281, 1281,
     1281, 1281, 1281,    0,    0,    0, 1281, 1282,    0, 1282,
        0, 1282, 1282, 1282,    0,    0, 1282, 1282, 1282, 1282,
     1282,    0,    0,    0, 1282, 1283, 1283, 1283, 1283,    0,
        0, 1283,    0,    0,    0,    0,    0,    0,    0,    0,
     1283, 1283,    0,    0, 1283,    0, 1283, 1283, 1283,    0,

        0,    0, 1283, 1284,    0, 1284, 1284, 1284,    0,    0,
        0, 1284, 1285, 1285, 1285, 1285,    0,    0, 1285,    0,
        0,    0,    0,    0,    0,    0,    0, 1285, 1285,    0,
        0, 1285,    0, 1285, 1285, 1285,    0,    0,    0, 1285,
     1286, 1286, 1286, 1286,    0,    0, 1286,    0,    0,    0,
        0,    0,    0, 1286,    0,    0, 1286,    0,    0, 1286,
        0, 1286, 1286, 1286,    0,    0, 1286, 1286, 1287, 1287,
     1287, 1287,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1287,    0, 1287, 1287,    0,    0, 1287,    0, 1287,
     1287, 1287,    0,    0,    0, 1287, 1288, 1288, 1288, 1288,

        0,    0, 1288,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1288,    0, 1288, 1288, 1288,
        0,    0,    0, 1288, 1289,    0,    0,    0, 1289,    0,
     1289, 1289, 1289,    0,    0,    0, 1289, 1290,    0, 1290,
        0,    0,    0, 1290,    0, 1290, 1290, 1290,    0,    0,
        0, 1290, 1291,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1291,    0, 1291, 1291, 1291,
        0,    0,    0, 1291, 1292, 1292,    0, 1292,    0,    0,
        0, 1292,    0, 1292, 1292, 1292,    0,    0,    0, 1292,
     1293, 1293,    0, 1293, 1293, 1293, 1293, 1293, 1293, 1293,

        0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293,    0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,
        0,    0, 1294,    0,    0,    0, 1294,    0, 1294, 1294,
     1294,    0,    0,    0, 1294, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295,    0, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1296, 1296,    0, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296,    0, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1297,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1297,    0, 1297, 1297,
     1297,    0,    0,    0, 1297, 1298,    0,    0, 1298,    0,
        0,    0, 1298,    0, 1298, 1298, 1298,    0,    0,    0,
     1298, 1299, 1299,    0, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1300, 1300,    0, 1300,    0, 1300, 1300, 1300, 1300, 1300,
        0, 1300, 1300, 1300, 1300,    0, 1300, 1300, 1300,    0,
     1300,    0, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301,
     1301,    0, 1301,    0,    0,    0, 1301,    0, 1301, 1301,

     1301, 1302, 1302,    0, 1302,    0, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
        0, 1302,    0, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1303, 1303,    0, 1303,    0, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,    0,
     1303,    0, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1304,
        0,    0, 1304,    0,    0,    0, 1304,    0, 1304, 1304,
     1304,    0,    0,    0, 1304, 1305, 1305,    0, 1305, 1305,
     1305, 1305, 1305,    0,    0, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305,    0, 1305,    0, 1305, 1305, 1305,

     1305, 1305, 1305, 1305, 1306,    0, 1306, 1306,    0,    0,
     1306,    0, 1306, 1306, 1306,    0,    0,    0, 1306, 1307,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1307,    0, 1307, 1307, 1307,    0,    0,    0,
     1307, 1308,    0, 1308, 1308,    0,    0, 1308,    0, 1308,
     1308, 1308,    0,    0,    0, 1308, 1309,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1309,
        0, 1309, 1309, 1309,    0,    0,    0, 1309, 1310, 1310,
        0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310,    0, 1310,    0,

     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,    0,    0,
     1311,    0,    0,    0, 1311,    0, 1311, 1311, 1311,    0,
        0,    0, 1311, 1312, 1312,    0, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312,    0, 1312, 1312, 1312,
     1312, 1312, 1312, 1312,    0, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1313, 1313,    0, 1313, 1313, 1313, 1313, 1313,
     1313, 1313,    0, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313,    0, 1313,    0, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1315,    0, 1315, 1315, 1315,    0,    0, 1315,    0,
     1315, 1315, 1315,    0,    0,    0, 1315, 1316, 1316,    0,

     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,    0, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317,    0,    0, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1318, 1318,    0,    0, 1318,
        0, 1318, 1318, 1318,    0,    0,    0, 1318, 1319, 1319,
        0, 1319, 1319, 1319, 1319,    0, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320,    0,

     1320,    0,    0,    0, 1320,    0, 1320, 1320, 1320, 1321,
        0, 1321, 1321,    0, 1321,    0,    0, 1321, 1321,    0,
     1321, 1321, 1321, 1322,    0,    0, 1322,    0, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1323, 1323,    0, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1324,    0,    0, 1324,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1324,    0, 1324, 1324, 1324, 1326,    0,    0, 1326,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1326,    0, 1326, 1326, 1326, 1327,
     1327,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327,    0, 1327, 1327, 1330,    0,
        0, 1330,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1330, 1330, 1330,
     1330, 1330, 1331,    0, 1331, 1331, 1331, 1331, 1331,    0,
        0, 1331, 1331, 1331, 1331, 1331,    0,    0,    0, 1331,

     1332,    0, 1332, 1332, 1332, 1332, 1332,    0,    0, 1332,
     1332, 1332, 1332, 1332,    0,    0,    0, 1332, 1333,    0,
     1333, 1333, 1333,    0,    0,    0, 1333, 1334,    0,    0,
        0, 1334,    0, 1334, 1334, 1334,    0,    0,    0, 1334,
     1335,    0, 1335, 1335, 1335, 1335, 1335,    0,    0, 1335,
     1335, 1335, 1335, 1335,    0,    0,    0, 1335, 1336,    0,
     1336, 1336, 1336, 1336, 1336,    0,    0, 1336, 1336, 1336,
     1336, 1336,    0,    0,    0, 1336, 1337, 1337,    0, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,

     1337, 1337, 1337, 1337, 1337, 1338,    0,    0,    0,    0,
        0, 1338,    0, 1338, 1338, 1338, 1338, 1338, 1338,    0,
     1338, 1338, 1338, 1338, 1338,    0,    0,    0, 1338, 1339,
        0,    0,    0,    0,    0, 1339,    0, 1339, 1339, 1339,
     1339, 1339, 1339,    0, 1339, 1339, 1339, 1339, 1339,    0,
        0,    0, 1339, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1341,    0,    0, 1341,    0,    0,    0, 1341,
        0,    0,    0,    0,    0,    0,    0, 1341,    0,    0,

        0, 1341,    0, 1341, 1341, 1341,    0,    0,    0, 1341,
     1342,    0, 1342, 1342, 1342, 1342, 1342,    0,    0, 1342,
     1342, 1342, 1342, 1342,    0,    0,    0, 1342, 1343,    0,
     1343, 1343, 1343, 1343, 1343,    0,    0, 1343, 1343, 1343,
     1343, 1343,    0,    0,    0, 1343, 1344, 1344, 1344, 1344,
        0,    0, 1344,    0,    0,    0,    0,    0,    0,    0,
        0, 1344, 1344,    0,    0, 1344,    0, 1344, 1344, 1344,
        0,    0,    0, 1344, 1345, 1345, 1345, 1345,    0,    0,
     1345,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1345,    0,    0, 1345,    0, 1345, 1345, 1345,    0,    0,

        0, 1345, 1346, 1346, 1346, 1346,    0,    0, 1346,    0,
        0,    0,    0,    0,    0,    0,    0, 1346, 1346,    0,
        0, 1346,    0, 1346, 1346, 1346,    0,    0,    0, 1346,
     1347,    0,    0,    0, 1347,    0, 1347, 1347, 1347,    0,
        0,    0, 1347, 1348,    0, 1348, 1348, 1348,    0,    0,
        0, 1348, 1349,    0, 1349,    0,    0,    0, 1349,    0,
     1349, 1349, 1349,    0,    0,    0, 1349, 1350,    0, 1350,
     1350, 1350,    0,    0,    0, 1350, 1351,    0,    0,    0,
     1351,    0, 1351, 1351, 1351,    0,    0,    0, 1351, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352,    0, 1352, 1352, 1352,    0,
     1352,    0,    0, 1352, 1352, 1352, 1352, 1352, 1353,    0,
     1353, 1353, 1353,    0,    0,    0, 1353, 1354,    0, 1354,
     1354, 1354,    0,    0,    0, 1354, 1356, 1356,    0, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1357,    0,    0, 1357,    0,
        0,    0, 1357,    0, 1357, 1357, 1357, 1358,    0, 1358,
        0, 1358, 1358,    0, 1358,    0,    0, 1358, 1358,    0,
     1358, 1358, 1358, 1359, 1359,    0, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1361,    0,    0, 1361,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1361,    0, 1361, 1361, 1361, 1362, 1362,    0, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363,
     1364,    0,    0, 1364,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1364,

     1364, 1364, 1364, 1364, 1365, 1365,    0, 1365,    0,    0,
        0,    0,    0,    0, 1365,    0, 1365, 1365,    0, 1365,
     1365,    0, 1365, 1365,    0, 1365, 1365, 1365, 1365, 1366,
        0, 1366, 1366, 1366, 1366, 1366,    0,    0, 1366, 1366,
     1366, 1366, 1366,    0,    0,    0, 1366, 1367,    0, 1367,
     1367, 1367, 1367, 1367,    0,    0, 1367, 1367, 1367, 1367,
     1367,    0,    0,    0, 1367, 1368, 1368,    0, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1369,    0,    0,    0,    0,    0,

     1369,    0, 1369, 1369, 1369, 1369, 1369, 1369,    0, 1369,
     1369, 1369, 1369, 1369,    0,    0,    0, 1369, 1370,    0,
     1370, 1370, 1370, 1370, 1370,    0,    0, 1370, 1370, 1370,
     1370, 1370,    0,    0,    0, 1370, 1371,    0, 1371, 1371,
     1371,    0,    0,    0, 1371, 1372, 1372, 1372, 1372,    0,
        0, 1372,    0,    0,    0,    0,    0,    0,    0,    0,
     1372, 1372,    0,    0, 1372,    0, 1372, 1372, 1372,    0,
        0,    0, 1372, 1373, 1373, 1373, 1373,    0,    0, 1373,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1373,
        0,    0, 1373,    0, 1373, 1373, 1373,    0,    0,    0,

     1373, 1374,    0, 1374,    0,    0,    0, 1374,    0, 1374,
     1374, 1374,    0,    0,    0, 1374, 1375, 1375,    0, 1375,
        0,    0,    0, 1375,    0, 1375, 1375, 1375, 1376, 1376,
        0, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377,    0, 1377,    0,
        0,    0, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378,
        0,    0, 1378,    0,    0,    0,    0,    0,    0,    0,

        0, 1378, 1378,    0,    0, 1378,    0, 1378, 1378, 1378,
        0,    0,    0, 1378, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
        0, 1379, 1379, 1379,    0, 1379,    0, 1379,    0, 1379,
     1379, 1379, 1379, 1380, 1380,    0, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,    0, 1381,
     1381, 1381,    0, 1381,    0,    0,    0, 1381, 1381, 1381,

     1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382,    0, 1382, 1382,
     1382,    0, 1382,    0,    0,    0, 1382, 1382, 1382, 1382,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383,    0, 1383, 1383, 1383,
        0, 1383,    0,    0,    0, 1383, 1383, 1383, 1383, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384,    0, 1384, 1384, 1384,    0,
     1384,    0,    0,    0, 1384, 1384, 1384, 1384, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2013 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
bool inInternalDocs = FALSE;
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static bool             g_spaceBeforeCmd;
static bool             g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            g_sectionTitle,SectionInfo::Anchor,
                                    g_sectionLevel);
    Doxygen::sectionDict->append(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  // create a new section element
  g_sectionTitle+=commentScanYYtext;
  g_sectionTitle=g_sectionTitle.stripWhiteSpace();
  SectionInfo *si = new SectionInfo(yyFileName,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

  // add section to this entry
  current->anchors->append(si);

  // add section to the global dictionary
  Doxygen::sectionDict->append(g_sectionLabel,si);

}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentScanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */









































#line 3867 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

int commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 928 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4118 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1161 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8889 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 947 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 950 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 953 "commentscan.l"
{ // mail address
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 956 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 959 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 962 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 979 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 984 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 992 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 996 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1000 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentScanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1004 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1007 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1011 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1015 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1019 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1022 "commentscan.l"
{
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "warning: found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1029 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  g_spaceBeforeCmd = commentScanYYtext[0]==' ' || commentScanYYtext[0]=='\t';
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            int i=0;
                                            while (commentScanYYtext[i]==' ' || commentScanYYtext[i]=='\t') i++;
                                            //if (i>0) addOutput(QCString(commentScanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext+i);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1075 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1078 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1086 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1098 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1103 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1108 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1112 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1125 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1128 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 29:
#line 1135 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1135 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentScanYYtext); 
                                          }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1150 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentScanYYtext); 
  					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1158 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentScanYYtext); 
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1161 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentScanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentScanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1167 "commentscan.l"
{ // numbered item
                                          addOutput(commentScanYYtext);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1170 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1173 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1177 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1180 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1183 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 1186 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentScanYYleng;)
                                            {
                                              if (commentScanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentScanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentScanYYleng;)
                                            {
                                              if (commentScanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentScanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1217 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1225 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1229 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 45:
YY_RULE_SETUP
#line 1236 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1237 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1240 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 49:
YY_RULE_SETUP
#line 1247 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1252 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1257 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1263 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1266 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1271 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1277 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1281 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1285 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1293 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1298 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1302 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1306 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1315 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 63:
YY_RULE_SETUP
#line 1320 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1324 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1328 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1337 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1342 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1351 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1355 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1359 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1368 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1371 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1375 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1379 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1384 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1387 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1391 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1395 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1399 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 80:
YY_RULE_SETUP
#line 1404 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1416 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1420 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1429 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1433 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1437 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 86:
YY_RULE_SETUP
#line 1454 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1458 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1461 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1470 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1472 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1481 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1486 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1490 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1493 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 95:
YY_RULE_SETUP
#line 1498 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1503 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1507 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1516 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1519 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1523 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1527 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1536 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1539 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1544 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1548 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1557 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 107:
YY_RULE_SETUP
#line 1563 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1571 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1575 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1583 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1589 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1594 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1598 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 114:
YY_RULE_SETUP
#line 1604 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1610 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1618 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1624 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 118:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1629 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1634 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1638 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1642 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1646 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1650 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 124:
YY_RULE_SETUP
#line 1657 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1664 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1672 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1676 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1680 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 129:
YY_RULE_SETUP
#line 1687 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor,0);
                                          Doxygen::sectionDict->append(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1694 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1702 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1712 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1719 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1722 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1726 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1730 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1739 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1742 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 138:
YY_RULE_SETUP
#line 1752 "commentscan.l"
{
                                          g_guardExpr=commentScanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1757 "commentscan.l"
{
                                          g_guardExpr+=commentScanYYtext;
                                        }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1760 "commentscan.l"
{
                                          g_guardExpr+=commentScanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1764 "commentscan.l"
{
                                          g_guardExpr+=commentScanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1772 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"warning: invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentScanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1778 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentScanYYtext);
  					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1781 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1787 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1791 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1794 "commentscan.l"
{
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1798 "commentscan.l"
{
  					  if (g_spaceBeforeIf) // needed for 665313 in combation with bug620924
					  {
					    addOutput(" ");
					  }
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1806 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 150:
/* rule 150 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1813 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1817 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1821 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1833 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 154:
/* rule 154 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1850 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1865 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1869 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1871 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1877 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 159:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1881 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 160:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1884 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 161:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1887 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 162:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1895 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1902 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1909 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1916 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1923 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1926 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1928 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1934 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1939 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1944 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 172:
YY_RULE_SETUP
#line 1951 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1957 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1968 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1972 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1978 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 1987 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1991 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1994 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1998 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2002 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2010 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 2024 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2028 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 185:
YY_RULE_SETUP
#line 2034 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2040 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2048 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 188:
YY_RULE_SETUP
#line 2057 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 2063 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2071 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 191:
YY_RULE_SETUP
#line 2076 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2084 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2086 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2089 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 195:
YY_RULE_SETUP
#line 2094 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentScanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 2099 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\cite command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2107 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2116 "commentscan.l"
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 2117 "commentscan.l"
{
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2126 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2130 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2136 "commentscan.l"
ECHO;
	YY_BREAK
#line 6288 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1161 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1161 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1160);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2136 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  if (g_spaceBeforeCmd) 
  {
    addOutput(' ');
    g_spaceBeforeCmd=FALSE;
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd = FALSE;
  g_spaceBeforeIf  = FALSE;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,current,current->brief);
    current->doc        = processMarkdown(fileName,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,current->brief.data(),
               current->docLine,current->doc.data(),
               current->inbodyLine,current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr);
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||  
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


