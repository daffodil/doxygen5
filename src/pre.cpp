
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1359] =
    {   0,
      165,  165,  184,  182,  183,    1,  182,  183,  181,  183,
        3,  182,  183,  182,  183,  182,  183,    2,  182,  183,
        6,  182,  183,    1,    6,  182,  183,    6,  182,  183,
        6,  181,  183,    3,    6,  182,  183,    5,  182,  183,
        6,  182,  183,    6,  182,  183,    6,  182,  183,    2,
        6,  182,  183,   59,  182,  183,    1,   59,  182,  183,
       54,  181,  183,    3,   59,  182,  183,   59,  182,  183,
       59,  182,  183,   56,   59,  182,  183,   56,   59,  182,
      183,   56,   59,  182,  183,   56,   59,  182,  183,   56,
       59,  182,  183,   56,   59,  182,  183,   56,   59,  182,

      183,    2,   59,  182,  183,   83,  182,  183,    1,   83,
      182,  183,   81,  181,  183,    3,   83,  182,  183,   83,
      182,  183,   83,  182,  183,   82,   83,  182,  183,   82,
       83,  182,  183,   82,   83,  182,  183,    2,   83,  182,
      183,   84,   87,  182,  183,    1,   84,   87,  182,  183,
       92,  181,  183,    3,   84,   87,  182,  183,   86,   87,
      182,  183,   87,  182,  183,   87,  182,  183,   84,   87,
      182,  183,    2,   84,   87,  182,  183,   93,   96,  182,
      183,    1,   93,   96,  182,  183,    3,   93,   96,  182,
      183,   95,   96,  182,  183,   93,   96,  182,  183,   93,

       96,  182,  183,   96,  182,  183,    2,   93,   96,  182,
      183,   23,  182,  183,    1,   23,  182,  183,   24,  181,
      183,    3,   23,  182,  183,   16,   23,  182,  183,   23,
      182,  183,   23,  182,  183,   23,  182,  183,   21,   23,
      182,  183,16404,   23,  182,  183,   21,   23,  182,  183,
    16404,   11,   23,  182,  183,   12,   23,  182,  183,    2,
       23,  182,  183,   17,  182,  183,    1,   17,  182,  183,
       19,  182,  183,   17,  182,  183,   17,  182,  183,  182,
      183,    2,   17,  182,  183,  182,  183,    1,  182,  183,
        3,  182,  183,  182,  183,  182,  183,    2,  182,  183,

       98,  182,  183,  102,  182,  183,    1,  102,  182,  183,
      100,  181,  183,    3,  102,  182,  183,  102,  182,  183,
      102,  182,  183,  102,  182,  183,    2,  102,  182,  183,
     8298,  182,  183,16487,16489,16490,  182,  183,  109,  182,
      183,  110,  182,  183,  108,  182,  183,  182,  183,  112,
      182,  183,  182,  183,  177,  182,  183,    1,  177,  182,
      183,  165,  177,  182,  183,  164,  181,  183,    3,  177,
      182,  183,  168,  177,  182,  183,  160,  177,  182,  183,
      169,  177,  182,  183,  177,  182,  183,  177,  182,  183,
      167,  177,  182,  183,  161,  177,  182,  183,  177,  182,

      183,    2,  177,  182,  183,   76,  182,  183,    1,   76,
      182,  183,   75,  181,  183,    3,   76,  182,  183,   76,
      182,  183,   76,  182,  183,    2,   76,  182,  183,   74,
       76,  182,  183,    1,   74,   76,  182,  183,   74,   76,
      182,  183,   74,   75,  181,  183,    3,   74,   76,  182,
      183,   73,   76,  182,  183,   74,   76,  182,  183,   74,
       76,  182,  183,    2,   74,   76,  182,  183,  137,  139,
      182,  183,    1,  139,  182,  183,  138,  181,  183,    3,
      137,  139,  182,  183,  139,  182,  183,  139,  182,  183,
      137,  139,  182,  183,  139,  182,  183,  139,  182,  183,

        2,  137,  139,  182,  183,   33,   36,  182,  183,    1,
       33,   36,  182,  183,   35,  181,  183,    3,   33,   36,
      182,  183,   36,  182,  183,   33,   36,  182,  183,   33,
       36,  182,  183,    2,   33,   36,  182,  183,  140,  162,
      182,  183,    1,  140,  162,  182,  183,  142,  181,  183,
        3,  140,  162,  182,  183,  162,  182,  183,  140,  162,
      182,  183,  140,  162,  182,  183,  161,  162,  182,  183,
        2,  140,  162,  182,  183,  139,  182,  183,  139,  182,
      183,  139,  182,  183,  139,  182,  183,  150,  154,  155,
      182,  183,    1,  150,  155,  182,  183,  151,  181,  183,

        3,  150,  154,  155,  182,  183,  154,  155,  182,  183,
      150,  154,  155,  182,  183,  155,  182,  183,    2,  150,
      154,  155,  182,  183,  147,  149,  182,  183,    1,  149,
      182,  183,  148,  181,  183,    3,  147,  149,  182,  183,
      149,  182,  183,  147,  149,  182,  183,  147,  149,  182,
      183,    2,  147,  149,  182,  183,  158,  159,  182,  183,
        1,  159,  182,  183,    3,  158,  159,  182,  183,  158,
      159,  182,  183,  158,  159,  182,  183,    2,  158,  159,
      182,  183,   65,  182,  183,    1,   65,  182,  183,   66,
      181,  183,    3,   65,  182,  183,   65,  182,  183,   65,

      182,  183,   64,   65,  182,  183,   65,  182,  183,   64,
       65,  182,  183,    2,   65,  182,  183,   72,  182,  183,
        1,   72,  182,  183,   70,  181,  183,    3,   72,  182,
      183,   72,  182,  183,   72,  182,  183,   68,   72,  182,
      183,   72,  182,  183,    2,   72,  182,  183,   71,   72,
      182,  183,   69,   72,  182,  183,  175,  182,  183,    1,
      175,  182,  183,    3,  175,  182,  183,  172,  175,  182,
      183,  175,  182,  183,  175,  182,  183,  175,  182,  183,
        2,  175,  182,  183,  176,  182,  183,    1,  176,  182,
      183,    3,  176,  182,  183,  174,  176,  182,  183,  176,

      182,  183,  176,  182,  183,  176,  182,  183,    2,  176,
      182,  183,   60,  182,  183,   58,  182,  183,    1,   58,
      182,  183,    3,   58,  182,  183,   58,  182,  183,   58,
      182,  183,   58,  182,  183,    2,   58,  182,  183,   32,
      182,  183,    1,   32,  182,  183,   30,  181,  183,    3,
       32,  182,  183,   29,   32,  182,  183,   32,  182,  183,
       25,   32,  182,  183,   26,   32,  182,  183,   32,  182,
      183,   32,  182,  183,   31,   32,  182,  183,    2,   32,
      182,  183,   40,  182,  183,    1,   40,  182,  183,    3,
       40,  182,  183,   37,   40,  182,  183,   40,  182,  183,

       40,  182,  183,   40,  182,  183,    2,   40,  182,  183,
      125,  182,  183,    1,  125,  182,  183,  124,  125,  182,
      183,    3,  125,  182,  183,  125,  182,  183,  125,  182,
      183,    2,  125,  182,  183,  128,  129,  182,  183,    1,
      128,  129,  182,  183,  127,  181,  183,    3,  128,  129,
      182,  183,  128,  182,  183,  128,  182,  183,  128,  129,
      182,  183,  128,  182,  183,    2,  128,  129,  182,  183,
      179,  180,    6,    6,    5,    6,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   91,  179,   89,  180,
       82,   82,   82,   82,   84,   84,   93,   90,   93,  179,

       88,   93,  180,   93,   94, 8212,   21,16404,   22,   21,
    16404,   17,   17,  179,   17,  180,   17,   18,   99,  179,
      180,   97,   98,  100,  179,  180,  101, 8298, 8297, 8295,
     8298,16487,16489,16490,  110,  109,  110,  108,  112,  112,
      107,  165,  166,  113,  179,  114,  180,  161,  163,   74,
       74,   73,  137,  115,  117,  179,  116,  180,  137,   33,
       34,   33,  180,   33,  140,  141,  140,  180,  140,  136,
      136,  179,  150,  154,  150,  154,  152,  154,  179,  153,
      154,  180,  150,  154,  147,  144,  146,  179,  145,  147,
      180,  147,  158,  156,  158,  179,  157,  158,  180,  158,

       64,   61,   64,   68,   67,   69,  171,  179,  170,  180,
      173,   60,   57,   28,  179,   38,  179,   38,  180,   39,
      124,  129,  179,  180,  129,  179,  180,    4,16391,   56,
       56,   56,   56,   56,   48,   56,   56,   56,   56,   56,
       56,   91,   91,  179,   89,   89,  180,   82,   82,   82,
       77,   82,   82,   85,    4,   84,   90,   93,   90,   90,
       93,  179,   88,   93,   88,   88,   93,  180,    4,   93,
       15,   15,   21,16404,   17,  179,   17,  180,    4,   17,
      179,  180,    4,    4,   99,  179,  180,    4,  111,  166,
      113,  113,  179,  114,  114,  180,  116,  180,    4,  137,

      119,   33,  180,    4,   33,  140,  180,    4,  140,  134,
      135,  154,  179,  154,  180,    4,  150,  154,    4,  154,
      143,  147,  180,    4,  147,  158,  179,  158,  180,    4,
      158,   64,  170,  180,   27,   28,  179,  131,  131,  179,
      130,  130,  180,    4,  129,  178,16391,    9, 8199,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       91,  178,   82,   78,   82,   82,   82,   85,   90,   93,
      178,   14,   13,   14,   21,16404,   17,  178,  178,  178,
      104,  112,  116,  118,  119,  135,  154,  178,  158,  178,
       64,   27, 8199,    9,   56,   56,   49,   52,   50,   50,

       56,   56,   56,   56,   56,   56,   56,   56,   79,   82,
       80,   82,   82,   13,   21,16404,  121,   64,    8,    9,
       56,   56,   53,   45,   44,   56,   56,   56,   56,   51,
       21,16404,  120,  123,  126,  122,   64,    9,   43,   47,
       46,16425,   42,   10,   64,    9, 8233,   63,   62,    9,
     8233,  133,  132,    9,    9,   55,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1264] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   14,   16,   18,
       21,   24,   28,   31,   34,   38,   41,   44,   47,   50,
       54,   57,   61,   64,   68,   71,   74,   78,   82,   86,

       90,   94,   98,  102,  106,  109,  113,  116,  120,  123,
      126,  130,  134,  138,  142,  146,  151,  154,  159,  163,
      166,  169,  173,  178,  182,  187,  192,  196,  200,  204,
      207,  212,  215,  219,  222,  226,  230,  233,  236,  239,
      244,  247,  252,  256,  260,  264,  267,  271,  274,  277,
      280,  282,  286,  288,  291,  294,  296,  298,  301,  304,
      307,  311,  314,  318,  321,  324,  327,  331,  337,  339,
      342,  345,  348,  350,  353,  355,  358,  362,  366,  369,
      373,  377,  381,  385,  388,  391,  395,  399,  402,  406,
      409,  413,  416,  420,  423,  426,  430,  434,  439,  443,

      447,  452,  456,  460,  464,  469,  473,  477,  480,  485,
      488,  491,  495,  498,  501,  506,  510,  515,  518,  523,
      526,  530,  534,  539,  543,  548,  551,  556,  559,  563,
      567,  571,  576,  579,  582,  585,  588,  593,  598,  601,
      607,  611,  616,  619,  625,  629,  633,  636,  641,  644,
      648,  652,  657,  661,  665,  670,  674,  678,  683,  686,
      690,  693,  697,  700,  703,  707,  710,  714,  718,  721,
      725,  728,  732,  735,  738,  742,  745,  749,  753,  757,
      760,  764,  768,  772,  775,  778,  781,  785,  788,  792,
      796,  800,  803,  806,  809,  813,  816,  819,  823,  827,

      830,  833,  836,  840,  843,  847,  850,  854,  858,  861,
      865,  869,  872,  875,  879,  883,  886,  890,  894,  898,
      901,  904,  907,  911,  914,  918,  922,  926,  929,  932,
      936,  940,  945,  948,  953,  956,  959,  963,  966,  971,
      972,  973,  973,  974,  975,  976,  977,  977,  977,  977,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      989,  991,  992,  993,  994,  995,  996,  996,  996,  997,
      998, 1001, 1004, 1005, 1006, 1006, 1006, 1006, 1007, 1009,
     1010, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1019, 1020,
     1021, 1022, 1022, 1022, 1023, 1024, 1024, 1025, 1026, 1027,

     1027, 1028, 1028, 1029, 1030, 1031, 1035, 1035, 1035, 1036,
     1037, 1038, 1039, 1039, 1040, 1040, 1041, 1042, 1043, 1043,
     1044, 1046, 1048, 1049, 1050, 1050, 1051, 1052, 1053, 1054,
     1055, 1057, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1061, 1062, 1064, 1065, 1066,
     1067, 1069, 1070, 1071, 1073, 1073, 1073, 1073, 1075, 1076,
     1077, 1080, 1083, 1085, 1085, 1086, 1087, 1089, 1092, 1093,
     1094, 1097, 1100, 1101, 1102, 1103, 1103, 1104, 1105, 1106,
     1107, 1109, 1111, 1112, 1113, 1114, 1114, 1114, 1114, 1116,
     1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1126, 1127,

     1128, 1129, 1129, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146,
     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1154, 1155, 1155,
     1155, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1171, 1172,
     1172, 1173, 1173, 1173, 1175, 1177, 1179, 1181, 1182, 1183,
     1184, 1186, 1187, 1188, 1189, 1189, 1189, 1190, 1190, 1191,
     1192, 1194, 1195, 1197, 1199, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1202, 1204, 1206, 1208, 1210, 1210,
     1211, 1212, 1214, 1216, 1219, 1221, 1221, 1221, 1222, 1224,

     1226, 1228, 1230, 1232, 1233, 1235, 1235, 1236, 1236, 1236,
     1238, 1239, 1241, 1242, 1244, 1246, 1246, 1247, 1247, 1248,
     1248, 1249, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1259, 1260, 1261, 1263, 1264, 1266, 1267, 1268,
     1268, 1269, 1269, 1272, 1273, 1275, 1275, 1275, 1277, 1279,
     1280, 1281, 1282, 1283, 1284, 1284, 1284, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1286, 1286, 1287, 1289, 1289,
     1291, 1292, 1292, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1294, 1294, 1295, 1295, 1296, 1297, 1299, 1300, 1301, 1302,

     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1310, 1311,
     1313, 1314, 1314, 1314, 1315, 1315, 1315, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1320, 1320, 1321, 1321, 1322, 1323,
     1323, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
     1331, 1331, 1333, 1333, 1333, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1335, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,

     1336, 1336, 1337, 1338, 1338, 1338, 1338, 1338, 1339, 1339,
     1340, 1340, 1341, 1342, 1343, 1344, 1344, 1344, 1344, 1344,
     1344, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346,
     1346, 1346, 1346, 1347, 1347, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1349, 1350, 1350, 1350, 1350, 1350, 1351, 1351, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354,
     1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   42,   49,   50,   51,   52,   53,   42,   54,
       55,   42,   56,   10,   57,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[60] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,    1,   11,   13,   14,   15,   15,
       15,    1,   16,   17,   17,    1,   18,   19,   19,    1,
       20,    1,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,    1,    1,   21,    1
    } ;

static yyconst flex_int16_t yy_base[1386] =
    {   0,
        0,    4,    9,   67,  126,    0,  185,    0,   27,   39,
      243,  247,  306,    0,  364,  368,  396,  400,  459,    0,
       56,  517,  549,    0,  604,    0,  663,    0,   62,  521,
      721,  725,  730,  736,  794,  852,  755,  774,  911,    0,
      969, 1027,  759,  801,  832,  837,  748,  843, 1086,    0,
     1145,    0, 1192,    0,  975,  984, 1007, 1246, 1278,    0,
     1018, 1250, 1332, 1390, 1347, 1359, 1449,    0,    0,    0,
     1507, 1565, 3109, 6203, 6203, 6203, 6203,    1, 3073, 6203,
     6203, 6203,   20, 6203, 6203, 6203,    2, 3068,   80, 6203,
     6203, 6203, 6203, 6203,    3, 3063,    0, 3034, 3038,    8,

       59, 3024, 3026, 6203, 6203, 6203, 6203, 6203,   19, 3044,
        0,   32, 3031, 6203,    0,    0, 6203,    0, 6203, 3025,
       22, 3029,    0,    0,    0,    0, 6203,   33, 3027,    0,
        0, 6203, 6203, 6203, 6203, 6203, 3016,   59, 3019,  107,
       20,  375, 6203, 6203, 6203,    0,    0, 6203,   76, 3008,
        0,    0,   77,   82,   99,  239,  251,  255,    0, 3022,
     3014, 6203, 3004,   99,  255,   51, 2995,  263,   78, 2995,
     2990, 2989, 2973,  253, 2976, 6203, 6203,  115, 6203, 6203,
     6203, 2971, 6203,  102, 2948, 6203,    0,  267, 6203, 6203,
     6203, 6203, 6203,  265, 2938, 6203, 6203, 6203,  252, 6203,

     6203, 6203,  268, 2937, 6203,    0, 6203, 6203,    0, 2936,
      270, 2926, 1598, 2881,    0,    0,    0, 6203,    0, 2920,
      271, 2910,    0,    0,    0, 6203,    0, 2915,  273, 2905,
        0,    0, 2905,  278,  260, 2864,  365,    0, 6203,  374,
      281,  391,  266,  379,    0, 6203, 6203,    0, 2902,  286,
     2893,    0,    0, 6203,    0,  370, 2889,    0, 6203, 6203,
     6203, 6203,  371, 2879,    0,  406, 2863, 6203, 6203, 6203,
     6203, 6203,  394, 2869,    0, 2881, 6203, 6203,    0, 6203,
     6203, 6203, 6203,  401, 2855,    0, 6203, 6203, 6203, 6203,
     6203,  402, 2853,    0, 6203,    0, 6203, 6203, 6203,  410,

     2852,  426, 6203, 6203, 6203, 6203, 6203, 6203, 2845, 6203,
     6203,  418, 2849, 6203, 6203, 6203, 6203, 6203, 6203,  419,
     2836,    0, 6203, 6203, 6203,    0, 6203,  420, 2835, 6203,
        0,    0, 6203,    0, 6203,  421, 2833, 2816,    0, 2837,
     2822,    0, 6203,  524, 6203,  530,  437,  429,  542,    0,
     2799, 2786,  402, 2778,  528, 2757, 2769, 2766, 2762, 2782,
     2768,    0,  403, 2749,  859,    0, 2769,  426, 1647,    0,
      751,  537, 1667, 6203, 2759,  437,  812, 6203,  826, 6203,
     2765, 1205,    0, 2746, 2740, 1687, 6203,  513, 6203,  717,
      776, 1707,  525, 6203,  553, 2741, 6203,  392,  373, 1729,

     6203, 2740,  767, 6203, 6203,  869, 2738,  533, 2736, 2734,
     2726, 2725, 2709,  564, 2708,  794, 6203,  260, 2713, 2708,
      108,  287,    0, 6203, 2702, 6203,  725, 6203,    0, 6203,
      433, 2683, 1749, 1740, 2644, 2640, 2639, 2633, 2649, 2648,
     2617, 2630, 2620, 2601,    0, 6203, 2639, 1789,    0, 6203,
     2628, 1809, 6203, 2624, 2584,  736, 2562,  539,    0,    0,
     2597, 2592, 1833, 2558,    0,  741, 2590, 2584, 1853,    0,
     2578, 2573, 1873,    0, 6203, 2582, 2538,    0, 6203,    0,
     2561, 2548, 6203,    0, 6203, 2560, 2540,  553, 2536, 2534,
     2527, 6203,    0,    0,  444,  749, 1893, 2497, 2517, 6203,

     6203,  724, 2521,  994, 2489, 2490, 2489, 2480, 2471, 6203,
     2470, 2461, 2446, 2447, 2451, 2450,    0, 2468,    0,    0,
     2436, 2436, 2430, 6203, 2428, 2427, 2441, 6203, 2431,  824,
        0,  795,    0,  857,  861,    0,  867,    0, 6203, 2422,
     2415,  865, 1043, 1255, 2399,    0,    0,  879,  784,  797,
     6203,  876, 2412, 2407,  903,  548, 6203, 2393, 2405, 6203,
     2381, 6203, 6203, 2379,    0, 2341, 2339,  983, 2322, 2339,
     2337, 2317, 2320, 2311,  777,  842, 2317, 2307, 2299, 2302,
     2301, 2281, 2284, 2269,    0,    0,    0,    0, 2287, 6203,
     2264, 2298,    0,  885,    0, 2268,  973, 6203,    0,    0,

     2295,    0,    0, 2270, 6203, 2299, 6203, 2297, 1040, 2283,
     6203, 2281, 6203, 6203,    0, 2262, 6203, 2281, 1282, 1279,
     1286, 1364, 6203, 2256, 2241,  563, 1918, 2246, 2241, 2233,
     2215, 2211, 2216, 2221,    0,  972,  769, 2216, 2214, 2238,
     6203, 1045,  983, 6203, 6203, 1050, 1068, 1376,    0,  842,
     2244, 6203, 6203, 2223, 2200,  968, 6203, 2179, 2172, 2170,
     2177, 2162, 2156, 2158, 2157, 2158, 1071, 2154, 2144, 2149,
     2133, 2128, 2132, 2117, 2105, 1226, 2102,    0, 2112,    0,
     2100, 2133, 6203, 1195, 2105,  886, 1371, 1519, 1001,  981,
     1367, 1524, 1532, 2100, 2088, 6203, 6203, 1021, 2086, 1977,

     1005, 2083, 2068, 2081, 2083, 2102, 6203, 1027, 2061,    0,
     1210, 2083, 2082, 6203, 2080, 1343, 1395, 2051, 2053, 1078,
     2041, 2044, 2032, 2031, 2042, 2018, 1512, 1293, 2017, 1406,
     2015, 2013, 2005, 2007, 2005, 2017, 1999, 1993, 1868, 1863,
     1880, 1879, 1857, 1870, 1855, 1409, 1858, 1882, 1881, 1843,
     1539, 1552, 1075, 6203, 1555, 1559, 1581, 1851, 1884, 1208,
     1845, 6203, 1023, 6203, 1262, 1412, 1843, 1872, 1867, 1830,
     1425, 1594, 1544, 1820, 1428, 1816, 1801, 1801, 1794, 1805,
     1791, 1779, 1435, 6203, 1439, 1779, 1778, 1777, 1771, 1773,
     1764, 1755, 1760, 1767,  986, 1751, 1720, 1723, 1726, 1714,

     1714, 1442, 1715, 1700, 1618, 1806, 1672, 1712, 1734, 1741,
     1350, 1266, 6203, 1507, 6203, 1037, 1570, 1614, 2034, 1714,
     6203, 1679, 1682, 1681, 1677, 1677, 1665, 1653, 1658, 1644,
     1515, 1653, 1653, 1640, 1636, 1626, 1614, 1627, 1612, 1624,
     1620, 1605, 1604, 1592, 1589, 1596, 1580, 1290, 1574, 2039,
     2044, 1794, 1826, 1838,    0, 1561, 1652, 2051, 1597, 1545,
     1609, 1544, 1534, 1526, 1498, 1496, 1509, 1490, 1493,    0,
     1484, 1487, 1481, 1401, 1389, 1380, 1378, 1375, 1372, 1358,
     1291, 6203,    0, 2064, 2067, 2070, 2079, 2093,    0, 1361,
     1683, 2099, 1641, 1335, 1305, 1313, 1296, 1294, 6203, 1255,

     1253, 1253, 1241, 1229, 1219, 1202, 1180, 6203, 2105, 2109,
     2125, 2129, 2134, 1181, 1745, 2138, 1703, 1166, 1152, 1013,
     1009,  998,  961,  917,  854,  860,  834, 2149, 2154, 2165,
     2169, 2174, 6203, 1849, 2194, 2179,  838,  804,  793,  720,
      702,  485, 2204, 2209, 2215, 2224, 2229, 1869, 2235, 2199,
      399,  367,  319, 2240, 2253, 2264, 2273, 2278, 1898, 2285,
     2269,  246, 2299, 2302, 2314, 2328, 2333,   70, 2339, 2342,
     2356, 2359, 2362, 2372, 2375, 2378, 2388, 2391, 2397, 2402,
     2410, 2420, 2416, 2426, 2436, 2432, 2442, 2452, 2446, 2457,
     2463, 2474, 2477, 2491, 2480, 2501, 2511, 2496, 2517, 2521,

     2506, 2534, 2537, 2550, 2553, 2556, 2566, 2569, 2575, 2580,
     2585, 2591, 2596, 2604, 2614, 2610, 2620, 2630, 2624, 2636,
     2646, 2640, 2651, 2657, 2668, 2671, 2685, 2674, 2695, 2705,
     2690, 2711, 2715, 2700, 2728, 2731, 2744, 2747, 2750, 2760,
     2763, 2769, 2774, 2779, 2785, 2790, 2798, 2808, 2804, 2814,
     2824, 2818, 2830, 2840, 2834, 2845, 2851, 2862, 2865, 2879,
     2868, 2889, 2899, 2884, 2905, 2909, 2894, 2922, 2925, 2938,
     2941, 2944, 2954, 2957, 2963, 2968, 2973, 2979, 2984, 2992,
     3002, 2998, 3008, 3018, 3012, 3024, 3034, 3028, 3039, 3045,
     3056, 3059, 3073, 3062, 3083, 3093, 3078, 3099, 3103, 3088,

     3116, 3119, 3132, 3135, 3138, 3148, 3151, 3157, 3162, 3167,
     3173, 3178, 3186, 3196, 3192, 3202, 3212, 3206, 3218, 3228,
     3222, 3233, 3239, 3250, 3253, 3267, 3256, 3277, 3287, 3272,
     3293, 3297, 3282, 3310, 3313, 3326, 3329, 3332, 3342, 3345,
     3351, 3356, 3361, 3367, 3372, 3380, 3390, 3386, 3396, 3406,
     3400, 3412, 3422, 3416, 3427, 3433, 3444, 3447, 3461, 3450,
     3471, 3481, 3466, 3487, 3491, 3476,   67, 3504, 3509, 3516,
     3521, 3526, 3531, 3536, 3541, 3546, 3551, 3559, 3564, 3570,
     3575, 3580, 3585, 3590,    6, 3595, 3600, 3605, 3608, 3613,
     3618, 3624, 3629, 3634, 3639, 3644, 3649, 3654, 3662, 3667,

     3672, 3678, 3683, 3688, 3693, 3698, 3703, 3708, 3711, 3716,
     3721, 3726, 3732, 3737, 3742, 3747, 3752, 3757, 3765, 3770,
     3775, 3780, 3786, 3791, 3796, 3801, 3806, 3811, 3814, 3819,
     3824, 3829, 3834, 3840, 3845, 3850, 3855, 3860, 3868, 3873,
     3878, 3883, 3888, 3894, 3899, 3904, 3909, 3914, 3917, 3922,
     3927, 3932, 3937, 3942, 3948, 3953, 3958, 3963, 3971, 3976,
     3981, 6203, 4037, 4058, 4079, 4100, 4121, 4142, 4163, 4184,
     4205, 4226, 4247, 4268, 4289, 4310, 4331, 4352, 4373, 4394,
     4415, 4436, 4457, 1048, 1204, 4478, 4499, 4520, 4541, 4562,
     4581, 4600, 4621, 4642, 4661, 4680, 4699, 4717, 1368, 4736,

     4757, 4776, 4797, 4818, 4839, 4860, 4881, 4902, 1407, 1574,
     1575, 4923, 1590, 4944, 4965, 4984, 5003, 5019, 5036, 5057,
     1601, 5078, 5099, 1613, 5120, 5141, 5162, 5183, 5204, 5225,
     5246, 5265, 5284, 5305, 5324, 5343, 5362, 5380, 1647, 5399,
     5420, 5439, 5460, 5481, 5502, 5523, 5544, 5565, 1707, 1751,
     1762, 1764, 5586, 5607, 5626, 5645, 5666, 5687, 1767, 5708,
     5729, 1772, 5750, 5771, 5792, 5813, 5834, 5855, 5876, 5895,
     5914, 5935, 5956, 5977, 5996, 6017, 6038, 6059, 6080, 6101,
     6120, 6139, 1773, 6160, 6181
    } ;

static yyconst flex_int16_t yy_def[1386] =
    {   0,
     1263, 1263, 1263, 1264, 1262,    5, 1262,    7, 1265, 1265,
     1266, 1266, 1262,   13, 1267, 1267, 1268, 1268, 1262,   19,
     1269, 1269,   19,   23, 1262,   25, 1262,   27, 1270, 1271,
     1263, 1263, 1263, 1263, 1272, 1272, 1273, 1273, 1262,   39,
     1272, 1272, 1274, 1274, 1275, 1275, 1276, 1276, 1262,   49,
     1262,   51,   51,   53, 1277, 1277, 1278, 1278,   23,   59,
     1279, 1279, 1280, 1280, 1281, 1281, 1262,   67,   67,   67,
     1282, 1282, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1283, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1285, 1285, 1285, 1262, 1286, 1286, 1262, 1286, 1262, 1287,
     1262, 1286, 1286, 1288, 1288, 1288, 1262, 1288, 1288, 1289,
     1288, 1262, 1262, 1262, 1262, 1262, 1290, 1262, 1262, 1291,
     1262, 1291, 1262, 1262, 1262, 1292, 1292, 1262, 1292, 1292,
     1293, 1292, 1294, 1294, 1294, 1294, 1294, 1294, 1295, 1296,
     1296, 1262, 1296, 1296, 1296, 1262, 1296, 1297, 1262, 1262,
     1262, 1262, 1262, 1298, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1299, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1300, 1262,

     1262, 1262, 1262, 1262, 1262, 1301, 1262, 1262, 1301, 1262,
     1262, 1301, 1262, 1262, 1301, 1302, 1302, 1262, 1302, 1262,
     1302, 1302, 1302, 1303, 1303, 1262, 1303, 1262, 1303, 1303,
     1299, 1303, 1262, 1262, 1262, 1262, 1304, 1305, 1262, 1304,
     1306, 1304, 1262, 1304, 1307, 1262, 1262, 1307, 1262, 1307,
     1307, 1307, 1308, 1262, 1308, 1308, 1308, 1308, 1262, 1262,
     1262, 1262, 1262, 1262, 1309, 1262, 1309, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1310, 1262, 1262, 1262, 1311, 1262,
     1262, 1262, 1262, 1262, 1262, 1312, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1312, 1262, 1313, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1314, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1315, 1262, 1262, 1262, 1316, 1262, 1262, 1262, 1262,
     1317, 1317, 1262, 1317, 1262, 1262, 1317, 1262, 1317, 1262,
     1262, 1318, 1262, 1319, 1262, 1262, 1262, 1320, 1262, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322,
     1323, 1324, 1324, 1324, 1324, 1325, 1326, 1327, 1325, 1328,
     1329, 1330, 1328, 1262, 1262, 1331, 1262, 1262, 1332, 1262,
     1262, 1332, 1333, 1333, 1333, 1333, 1262, 1334, 1262, 1334,
     1334, 1334, 1262, 1262, 1335, 1336, 1262, 1336, 1336, 1336,

     1262, 1262, 1262, 1262, 1262, 1337, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1338, 1262, 1262, 1262, 1262,
     1262, 1262, 1339, 1262, 1262, 1262, 1340, 1262, 1341, 1262,
     1262, 1262, 1341, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1342, 1262, 1342, 1342, 1343, 1262,
     1343, 1343, 1262, 1262, 1262, 1262, 1262, 1344, 1345, 1346,
     1346, 1346, 1344, 1262, 1347, 1262, 1262, 1347, 1347, 1348,
     1348, 1348, 1348, 1349, 1262, 1262, 1349, 1350, 1262, 1351,
     1262, 1262, 1262, 1352, 1262, 1262, 1353, 1354, 1262, 1262,
     1262, 1262, 1355, 1356, 1262, 1262, 1356, 1262, 1262, 1262,

     1262, 1357, 1358, 1262, 1359, 1359, 1359, 1359, 1359, 1262,
     1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1361, 1361,
     1362, 1362, 1362, 1262, 1362, 1362, 1363, 1262, 1262, 1262,
     1364, 1365, 1366, 1365, 1367, 1368, 1367, 1369, 1262, 1262,
     1262, 1262, 1262, 1370, 1371, 1371, 1371, 1372, 1372, 1372,
     1262, 1373, 1373, 1373, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1374, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1375, 1375, 1343, 1343, 1262, 1262,
     1262, 1346, 1346, 1344, 1346, 1262, 1262, 1262, 1347, 1347,

     1348, 1348, 1348, 1349, 1262, 1376, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1356, 1262, 1262, 1358, 1377, 1262,
     1262, 1262, 1262, 1359, 1359, 1359, 1262, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1360, 1362, 1362, 1362, 1362, 1378,
     1262, 1262, 1365, 1262, 1262, 1262, 1262, 1370, 1371, 1372,
     1373, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1346, 1262, 1348,
     1349, 1379, 1262, 1262, 1262, 1377, 1377, 1377, 1262, 1377,
     1262, 1262, 1262, 1359, 1359, 1262, 1262, 1262, 1359, 1262,

     1359, 1359, 1359, 1359, 1359, 1359, 1262, 1262, 1362, 1362,
     1362, 1262, 1262, 1262, 1262, 1262, 1370, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1349, 1262, 1262, 1262,
     1377, 1377, 1262, 1262, 1262, 1262, 1262, 1359, 1359, 1262,
     1262, 1262, 1262, 1262, 1359, 1359, 1359, 1359, 1262, 1262,
     1262, 1370, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1380, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1349, 1262, 1377, 1377, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1381, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1382, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1380,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1349, 1262, 1377,
     1377, 1262, 1262, 1262, 1383, 1262, 1262, 1262, 1262, 1382,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1384,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1385, 1377, 1377, 1262, 1262, 1262, 1383, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1377, 1377,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1377, 1377, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1377, 1377, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1377, 1377, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1377, 1377, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262
    } ;

static yyconst flex_int16_t yy_nxt[6263] =
    {   0,
     1262,   75,  393,   76,   77,   75, 1262,   76,   77, 1262,
       75,  394,   76,   77,  340,  340,  340,   78,  341,  341,
      341,   78,  344,  380,  381,   79,   78,  345,  116,   79,
      117,  118,  360,  119,   79,  360,  361,  120, 1262,  361,
      116, 1262,  117,  118,  121,  119,  371,  346,  346,  120,
      372,  353,  122,  354,  401,  402,  121,  161,   80,  162,
      163,  821,   80,  191,  122,  192,  193,   80,   82,   83,
       84,   85,  340,  164,   86,  363,  341,  364,  378,  194,
      408,  165,  347,  389,   87,  123,  166,  195,  389,  384,
      409,  348,   88,  385,   89,   89,  355,  123,  349,  349,

      349,  389,  397,  356,  357,  389,  389,  349,  349,  377,
      377,  377,  398,  560,  167,  421,  399,  418,  378,  422,
      196,  561,  419,  389,  590,   90,   91,   92,   91,   93,
       94,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   95,   91,   91,   91,   91,   91,   91,
       91,   96,   91,   97,   97,   91,   91,   91,   97,   97,
       98,   99,  100,   97,   97,   97,  101,   97,   97,   97,
       97,   97,   97,  102,   97,   97,   97,  103,   97,   97,
       97,   91,   91,   91,  104,  105,  106,  105,  107,  108,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  109,  105,  105,  105,  105,  105,  105,  105,
      110,  105,  111,  111,  105,  105,  105,  111,  111,  111,
      111,  112,  111,  111,  111,  113,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      105,  105,  105,  114,  125,  389,   76,  126,  125,  127,
       76,  126,  390,  127,  427,  414,  391,  389,  397,  428,
      128,  389,  418,  389,  128,  403,  404,  419,  129,  415,
      424,  425,  129,  130,  405,  389,  392,  130,  360,  389,
      400,  360,  361,  431,  340,  361,  340,  432,  447,  968,
      451,  454,  562,  407,  461,  341,  455,  456,  462,  467,

      464,  131,  437,  468,  563,  131,  132,  133,  132,  134,
      135,  132,  136,  132,  132,  132,  137,  132,  132,  132,
      132,  132,  132,  138,  132,  132,  132,  132,  132,  132,
      132,  139,  132,  140,  140,  132,  141,  132,  140,  140,
      140,  140,  142,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  143,  144,  132,  145,  147,  459,   76,   77,  147,
      148,   76,   77,  590,  148,  459,  397,  377,  377,  377,
      459,  149,  460,  471,  340,  149,  378,  472,  341,  150,
      553,  460,  459,  150,  151,  397,  460,  154,  151,   76,

      155,  154,   74,   76,  155,  552,   74,  340,  460,  475,
      476,  341,  962,  156,  481,  340,  463,  156,  482,  341,
       74,  157,  152,  340,   74,  157,  152,  341,  382,  485,
      486,  489,  490,  340,  495,  341,  491,  341,  496,  347,
      503,  504,  507,  521,  530,  530,  499,  541,  348,  611,
      430,  508,  522,  720,  158,  542,  542,  612,  158,   74,
       75,   74,   76,   77,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   78,   74,   74,   74,
       74,   74,   74,   74,   79,   74,  159,  159,   74,   74,
       74,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,   74,   74,   74,   80,  161,  389,
      162,  163,  198,  199,  200,  201,  344,  393,  202,  590,
      510,  345,  347,  510,  164,  408,  394,  389,  203,  510,
      459,  348,  165,  536,  347,  409,  204,  166,  349,  349,
      349,  346,  346,  348,  537,  393,  460,  349,  349,  405,
      349,  349,  349,  511,  394,  696,  414,  536,  696,  349,
      349,  609,  609,  512,  696,  167,  168,  168,  407,  205,
      415,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,   74,   75,  169,   76,   77,   74,
       74,   74,   74,   74,   74,  170,  171,   74,  172,   74,
      173,   78,   74,   74,   74,   74,   74,   74,   74,   79,
       74,  174,  174,   74,  175,   74,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,   74,
       74,   74,   80,  176,  177,  178,  179,  180,  176,  181,
      182,  176,  176,  183,  176,  176,  176,  176,  176,  176,
      184,  176,  176,  176,  176,  176,  176,  176,  185,  186,
      187,  187,  176,  188,  176,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  176,  176,
      176,  189,   75,  389,   76,   77,   75,  427,   76,   77,
      548,   75,  428,   76,   77,  503,  504,   75,   78,   76,
       77,  389,   78,  597,  590,  953,   79,   78,  598,  254,
       79,  239,  255,   78,  613,   79,  217,  533,  218,  219,
      238,   79,  239,  240,  534,  256,  614,  590,  220,  403,
      404,  708,  221,  257,  590,  217,  241,  218,  219,   80,
      222,  533,  389,   80,  242,  243,  555,  220,   80,  243,
      389,  221,  590,  549,   80,  207,  414,  208,  209,  222,

      389,  533,  238,  389,  239,  240,  258,  210,  389,  709,
      415,  211,  664,  223,  543,  543,  543,  244,  241,  212,
      213,  389,  665,  378,  213,  533,  242,  243,  377,  377,
      377,  243,  223,  246,  641,  247,  248,  378,  246,  952,
      247,  248,  642,  642,  254,  249,  239,  255,  389,  250,
      249,  214,  215,  207,  250,  208,  209,  251,  667,  244,
      256,  524,  251,  533,  524,  210,  389,  536,  257,  211,
      524,  403,  404,  536,  643,  645,  666,  212,  213,  397,
      405,  951,  213,  646,  646,  389,  459,  533,  590, 1262,
      252,  536,  667,  651,  525,  252,  650,  536,  689,  407,

      942,  258,  460,  389,  526,  652,  652,  652,  590,  214,
      215,  224,  225,  224,  226,  227,  224,  224,  224,  224,
      224,  224,  224,  224,  228,  224,  224,  224,  229,  224,
      224,  224,  224,  224,  224,  224,  230,  224,  231,  231,
      224,  224,  224,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  224,  224,  224,  232,
      207,  590,  208,  209,  707,  597,  281,  707,   76,  282,
      598,  283,  233,  707, 1262,  281,  234,   76,  282,  533,
      283,  657,  284,  689,  212,  235,  620,  621,  622,  235,

      285,  284,  719,  753,  754,  286,  941,  763,  289,  285,
       76,  290,  657,  533,  286,  623,  764,  291,  720,  298,
      841,   93,  299,  760,  292,  763,  236,  215,  207,  708,
      208,  209,  293,  287,  764,  300,  590,  294,  657,  816,
      233,  940,  287,  301,  234,  647,  647,  647,  302,  623,
      683,  939,  212,  235,  378,  528,  938,  235,  684,  684,
      714,  761,  350,  713,  713,  295,  350,  770,  715,  715,
      716,  716,  716,  730,  730,  730,  303,  753,  754,  378,
      775,  775,  775,  856,  236,  215,  259,  260,  259,  261,
      262,  259,  259,  259,  259,  259,  259,  259,  259,  259,

      259,  259,  259,  263,  259,  259,  259,  259,  259,  259,
      259,  264,  259,  265,  265,  259,  266,  259,  265,  265,
      265,  267,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  259,  259,  259,  268,  269,  270,  269,  271,  272,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  273,  269,  269,  269,  269,  269,  269,  269,
      274,  269,  275,  275,  269,  276,  269,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      269,  269,  269,  277,  278,  607,  720,  377,  377,  377,
      760,  937,  524,  749,  749,  524,  378,  933,  362,  279,
      279,  524,  362,  927,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  289,  761,   76,
      290,  298,  926,   93,  299,  544,  291,  377,  377,  377,
      738,  739,  925,  292,  812,  740,  378,  300,  812,  741,
      742,  293,  924,  813,  743,  301,  294,  813,  744,  745,
      302,  691,  692,  693,  687,  621,  688,  923,  693,  693,
      693,  648,  881,  881,  689,  783,  784,  785,  922,  921,

      623,  882,  882,  690,  295,  296,  296,  623,  303,  667,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  305,  623,  306,  307,  690,  308,  920,
      720,  623,  309,  310,  311,  771,  771,  771,  317,  312,
       76,  318,  696,  319,  378,  696,  919,  313,  314,  720,
      317,  696,   76,  318,  320,  319,  693,  693,  693,  755,
      756,  757,  321,  751,  692,  752,  320,  322,  377,  377,
      377,  918,  423,  689,  321,  623,  423,  378,  623,  322,
      315,  305,  690,  306,  307,  914,  308,  377,  377,  377,

      309,  310,  311,  907,  906,  323,  378,  312,  730,  730,
      730,  802,  784,  785,  814,  313,  314,  323,  815,  623,
      905,  474,  623,  904,  717,  474,  690,  818,  818,  818,
      775,  775,  775,  903,  815,  902,  378,  783,  784,  785,
      772,  785,  784,  785,  802,  784,  785,  901,  315,  324,
      325,  326,   76,  327,  326,  324,  324,  324,  326,  324,
      326,  326,  324,  324,  326,  326,  328,  326,  326,  326,
      324,  324,  324,  324,  329,  324,  326,  326,  324,  324,
      324,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  324,  324,  324,  330,  332,  814,
      333,  334,  335,  815,  730,  730,  730,  730,  730,  730,
      335,  752,  693,  752,  336,  667,  757,  757,  757,  815,
      900,  689,  337,  338,  757,  757,  757,  338,  667,  898,
      690,  805,  756,  806,  720,  623,  775,  775,  775,  897,
      720,  689,  720,  623,  806,  757,  806,  807,  808,  809,
      690,  809,  809,  809,  689,  339,  332,  782,  333,  334,
      335,  896,  707,  690,  690,  707,  623,  895,  335,  623,
      623,  707,  336,  809,  809,  809,  894,  623,  478,  480,
      337,  338,  478,  480,  690,  338,  819,  819,  819,  822,

      820,  861,  623,  893,  484,  378,  890,  690,  484,  883,
      623,  775,  775,  775,  623,  350,  857,  857,  857,  350,
      850,  808,  851,  339,  434,  378,  880,  362,  434,  879,
      689,  362,  435,  436,  437,  878,  623,  438,  877,  690,
      876,  439,  440,  917,  917,  917,  441,  820,  875,  821,
      442,  443,  531,  874,  891,  891,  891,  501,  531,  531,
      590,  423,  531,  378,  501,  423,  667,  873,  667,  531,
      531,  531,  538,  690,  852,  853,  854,  538,  538,  538,
      667,  872,  538,  871,  538,  915,  915,  915,  870,  538,
      538,  538,  547,  623,  378,  869,  821,  547,  547,  547,

      831,  868,  547,  867,  547,  936,  936,  936,  866,  547,
      547,  547,  550,  389,  854,  854,  854,  550,  550,  550,
      865,  474,  550,  864,  550,  474,  863,  623,  862,  550,
      550,  551,  397,  623,  554,  861,  854,  854,  854,  554,
      554,  554,  859,  810,  554,  849,  554,  934,  934,  934,
      848,  554,  554,  554,  565,  623,  378,  847,  821,  565,
      565,  565,  846,  845,  565,  478,  501,  623,  844,  478,
      843,  565,  565,  565,  566,  567,  480,  568,  484,  569,
      480,  350,  484,  570,  571,  350,  362,  889,  572,  623,
      362,  889,  573,  574,  586,  842,  886,  887,  888,  586,

      586,  586,  840,  839,  586,  838,  586,  837,  851,  809,
      851,  586,  586,  586,  588,  623,  836,  835,  689,  588,
      588,  588,  834,  833,  588,  832,  588,  690,  888,  888,
      888,  588,  588,  588,  459,  831,  829,  828,  594,  827,
      888,  888,  888,  594,  594,  594,  826,  623,  594,  623,
      595,  948,  948,  948,  825,  594,  594,  594,  600,  623,
      378,  690,  824,  600,  600,  600,  823,  817,  600,  769,
      600,  959,  959,  959,  816,  600,  600,  600,  603,  766,
      378,  623,  811,  603,  603,  603,  810,  352,  603,  804,
      603,  607,  607,  623,  803,  603,  603,  603,  501,  801,

      965,  965,  965,  615,  615,  615,  800,  799,  615,  378,
      501,  798,  797,  796,  795,  615,  615,  615,  697,  697,
      698,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  350,  350,  350,  697,
      697,  697,  697,  697,  697,  350,  350,  697,  697,  697,
      350,  350,  350,  350,  350,  350,  350,  350,  699,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  697,  697,  697,  697,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  350,  350,  350,  762,  762,

      762,  762,  762,  762,  350,  350,  762,  762,  762,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  762,  762,  762,  762,  858,  858,  858,  794,
      820,  884,  853,  885,  793,  378,  885,  854,  885,  792,
      791,  689,  790,  892,  892,  892,  689,  820,  789,  788,
      690,  787,  378,  786,  781,  690,  909,  887,  910,  910,
      888,  910,  911,  912,  913,  780,  689,  779,  778,  689,
      777,  913,  913,  913,  776,  690,  774,  773,  690,  821,
      714,  623,  528,  528,  690,  913,  913,  913,  636,  690,

      623,  916,  916,  916,  769,  820,  821,  928,  912,  929,
      378,  929,  913,  929,  623,  768,  767,  689,  766,  690,
      765,  689,  690,  626,  759,  623,  690,  930,  931,  932,
      690,  932,  932,  932,  623,  758,  932,  932,  932,  750,
      935,  935,  935,  607,  820,  747,  623,  746,  623,  378,
      623,  943,  931,  944,  821,  623,  944,  932,  944,  677,
      690,  689,  675,  737,  690,  736,  689,  945,  946,  947,
      690,  947,  947,  947,  735,  690,  947,  947,  947,  734,
      623,  950,  950,  950,  623,  733,  623,  732,  731,  623,
      623,  729,  728,  821,  727,  623,  949,  949,  949,  726,

      820,  961,  961,  961,  690,  378,  954,  946,  955,  690,
      725,  955,  947,  955,  724,  723,  689,  956,  957,  958,
      623,  689,  722,  721,  623,  690,  958,  958,  958,  623,
      690,  958,  958,  958,  821,  718,  623,  960,  960,  960,
      654,  820,  963,  957,  964,  623,  378,  397,  528,  821,
      623,  711,  689,  710,  821,  964,  958,  964,  706,  690,
      705,  690,  704,  703,  690,  689,  956,  957,  958,  702,
      623,  967,  967,  967,  690,  958,  958,  958,  701,  623,
      958,  958,  958,  700,  623,  623,  695,  966,  966,  966,
      821,  820,  694,  619,  623,  690,  378,  685,  617,  623,

      617,  963,  957,  964,  964,  958,  964,  607,  690,  607,
      681,  689,  680,  679,  689,  678,  969,  969,  969,  623,
      690,  677,  676,  690,  821,  378,  675,  674,  623,  673,
      970,  970,  970,  623,  820,  971,  971,  971,  672,  378,
      821,  972,  972,  972,  973,  973,  973,  671,  820,  670,
      378,  669,  668,  378,  690,  663,  662,  690,  974,  974,
      974,  975,  975,  975,  976,  976,  976,  661,  820,  660,
      378,  659,  658,  378,  977,  977,  977,  978,  978,  978,
      979,  979,  979,  821,  820,  656,  378,  655,  821,  378,
      980,  980,  980,  981,  981,  981,  654,  821,  617,  982,

      982,  982,  378,  820,  983,  983,  983,  559,  378,  653,
      397,  821,  984,  984,  984,  397,  649,  821,  986,  986,
      986,  378,  985,  985,  985,  644,  820,  821,  987,  987,
      987,  378,  644,  821,  989,  989,  989,  378,  988,  988,
      988,  528,  820,  821,  990,  990,  990,  378,  992,  992,
      992,  528,  821,  378,  991,  991,  991,  821,  820,  993,
      993,  993,  525,  378,  639,  994,  994,  994,  378,  820,
      638,  821,  637,  636,  378,  821,  995,  995,  995,  996,
      996,  996,  998,  998,  998,  635,  634,  821,  378,  633,
      632,  821,  631,  997,  997,  997,  630,  820, 1001, 1001,

     1001,  821,  378,  999,  999,  999,  629,  821, 1004, 1004,
     1004,  628,  378, 1000, 1000, 1000,  627,  820,  821, 1002,
     1002, 1002,  378, 1003, 1003, 1003,  626,  820,  378,  821,
      625,  624,  378,  619,  617,  821, 1005, 1005, 1005, 1006,
     1006, 1006,  616,  820,  500,  378,  821,  499,  378,  610,
      607,  821, 1007, 1007, 1007, 1008, 1008, 1008, 1009, 1009,
     1009,  821,  820,  485,  378,  605,  821,  378, 1010, 1010,
     1010, 1011, 1011, 1011,  499,  604,  821, 1012, 1012, 1012,
      378,  820, 1013, 1013, 1013,  475,  378, 1014, 1014, 1014,
      602,  601,  821, 1015, 1015, 1015,  378,  820, 1016, 1016,

     1016,  599,  378,  499,  596,  821, 1017, 1017, 1017,  593,
      592,  821, 1019, 1019, 1019,  378, 1018, 1018, 1018,  591,
      820,  821, 1020, 1020, 1020,  378, 1022, 1022, 1022,  589,
      821,  378, 1021, 1021, 1021,  821,  820,  499, 1023, 1023,
     1023,  378, 1025, 1025, 1025,  587,  821,  378, 1024, 1024,
     1024,  821,  820, 1026, 1026, 1026,  585,  378,  584, 1027,
     1027, 1027,  378,  820,  583,  821,  582,  581,  378,  821,
     1028, 1028, 1028, 1029, 1029, 1029, 1031, 1031, 1031,  821,
      580,  579,  378,  578,  577,  821,  576, 1030, 1030, 1030,
      575,  820, 1034, 1034, 1034,  821,  378, 1032, 1032, 1032,

      564,  821, 1037, 1037, 1037,  424,  378, 1033, 1033, 1033,
      559,  820,  821, 1035, 1035, 1035,  378, 1036, 1036, 1036,
      420,  820,  378,  821,  558,  557,  378,  412,  411,  821,
     1038, 1038, 1038, 1039, 1039, 1039,  410,  820,  411,  378,
      821,  556,  378,  401,  397,  821, 1040, 1040, 1040, 1041,
     1041, 1041, 1042, 1042, 1042,  821,  820,  546,  378,  545,
      821,  378, 1043, 1043, 1043, 1044, 1044, 1044,  380,  539,
      821, 1045, 1045, 1045,  378,  820, 1046, 1046, 1046,  528,
      378, 1047, 1047, 1047,  523,  520,  821, 1048, 1048, 1048,
      378,  820, 1049, 1049, 1049,  518,  378,  516,  515,  821,

     1050, 1050, 1050,  514,  513,  821, 1052, 1052, 1052,  378,
     1051, 1051, 1051,  509,  820,  821, 1053, 1053, 1053,  378,
     1055, 1055, 1055,  506,  821,  378, 1054, 1054, 1054,  821,
      820,  505, 1056, 1056, 1056,  378, 1058, 1058, 1058,  500,
      821,  378, 1057, 1057, 1057,  821,  820, 1059, 1059, 1059,
      499,  378,  498, 1060, 1060, 1060,  378,  820,  497,  821,
      342,  342,  378,  821, 1061, 1061, 1061, 1062, 1062, 1062,
     1064, 1064, 1064,  821,  342,  488,  378,  342,  342,  821,
      342, 1063, 1063, 1063,  479,  820, 1067, 1067, 1067,  821,
      378, 1065, 1065, 1065,  342,  821, 1070, 1070, 1070,  477,

      378, 1066, 1066, 1066,  342,  820,  821, 1068, 1068, 1068,
      378, 1069, 1069, 1069,  473,  820,  378,  821,  469,  466,
      378,  457,  453,  821, 1071, 1071, 1071, 1072, 1072, 1072,
      452,  820,  450,  378,  821,  448,  378,  446,  444,  821,
     1073, 1073, 1073, 1074, 1074, 1074, 1075, 1075, 1075,  821,
      820,  433,  378,  430,  821,  378, 1076, 1076, 1076, 1077,
     1077, 1077,  342,  342,  821, 1078, 1078, 1078,  378,  820,
     1079, 1079, 1079,  342,  378, 1080, 1080, 1080,  420,  417,
      821, 1081, 1081, 1081,  378,  820, 1082, 1082, 1082,  413,
      378,  412,  411,  821, 1083, 1083, 1083,  410,  397,  821,

     1085, 1085, 1085,  378, 1084, 1084, 1084,  397,  820,  821,
     1086, 1086, 1086,  378, 1088, 1088, 1088,  397,  821,  378,
     1087, 1087, 1087,  821,  820,  397, 1089, 1089, 1089,  378,
     1091, 1091, 1091,  386,  821,  378, 1090, 1090, 1090,  821,
      820, 1092, 1092, 1092,  342,  378,  376, 1093, 1093, 1093,
      378,  820,  373,  821,  369,  368,  378,  821, 1094, 1094,
     1094, 1095, 1095, 1095, 1097, 1097, 1097,  821,  365,  342,
      378,  359,  358,  821,  352, 1096, 1096, 1096,  351,  820,
     1100, 1100, 1100,  821,  378, 1098, 1098, 1098,  342,  821,
     1103, 1103, 1103,  342,  378, 1099, 1099, 1099,  342,  820,

      821, 1101, 1101, 1101,  378, 1102, 1102, 1102, 1262,  820,
      378,  821, 1262, 1262,  378, 1262, 1262,  821, 1104, 1104,
     1104, 1105, 1105, 1105, 1262,  820, 1262,  378,  821, 1262,
      378, 1262, 1262,  821, 1106, 1106, 1106, 1107, 1107, 1107,
     1108, 1108, 1108,  821,  820, 1262,  378, 1262,  821,  378,
     1109, 1109, 1109, 1110, 1110, 1110, 1262, 1262,  821, 1111,
     1111, 1111,  378,  820, 1112, 1112, 1112, 1262,  378, 1113,
     1113, 1113, 1262, 1262,  821, 1114, 1114, 1114,  378,  820,
     1115, 1115, 1115, 1262,  378, 1262, 1262,  821, 1116, 1116,
     1116, 1262, 1262,  821, 1118, 1118, 1118,  378, 1117, 1117,

     1117, 1262,  820,  821, 1119, 1119, 1119,  378, 1121, 1121,
     1121, 1262,  821,  378, 1120, 1120, 1120,  821,  820, 1262,
     1122, 1122, 1122,  378, 1124, 1124, 1124, 1262,  821,  378,
     1123, 1123, 1123,  821,  820, 1125, 1125, 1125, 1262,  378,
     1262, 1126, 1126, 1126,  378,  820, 1262,  821, 1262, 1262,
      378,  821, 1127, 1127, 1127, 1128, 1128, 1128, 1130, 1130,
     1130,  821, 1262, 1262,  378, 1262, 1262,  821, 1262, 1129,
     1129, 1129, 1262,  820, 1133, 1133, 1133,  821,  378, 1131,
     1131, 1131, 1262,  821, 1136, 1136, 1136, 1262,  378, 1132,
     1132, 1132, 1262,  820,  821, 1134, 1134, 1134,  378, 1135,

     1135, 1135, 1262,  820,  378,  821, 1262, 1262,  378, 1262,
     1262,  821, 1137, 1137, 1137, 1138, 1138, 1138, 1262,  820,
     1262,  378,  821, 1262,  378, 1262, 1262,  821, 1139, 1139,
     1139, 1140, 1140, 1140, 1141, 1141, 1141,  821,  820, 1262,
      378, 1262,  821,  378, 1142, 1142, 1142, 1143, 1143, 1143,
     1262, 1262,  821, 1144, 1144, 1144,  378,  820, 1145, 1145,
     1145, 1262,  378, 1146, 1146, 1146, 1262, 1262,  821, 1147,
     1147, 1147,  378,  820, 1148, 1148, 1148, 1262,  378, 1262,
     1262,  821, 1149, 1149, 1149, 1262, 1262,  821, 1151, 1151,
     1151,  378, 1150, 1150, 1150, 1262,  820,  821, 1152, 1152,

     1152,  378, 1154, 1154, 1154, 1262,  821,  378, 1153, 1153,
     1153,  821,  820, 1262, 1155, 1155, 1155,  378, 1157, 1157,
     1157, 1262,  821,  378, 1156, 1156, 1156,  821,  820, 1158,
     1158, 1158, 1262,  378, 1262, 1159, 1159, 1159,  378,  820,
     1262,  821, 1262, 1262,  378,  821, 1160, 1160, 1160, 1161,
     1161, 1161, 1163, 1163, 1163,  821, 1262, 1262,  378, 1262,
     1262,  821, 1262, 1162, 1162, 1162, 1262,  820, 1166, 1166,
     1166,  821,  378, 1164, 1164, 1164, 1262,  821, 1169, 1169,
     1169, 1262,  378, 1165, 1165, 1165, 1262,  820,  821, 1167,
     1167, 1167,  378, 1168, 1168, 1168, 1262,  820,  378,  821,

     1262, 1262,  378, 1262, 1262,  821, 1170, 1170, 1170, 1262,
      820, 1171, 1171, 1171, 1262,  378,  821, 1262, 1172, 1172,
     1172,  821,  820, 1173, 1173, 1173, 1262,  378, 1174, 1174,
     1174,  821,  820, 1175, 1175, 1175,  821,  378, 1176, 1176,
     1176, 1262,  820, 1177, 1177, 1177,  821,  378, 1178, 1178,
     1178, 1262,  820, 1179, 1179, 1179, 1262,  378, 1262,  821,
     1262, 1180, 1180, 1180,  821,  820, 1181, 1181, 1181, 1262,
      378,  821, 1182, 1182, 1182, 1262,  821, 1183, 1183, 1183,
     1262,  821, 1184, 1184, 1184, 1262,  821, 1185, 1185, 1185,
     1262,  821, 1186, 1186, 1186, 1262,  821, 1187, 1187, 1187,

     1262,  821, 1188, 1188, 1188, 1262,  821, 1189, 1189, 1189,
     1190, 1190, 1190, 1262,  821, 1191, 1191, 1191, 1262,  821,
     1192, 1192, 1192, 1262, 1262,  821, 1193, 1193, 1193, 1262,
      821, 1194, 1194, 1194, 1262,  821, 1195, 1195, 1195, 1262,
      821, 1196, 1196, 1196, 1262,  821, 1197, 1197, 1197, 1262,
      821, 1198, 1198, 1198, 1262,  821, 1199, 1199, 1199, 1262,
      821, 1262, 1262,  821, 1200, 1200, 1200, 1262,  821, 1201,
     1201, 1201, 1262,  821, 1202, 1202, 1202, 1262, 1262,  821,
     1203, 1203, 1203, 1262,  821, 1204, 1204, 1204, 1262,  821,
     1205, 1205, 1205, 1262,  821, 1206, 1206, 1206, 1262,  821,

     1207, 1207, 1207, 1262,  821, 1208, 1208, 1208, 1262,  821,
     1209, 1209, 1209, 1210, 1210, 1210, 1262,  821, 1211, 1211,
     1211, 1262,  821, 1212, 1212, 1212, 1262,  821, 1213, 1213,
     1213, 1262, 1262,  821, 1214, 1214, 1214, 1262,  821, 1215,
     1215, 1215, 1262,  821, 1216, 1216, 1216, 1262,  821, 1217,
     1217, 1217, 1262,  821, 1218, 1218, 1218, 1262,  821, 1219,
     1219, 1219, 1262,  821, 1262, 1262,  821, 1220, 1220, 1220,
     1262,  821, 1221, 1221, 1221, 1262,  821, 1222, 1222, 1222,
     1262,  821, 1223, 1223, 1223, 1262, 1262,  821, 1224, 1224,
     1224, 1262,  821, 1225, 1225, 1225, 1262,  821, 1226, 1226,

     1226, 1262,  821, 1227, 1227, 1227, 1262,  821, 1228, 1228,
     1228, 1262,  821, 1229, 1229, 1229, 1230, 1230, 1230, 1262,
      821, 1231, 1231, 1231, 1262,  821, 1232, 1232, 1232, 1262,
      821, 1233, 1233, 1233, 1262,  821, 1234, 1234, 1234, 1262,
     1262,  821, 1235, 1235, 1235, 1262,  821, 1236, 1236, 1236,
     1262,  821, 1237, 1237, 1237, 1262,  821, 1238, 1238, 1238,
     1262,  821, 1239, 1239, 1239, 1262,  821, 1262, 1262,  821,
     1240, 1240, 1240, 1262,  821, 1241, 1241, 1241, 1262,  821,
     1242, 1242, 1242, 1262,  821, 1243, 1243, 1243, 1262,  821,
     1244, 1244, 1244, 1262, 1262,  821, 1245, 1245, 1245, 1262,

      821, 1246, 1246, 1246, 1262,  821, 1247, 1247, 1247, 1262,
      821, 1248, 1248, 1248, 1262,  821, 1249, 1249, 1249, 1250,
     1250, 1250, 1262,  821, 1251, 1251, 1251, 1262,  821, 1252,
     1252, 1252, 1262,  821, 1253, 1253, 1253, 1262,  821, 1254,
     1254, 1254, 1262,  821, 1255, 1255, 1255, 1262, 1262,  821,
     1256, 1256, 1256, 1262,  821, 1257, 1257, 1257, 1262,  821,
     1258, 1258, 1258, 1262,  821, 1259, 1259, 1259, 1262,  821,
     1262, 1262,  821, 1260, 1260, 1260, 1262,  821, 1261, 1261,
     1261, 1262,  821, 1185, 1185, 1185, 1262,  821, 1262, 1262,
     1262, 1262,  821, 1262, 1262, 1262, 1262,  821, 1262, 1262,

     1262, 1262, 1262,  821, 1262, 1262, 1262, 1262,  821, 1262,
     1262, 1262, 1262,  821, 1262, 1262, 1262, 1262,  821, 1262,
     1262, 1262, 1262, 1262, 1262, 1262,  821, 1262, 1262, 1262,
     1262,  821, 1262, 1262, 1262, 1262,  821,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  366,  366,
      366, 1262,  366,  366, 1262,  366, 1262,  366,  366,  366,
      366, 1262,  366,  366,  366,  366,  366,  366,  366,  367,

      367,  367, 1262,  367,  367,  367,  367, 1262,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      370,  370,  370, 1262,  370,  370, 1262,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370, 1262,
      370,  374,  374,  374, 1262,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  375,  375,  375, 1262,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  379,  379,  379, 1262, 1262, 1262, 1262,
      379, 1262, 1262, 1262, 1262,  379, 1262, 1262, 1262,  379,

      383,  383,  383, 1262, 1262,  383, 1262,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383, 1262,
      383,  387,  387,  387, 1262,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  388,  388,  388, 1262,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  395, 1262, 1262, 1262, 1262, 1262, 1262,
      395, 1262, 1262, 1262, 1262,  395, 1262, 1262, 1262,  395,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396, 1262,

      396,  406,  406, 1262, 1262, 1262, 1262, 1262,  406, 1262,
     1262, 1262, 1262,  406, 1262, 1262, 1262,  406,  406,  416,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,  416,
     1262,  416, 1262, 1262, 1262,  416,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  429, 1262,  429,
     1262,  429,  429,  429,  429,  429,  429,  429, 1262,  429,
     1262,  429,  429,  429, 1262,  429,  445,  445,  445, 1262,
      445,  445,  445,  445,  445,  445,  445, 1262,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  449,  449,  449,

     1262,  449,  449,  449,  449,  449,  449,  449, 1262,  449,
      449,  449,  449,  449,  449, 1262,  449,  449,  458,  458,
      458, 1262,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458, 1262,  458, 1262,  458,  459,
      459,  459, 1262,  459,  459,  459,  459,  459,  459,  459,
      459,  459, 1262,  459,  459,  459, 1262,  459, 1262,  459,
      460, 1262,  460, 1262,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460, 1262,  460, 1262,
      460,  465, 1262,  465, 1262,  465,  465,  465,  465,  465,
      465,  465, 1262,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  470, 1262,  470, 1262,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  483,  483,  483, 1262,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  487,  487,  487, 1262,  487,  487,
      487,  487, 1262,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  492,  492,  492, 1262,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  493, 1262, 1262,  493,
     1262,  493, 1262,  493,  493, 1262,  493, 1262,  493, 1262,

     1262, 1262,  493,  494,  494,  494, 1262,  494, 1262,  494,
      494,  494,  494,  494, 1262,  494, 1262,  494,  494,  494,
     1262,  494, 1262,  494,  501, 1262, 1262,  501,  501,  501,
     1262, 1262,  501, 1262,  501,  501,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  502,  502,  502,
     1262,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  517,  517,
      517, 1262,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  519,

      519,  519, 1262,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      366,  366,  366, 1262,  366,  366, 1262,  366, 1262,  366,
      366,  366,  366, 1262,  366,  366,  366,  366,  366,  366,
      366,  527,  527,  527, 1262,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
     1262,  527,  529,  529,  529, 1262,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  370,  370,  370, 1262,  370,  370, 1262,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370, 1262,  370,  532,  532,  532, 1262,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  535,  535,  535, 1262,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  540,  540,  540, 1262,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  379,  379,  379,
     1262, 1262, 1262, 1262,  379, 1262, 1262, 1262, 1262,  379,
     1262, 1262, 1262,  379,  383,  383,  383, 1262, 1262,  383,
     1262,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383, 1262,  383,  388,  388,  388, 1262,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  395, 1262, 1262, 1262,
     1262, 1262, 1262,  395, 1262, 1262, 1262, 1262,  395, 1262,
     1262, 1262,  395,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396, 1262,  396,  406,  406, 1262, 1262, 1262, 1262,
     1262,  406, 1262, 1262, 1262, 1262,  406, 1262, 1262, 1262,
      406,  406,  416, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262,  416, 1262,  416, 1262, 1262, 1262,  416,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      429, 1262,  429, 1262,  429,  429,  429,  429,  429,  429,
      429, 1262,  429, 1262,  429,  429,  429, 1262,  429,  445,
      445,  445, 1262,  445,  445,  445,  445,  445,  445,  445,
     1262,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      449,  449,  449, 1262,  449,  449,  449,  449,  449,  449,
      449, 1262,  449,  449,  449,  449,  449,  449, 1262,  449,
      449,  458,  458,  458, 1262,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458, 1262,  458,

     1262,  458,  459,  459,  459, 1262,  459,  459,  459,  459,
      459,  459,  459,  459,  459, 1262,  459,  459,  459, 1262,
      459, 1262,  459,  460, 1262,  460, 1262,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
     1262,  460, 1262,  460,  465, 1262,  465, 1262,  465,  465,
      465,  465,  465,  465,  465, 1262,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  470, 1262,  470, 1262,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  606,  606,  606, 1262,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606, 1262,  606,  608,  608,  608,
     1262,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  493, 1262,
     1262,  493, 1262,  493, 1262,  493,  493, 1262,  493, 1262,
      493, 1262, 1262, 1262,  493,  494,  494,  494, 1262,  494,
     1262,  494,  494,  494,  494,  494, 1262,  494, 1262,  494,
      494,  494, 1262,  494, 1262,  494,  502,  502,  502, 1262,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  618,  618,  618,
     1262,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  517,  517,
      517, 1262,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  519,
      519,  519, 1262,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      640,  640,  640, 1262,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640, 1262,
      640,  366,  366,  366, 1262,  366,  366, 1262,  366, 1262,
      366,  366,  366,  366, 1262,  366,  366,  366,  366,  366,
      366,  366,  532,  532,  532, 1262,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  533,  533, 1262,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  535,  535,  535, 1262,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  536,  536,  536, 1262,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  370,  370,  370, 1262,
      370,  370, 1262,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370, 1262,  370,  379,  379,  379,

     1262, 1262, 1262, 1262,  379, 1262, 1262, 1262, 1262,  379,
     1262, 1262, 1262,  379,  383,  383,  383, 1262, 1262,  383,
     1262,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383, 1262,  383,  388,  388,  388, 1262,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396, 1262,  396,  429, 1262,  429,
     1262,  429,  429,  429,  429,  429,  429,  429, 1262,  429,
     1262,  429,  429,  429, 1262,  429,  445,  445,  445, 1262,

      445,  445,  445,  445,  445,  445,  445, 1262,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  682,  682,  682,
     1262,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682, 1262,  682,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  712,
      712,  712, 1262,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712, 1262,  712,
      748,  748,  748, 1262,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748, 1262,

      748,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  855, 1262, 1262, 1262,  855, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262,  855, 1262, 1262,  855,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899, 1262,  899,  899,  899, 1262,  899,
      899,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908, 1262,  908,  908,  908, 1262,

      908,  908,   73, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262
    } ;

static yyconst flex_int16_t yy_chk[6263] =
    {   0,
        0,    1,  159,    1,    1,    2,    0,    2,    2,    0,
        3,  159,    3,    3,   78,   87,   95,    1,   78,   87,
       95,    2,   83,  141,  141,    1,    3,   83,    9,    2,
        9,    9,  109,    9,    3,  121,  109,    9,    0,  121,
       10,    0,   10,   10,    9,   10,  128,   83,   83,   10,
      128,  100,    9,  100,  166,  166,   10,   21,    1,   21,
       21, 1185,    2,   29,   10,   29,   29,    3,    4,    4,
        4,    4,  138,   21,    4,  112,  138,  112, 1167,   29,
      169,   21,   89,  153,    4,    9,   21,   29,  154,  149,
      169,   89,    4,  149,    4,    4,  101,   10,   89,   89,

       89,  153,  164,  101,  101,  155,  154,   89,   89,  140,
      140,  140,  164,  421,   21,  184,  164,  178,  140,  184,
       29,  421,  178,  155,  968,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   11,  156,   11,   11,   12,   11,
       12,   12,  156,   12,  199,  174,  156,  157,  165,  199,
       11,  158,  418,  156,   12,  168,  168,  418,   11,  174,
      188,  188,   12,   11,  168,  157,  157,   12,  194,  158,
      165,  203,  194,  211,  221,  203,  229,  211,  221,  962,
      229,  234,  422,  168,  241,  234,  235,  235,  241,  250,

      243,   11,  243,  250,  422,   12,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   15,  237,   15,   15,   16,
       15,   16,   16,  953,   16,  240,  399,  142,  142,  142,
      244,   15,  237,  256,  263,   16,  142,  256,  263,   15,
      399,  240,  242,   16,   15,  398,  244,   17,   16,   17,

       17,   18,   17,   18,   18,  398,   18,  273,  242,  266,
      266,  273,  952,   17,  284,  292,  242,   18,  284,  292,
       17,   17,   15,  300,   18,   18,   16,  300,  142,  302,
      302,  312,  320,  328,  336,  312,  320,  328,  336,  347,
      348,  348,  353,  363,  368,  368,  431,  376,  347,  495,
      431,  353,  363,  951,   17,  376,  376,  495,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   22,  388,
       22,   22,   30,   30,   30,   30,  344,  393,   30,  942,
      355,  344,  346,  355,   22,  408,  393,  388,   30,  355,
      458,  346,   22,  372,  349,  408,   30,   22,  346,  346,
      346,  344,  344,  349,  372,  395,  458,  346,  346,  556,
      349,  349,  349,  355,  395,  626,  414,  372,  626,  349,
      349,  488,  488,  355,  626,   22,   23,   23,  556,   30,
      414,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   31,  390,   31,   31,   32,  427,   32,   32,
      390,   33,  427,   33,   33,  502,  502,   34,   31,   34,
       34,  390,   32,  466,  456,  941,   31,   33,  466,   47,
       32,   47,   47,   34,  496,   33,   37,  371,   37,   37,
       43,   34,   43,   43,  371,   47,  496,  456,   37,  403,
      403,  637,   37,   47,  940,   38,   43,   38,   38,   31,
       37,  371,  391,   32,   43,   43,  403,   38,   33,   43,
      549,   38,  456,  391,   34,   35,  416,   35,   35,   38,

      391,  532,   44,  550,   44,   44,   47,   35,  549,  637,
      416,   35,  575,   37,  377,  377,  377,   43,   44,   35,
       35,  550,  575,  377,   35,  532,   44,   44,  379,  379,
      379,   44,   38,   45,  530,   45,   45,  379,   46,  939,
       46,   46,  530,  530,   48,   45,   48,   48,  650,   45,
       46,   35,   35,   36,   46,   36,   36,   45,  938,   44,
       48,  365,   46,  534,  365,   36,  650,  535,   48,   36,
      365,  406,  406,  537,  534,  542,  576,   36,   36,  552,
      406,  937,   36,  542,  542,  548,  594,  534,  927,  686,
       45,  535,  576,  552,  365,   46,  548,  537,  686,  406,

      926,   48,  594,  548,  365,  555,  555,  555,  925,   36,
       36,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       41,  924,   41,   41,  636,  597,   55,  636,   55,   55,
      597,   55,   41,  636,  690,   56,   41,   56,   56,  643,
       56,  568,   55,  690,   41,   41,  504,  504,  504,   41,

       55,   56,  656,  689,  689,   55,  923,  701,   57,   56,
       57,   57,  568,  643,   56,  504,  701,   57,  656,   61,
      795,   61,   61,  698,   57,  763,   41,   41,   42,  708,
       42,   42,   57,   55,  763,   61,  795,   57,  568,  816,
       42,  922,   56,   61,   42,  543,  543,  543,   61,  504,
      609,  921,   42,   42,  543,  642,  920,   42,  609,  609,
      646,  698, 1284,  642,  642,   57, 1284,  708,  646,  646,
      647,  647,  647,  667,  667,  667,   61,  753,  753,  647,
      720,  720,  720,  816,   42,   42,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   53,  684,  919,  382,  382,  382,
      760,  918,  711,  684,  684,  711,  382,  914, 1285,   53,
       53,  711, 1285,  907,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   58,  760,   58,
       58,   62,  906,   62,   62,  382,   58,  544,  544,  544,
      676,  676,  905,   58,  765,  676,  544,   62,  812,  676,
      676,   58,  904,  765,  676,   62,   58,  812,  676,  676,
       62,  620,  620,  620,  619,  619,  619,  903,  621,  621,
      621,  544,  848,  881,  619,  728,  728,  728,  902,  901,

      620,  848,  881,  619,   58,   59,   59,  621,   62,  900,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   63,  620,   63,   63,  619,   63,  898,
      897,  621,   63,   63,   63,  716,  716,  716,   65,   63,
       65,   65,  811,   65,  716,  811,  896,   63,   63,  895,
       66,  811,   66,   66,   65,   66,  622,  622,  622,  691,
      691,  691,   65,  687,  687,  687,   66,   65,  648,  648,
      648,  894, 1299,  687,   66,  622, 1299,  648,  691,   66,
       63,   64,  687,   64,   64,  890,   64,  717,  717,  717,

       64,   64,   64,  880,  879,   65,  717,   64,  730,  730,
      730,  746,  746,  746,  766,   64,   64,   66,  766,  622,
      878, 1309,  691,  877,  648, 1309,  687,  771,  771,  771,
      775,  775,  775,  876,  766,  875,  771,  783,  783,  783,
      717,  785,  785,  785,  802,  802,  802,  874,   64,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   71,  814,
       71,   71,   71,  814,  727,  727,  727,  831,  831,  831,
       71,  688,  688,  688,   71,  873,  692,  692,  692,  814,
      872,  688,   71,   71,  693,  693,  693,   71,  871,  869,
      688,  751,  751,  751,  868,  692,  773,  773,  773,  867,
      866,  751,  865,  693,  752,  752,  752,  755,  755,  755,
      751,  756,  756,  756,  752,   71,   72,  727,   72,   72,
       72,  864,  817,  752,  688,  817,  755,  863,   72,  692,
      756,  817,   72,  757,  757,  757,  862,  693, 1310, 1311,
       72,   72, 1310, 1311,  751,   72,  772,  772,  772,  773,

      772,  860,  757,  859, 1313,  772,  856,  752, 1313,  849,
      755,  861,  861,  861,  756, 1321,  818,  818,  818, 1321,
      805,  805,  805,   72,  213,  818,  847, 1324,  213,  846,
      805, 1324,  213,  213,  213,  845,  757,  213,  844,  805,
      843,  213,  213,  893,  893,  893,  213,  893,  842,  772,
      213,  213,  369,  841,  857,  857,  857,  369,  369,  369,
      840, 1339,  369,  857,  369, 1339,  839,  838,  837,  369,
      369,  369,  373,  805,  807,  807,  807,  373,  373,  373,
      836,  835,  373,  834,  373,  891,  891,  891,  833,  373,
      373,  373,  386,  807,  891,  832,  893,  386,  386,  386,

      830,  829,  386,  828,  386,  917,  917,  917,  827,  386,
      386,  386,  392,  392,  808,  808,  808,  392,  392,  392,
      826, 1349,  392,  825,  392, 1349,  824,  807,  823,  392,
      392,  392,  400,  808,  400,  822,  809,  809,  809,  400,
      400,  400,  820,  810,  400,  804,  400,  915,  915,  915,
      803,  400,  400,  400,  433,  809,  915,  801,  917,  433,
      433,  433,  800,  799,  433, 1350,  433,  808,  798, 1350,
      797,  433,  433,  433,  434,  434, 1351,  434, 1352,  434,
     1351, 1359, 1352,  434,  434, 1359, 1362, 1383,  434,  809,
     1362, 1383,  434,  434,  448,  796,  852,  852,  852,  448,

      448,  448,  794,  793,  448,  792,  448,  791,  806,  806,
      806,  448,  448,  448,  452,  852,  790,  789,  806,  452,
      452,  452,  788,  787,  452,  786,  452,  806,  853,  853,
      853,  452,  452,  452,  463,  782,  781,  780,  463,  779,
      854,  854,  854,  463,  463,  463,  778,  853,  463,  852,
      463,  934,  934,  934,  777,  463,  463,  463,  469,  854,
      934,  806,  776,  469,  469,  469,  774,  770,  469,  769,
      469,  948,  948,  948,  768,  469,  469,  469,  473,  767,
      948,  853,  761,  473,  473,  473,  759,  758,  473,  750,
      473,  749,  748,  854,  747,  473,  473,  473,  497,  745,

      959,  959,  959,  497,  497,  497,  744,  743,  497,  959,
      497,  742,  741,  740,  739,  497,  497,  497,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  819,  819,  819,  738,
      819,  850,  850,  850,  737,  819,  851,  851,  851,  736,
      735,  850,  734,  858,  858,  858,  851,  858,  733,  732,
      850,  731,  858,  729,  726,  851,  884,  884,  884,  885,
      885,  885,  886,  886,  886,  725,  884,  724,  723,  885,
      722,  887,  887,  887,  721,  884,  719,  718,  885,  819,
      715,  886,  713,  712,  850,  888,  888,  888,  709,  851,

      887,  892,  892,  892,  706,  892,  858,  909,  909,  909,
      892,  910,  910,  910,  888,  705,  704,  909,  703,  884,
      702,  910,  885,  699,  695,  886,  909,  911,  911,  911,
      910,  912,  912,  912,  887,  694,  913,  913,  913,  685,
      916,  916,  916,  682,  916,  681,  911,  679,  888,  916,
      912,  928,  928,  928,  892,  913,  929,  929,  929,  677,
      909,  928,  675,  674,  910,  673,  929,  930,  930,  930,
      928,  931,  931,  931,  672,  929,  932,  932,  932,  671,
      911,  936,  936,  936,  912,  670,  930,  669,  668,  913,
      931,  666,  665,  916,  664,  932,  935,  935,  935,  663,

      935,  950,  950,  950,  928,  935,  943,  943,  943,  929,
      662,  944,  944,  944,  661,  660,  943,  945,  945,  945,
      930,  944,  659,  658,  931,  943,  946,  946,  946,  932,
      944,  947,  947,  947,  936,  655,  945,  949,  949,  949,
      654,  949,  954,  954,  954,  946,  949,  651,  640,  935,
      947,  639,  954,  638,  950,  955,  955,  955,  634,  943,
      633,  954,  632,  631,  944,  955,  956,  956,  956,  630,
      945,  961,  961,  961,  955,  957,  957,  957,  629,  946,
      958,  958,  958,  628,  947,  956,  625,  960,  960,  960,
      949,  960,  624,  618,  957,  954,  960,  616,  612,  958,

      610,  963,  963,  963,  964,  964,  964,  608,  955,  606,
      604,  963,  601,  596,  964,  592,  965,  965,  965,  956,
      963,  591,  589,  964,  961,  965,  584,  583,  957,  582,
      966,  966,  966,  958,  966,  967,  967,  967,  581,  966,
      960,  969,  969,  969,  970,  970,  970,  580,  970,  579,
      969,  578,  577,  970,  963,  574,  573,  964,  971,  971,
      971,  972,  972,  972,  973,  973,  973,  572,  973,  571,
      972,  570,  569,  973,  974,  974,  974,  975,  975,  975,
      976,  976,  976,  966,  976,  567,  975,  566,  967,  976,
      977,  977,  977,  978,  978,  978,  564,  970,  561,  979,

      979,  979,  978,  979,  980,  980,  980,  559,  979,  558,
      554,  971,  981,  981,  981,  553,  545,  973,  983,  983,
      983,  981,  982,  982,  982,  541,  982,  974,  984,  984,
      984,  982,  540,  976,  986,  986,  986,  984,  985,  985,
      985,  529,  985,  977,  987,  987,  987,  985,  989,  989,
      989,  527,  979,  987,  988,  988,  988,  980,  988,  990,
      990,  990,  526,  988,  525,  991,  991,  991,  990,  991,
      523,  983,  522,  521,  991,  982,  992,  992,  992,  993,
      993,  993,  995,  995,  995,  518,  516,  986,  993,  515,
      514,  985,  513,  994,  994,  994,  512,  994,  998,  998,

      998,  989,  994,  996,  996,  996,  511,  988, 1001, 1001,
     1001,  509,  996,  997,  997,  997,  508,  997,  991,  999,
      999,  999,  997, 1000, 1000, 1000,  507, 1000,  999,  992,
      506,  505, 1000,  503,  499,  995, 1002, 1002, 1002, 1003,
     1003, 1003,  498, 1003,  491, 1002,  994,  490, 1003,  489,
      487,  998, 1004, 1004, 1004, 1005, 1005, 1005, 1006, 1006,
     1006, 1001, 1006,  486, 1005,  482,  997, 1006, 1007, 1007,
     1007, 1008, 1008, 1008,  481,  477, 1000, 1009, 1009, 1009,
     1008, 1009, 1010, 1010, 1010,  476, 1009, 1011, 1011, 1011,
      472,  471, 1003, 1012, 1012, 1012, 1011, 1012, 1013, 1013,

     1013,  468, 1012,  467,  464, 1004, 1014, 1014, 1014,  462,
      461, 1006, 1016, 1016, 1016, 1014, 1015, 1015, 1015,  457,
     1015, 1007, 1017, 1017, 1017, 1015, 1019, 1019, 1019,  455,
     1009, 1017, 1018, 1018, 1018, 1010, 1018,  454, 1020, 1020,
     1020, 1018, 1022, 1022, 1022,  451, 1012, 1020, 1021, 1021,
     1021, 1013, 1021, 1023, 1023, 1023,  447, 1021,  444, 1024,
     1024, 1024, 1023, 1024,  443, 1016,  442,  441, 1024, 1015,
     1025, 1025, 1025, 1026, 1026, 1026, 1028, 1028, 1028, 1019,
      440,  439, 1026,  438,  437, 1018,  436, 1027, 1027, 1027,
      435, 1027, 1031, 1031, 1031, 1022, 1027, 1029, 1029, 1029,

      432, 1021, 1034, 1034, 1034,  425, 1029, 1030, 1030, 1030,
      420, 1030, 1024, 1032, 1032, 1032, 1030, 1033, 1033, 1033,
      419, 1033, 1032, 1025,  415,  413, 1033,  412,  411, 1028,
     1035, 1035, 1035, 1036, 1036, 1036,  410, 1036,  409, 1035,
     1027,  407, 1036,  402,  396, 1031, 1037, 1037, 1037, 1038,
     1038, 1038, 1039, 1039, 1039, 1034, 1039,  385, 1038,  384,
     1030, 1039, 1040, 1040, 1040, 1041, 1041, 1041,  381,  375,
     1033, 1042, 1042, 1042, 1041, 1042, 1043, 1043, 1043,  367,
     1042, 1044, 1044, 1044,  364,  361, 1036, 1045, 1045, 1045,
     1044, 1045, 1046, 1046, 1046,  360, 1045,  359,  358, 1037,

     1047, 1047, 1047,  357,  356, 1039, 1049, 1049, 1049, 1047,
     1048, 1048, 1048,  354, 1048, 1040, 1050, 1050, 1050, 1048,
     1052, 1052, 1052,  352, 1042, 1050, 1051, 1051, 1051, 1043,
     1051,  351, 1053, 1053, 1053, 1051, 1055, 1055, 1055,  341,
     1045, 1053, 1054, 1054, 1054, 1046, 1054, 1056, 1056, 1056,
      340, 1054,  338, 1057, 1057, 1057, 1056, 1057,  337, 1049,
      329,  321, 1057, 1048, 1058, 1058, 1058, 1059, 1059, 1059,
     1061, 1061, 1061, 1052,  313,  309, 1059,  301,  293, 1051,
      285, 1060, 1060, 1060,  276, 1060, 1064, 1064, 1064, 1055,
     1060, 1062, 1062, 1062,  274, 1054, 1067, 1067, 1067,  267,

     1062, 1063, 1063, 1063,  264, 1063, 1057, 1065, 1065, 1065,
     1063, 1066, 1066, 1066,  257, 1066, 1065, 1058,  251,  249,
     1066,  236,  233, 1061, 1068, 1068, 1068, 1069, 1069, 1069,
      230, 1069,  228, 1068, 1060,  222, 1069,  220,  214, 1064,
     1070, 1070, 1070, 1071, 1071, 1071, 1072, 1072, 1072, 1067,
     1072,  212, 1071,  210, 1063, 1072, 1073, 1073, 1073, 1074,
     1074, 1074,  204,  195, 1066, 1075, 1075, 1075, 1074, 1075,
     1076, 1076, 1076,  185, 1075, 1077, 1077, 1077,  182,  175,
     1069, 1078, 1078, 1078, 1077, 1078, 1079, 1079, 1079,  173,
     1078,  172,  171, 1070, 1080, 1080, 1080,  170,  167, 1072,

     1082, 1082, 1082, 1080, 1081, 1081, 1081,  163, 1081, 1073,
     1083, 1083, 1083, 1081, 1085, 1085, 1085,  161, 1075, 1083,
     1084, 1084, 1084, 1076, 1084,  160, 1086, 1086, 1086, 1084,
     1088, 1088, 1088,  150, 1078, 1086, 1087, 1087, 1087, 1079,
     1087, 1089, 1089, 1089,  139, 1087,  137, 1090, 1090, 1090,
     1089, 1090,  129, 1082,  122,  120, 1090, 1081, 1091, 1091,
     1091, 1092, 1092, 1092, 1094, 1094, 1094, 1085,  113,  110,
     1092,  103,  102, 1084,   99, 1093, 1093, 1093,   98, 1093,
     1097, 1097, 1097, 1088, 1093, 1095, 1095, 1095,   96, 1087,
     1100, 1100, 1100,   88, 1095, 1096, 1096, 1096,   79, 1096,

     1090, 1098, 1098, 1098, 1096, 1099, 1099, 1099,   73, 1099,
     1098, 1091,    0,    0, 1099,    0,    0, 1094, 1101, 1101,
     1101, 1102, 1102, 1102,    0, 1102,    0, 1101, 1093,    0,
     1102,    0,    0, 1097, 1103, 1103, 1103, 1104, 1104, 1104,
     1105, 1105, 1105, 1100, 1105,    0, 1104,    0, 1096, 1105,
     1106, 1106, 1106, 1107, 1107, 1107,    0,    0, 1099, 1108,
     1108, 1108, 1107, 1108, 1109, 1109, 1109,    0, 1108, 1110,
     1110, 1110,    0,    0, 1102, 1111, 1111, 1111, 1110, 1111,
     1112, 1112, 1112,    0, 1111,    0,    0, 1103, 1113, 1113,
     1113,    0,    0, 1105, 1115, 1115, 1115, 1113, 1114, 1114,

     1114,    0, 1114, 1106, 1116, 1116, 1116, 1114, 1118, 1118,
     1118,    0, 1108, 1116, 1117, 1117, 1117, 1109, 1117,    0,
     1119, 1119, 1119, 1117, 1121, 1121, 1121,    0, 1111, 1119,
     1120, 1120, 1120, 1112, 1120, 1122, 1122, 1122,    0, 1120,
        0, 1123, 1123, 1123, 1122, 1123,    0, 1115,    0,    0,
     1123, 1114, 1124, 1124, 1124, 1125, 1125, 1125, 1127, 1127,
     1127, 1118,    0,    0, 1125,    0,    0, 1117,    0, 1126,
     1126, 1126,    0, 1126, 1130, 1130, 1130, 1121, 1126, 1128,
     1128, 1128,    0, 1120, 1133, 1133, 1133,    0, 1128, 1129,
     1129, 1129,    0, 1129, 1123, 1131, 1131, 1131, 1129, 1132,

     1132, 1132,    0, 1132, 1131, 1124,    0,    0, 1132,    0,
        0, 1127, 1134, 1134, 1134, 1135, 1135, 1135,    0, 1135,
        0, 1134, 1126,    0, 1135,    0,    0, 1130, 1136, 1136,
     1136, 1137, 1137, 1137, 1138, 1138, 1138, 1133, 1138,    0,
     1137,    0, 1129, 1138, 1139, 1139, 1139, 1140, 1140, 1140,
        0,    0, 1132, 1141, 1141, 1141, 1140, 1141, 1142, 1142,
     1142,    0, 1141, 1143, 1143, 1143,    0,    0, 1135, 1144,
     1144, 1144, 1143, 1144, 1145, 1145, 1145,    0, 1144,    0,
        0, 1136, 1146, 1146, 1146,    0,    0, 1138, 1148, 1148,
     1148, 1146, 1147, 1147, 1147,    0, 1147, 1139, 1149, 1149,

     1149, 1147, 1151, 1151, 1151,    0, 1141, 1149, 1150, 1150,
     1150, 1142, 1150,    0, 1152, 1152, 1152, 1150, 1154, 1154,
     1154,    0, 1144, 1152, 1153, 1153, 1153, 1145, 1153, 1155,
     1155, 1155,    0, 1153,    0, 1156, 1156, 1156, 1155, 1156,
        0, 1148,    0,    0, 1156, 1147, 1157, 1157, 1157, 1158,
     1158, 1158, 1160, 1160, 1160, 1151,    0,    0, 1158,    0,
        0, 1150,    0, 1159, 1159, 1159,    0, 1159, 1163, 1163,
     1163, 1154, 1159, 1161, 1161, 1161,    0, 1153, 1166, 1166,
     1166,    0, 1161, 1162, 1162, 1162,    0, 1162, 1156, 1164,
     1164, 1164, 1162, 1165, 1165, 1165,    0, 1165, 1164, 1157,

        0,    0, 1165,    0,    0, 1160, 1168, 1168, 1168,    0,
     1168, 1169, 1169, 1169,    0, 1168, 1159,    0, 1170, 1170,
     1170, 1163, 1170, 1171, 1171, 1171,    0, 1170, 1172, 1172,
     1172, 1166, 1172, 1173, 1173, 1173, 1162, 1172, 1174, 1174,
     1174,    0, 1174, 1175, 1175, 1175, 1165, 1174, 1176, 1176,
     1176,    0, 1176, 1177, 1177, 1177,    0, 1176,    0, 1168,
        0, 1178, 1178, 1178, 1169, 1178, 1179, 1179, 1179,    0,
     1178, 1170, 1180, 1180, 1180,    0, 1171, 1181, 1181, 1181,
        0, 1172, 1182, 1182, 1182,    0, 1173, 1183, 1183, 1183,
        0, 1174, 1184, 1184, 1184,    0, 1175, 1186, 1186, 1186,

        0, 1176, 1187, 1187, 1187,    0, 1177, 1188, 1188, 1188,
     1189, 1189, 1189,    0, 1178, 1190, 1190, 1190,    0, 1179,
     1191, 1191, 1191,    0,    0, 1180, 1192, 1192, 1192,    0,
     1181, 1193, 1193, 1193,    0, 1182, 1194, 1194, 1194,    0,
     1183, 1195, 1195, 1195,    0, 1184, 1196, 1196, 1196,    0,
     1186, 1197, 1197, 1197,    0, 1187, 1198, 1198, 1198,    0,
     1188,    0,    0, 1189, 1199, 1199, 1199,    0, 1190, 1200,
     1200, 1200,    0, 1191, 1201, 1201, 1201,    0,    0, 1192,
     1202, 1202, 1202,    0, 1193, 1203, 1203, 1203,    0, 1194,
     1204, 1204, 1204,    0, 1195, 1205, 1205, 1205,    0, 1196,

     1206, 1206, 1206,    0, 1197, 1207, 1207, 1207,    0, 1198,
     1208, 1208, 1208, 1209, 1209, 1209,    0, 1199, 1210, 1210,
     1210,    0, 1200, 1211, 1211, 1211,    0, 1201, 1212, 1212,
     1212,    0,    0, 1202, 1213, 1213, 1213,    0, 1203, 1214,
     1214, 1214,    0, 1204, 1215, 1215, 1215,    0, 1205, 1216,
     1216, 1216,    0, 1206, 1217, 1217, 1217,    0, 1207, 1218,
     1218, 1218,    0, 1208,    0,    0, 1209, 1219, 1219, 1219,
        0, 1210, 1220, 1220, 1220,    0, 1211, 1221, 1221, 1221,
        0, 1212, 1222, 1222, 1222,    0,    0, 1213, 1223, 1223,
     1223,    0, 1214, 1224, 1224, 1224,    0, 1215, 1225, 1225,

     1225,    0, 1216, 1226, 1226, 1226,    0, 1217, 1227, 1227,
     1227,    0, 1218, 1228, 1228, 1228, 1229, 1229, 1229,    0,
     1219, 1230, 1230, 1230,    0, 1220, 1231, 1231, 1231,    0,
     1221, 1232, 1232, 1232,    0, 1222, 1233, 1233, 1233,    0,
        0, 1223, 1234, 1234, 1234,    0, 1224, 1235, 1235, 1235,
        0, 1225, 1236, 1236, 1236,    0, 1226, 1237, 1237, 1237,
        0, 1227, 1238, 1238, 1238,    0, 1228,    0,    0, 1229,
     1239, 1239, 1239,    0, 1230, 1240, 1240, 1240,    0, 1231,
     1241, 1241, 1241,    0, 1232, 1242, 1242, 1242,    0, 1233,
     1243, 1243, 1243,    0,    0, 1234, 1244, 1244, 1244,    0,

     1235, 1245, 1245, 1245,    0, 1236, 1246, 1246, 1246,    0,
     1237, 1247, 1247, 1247,    0, 1238, 1248, 1248, 1248, 1249,
     1249, 1249,    0, 1239, 1250, 1250, 1250,    0, 1240, 1251,
     1251, 1251,    0, 1241, 1252, 1252, 1252,    0, 1242, 1253,
     1253, 1253,    0, 1243, 1254, 1254, 1254,    0,    0, 1244,
     1255, 1255, 1255,    0, 1245, 1256, 1256, 1256,    0, 1246,
     1257, 1257, 1257,    0, 1247, 1258, 1258, 1258,    0, 1248,
        0,    0, 1249, 1259, 1259, 1259,    0, 1250, 1260, 1260,
     1260,    0, 1251, 1261, 1261, 1261,    0, 1252,    0,    0,
        0,    0, 1253,    0,    0,    0,    0, 1254,    0,    0,

        0,    0,    0, 1255,    0,    0,    0,    0, 1256,    0,
        0,    0,    0, 1257,    0,    0,    0,    0, 1258,    0,
        0,    0,    0,    0,    0,    0, 1259,    0,    0,    0,
        0, 1260,    0,    0,    0,    0, 1261, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,

     1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,

     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280,

     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1286, 1286,
     1286,    0, 1286, 1286,    0, 1286,    0, 1286, 1286, 1286,
     1286,    0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287,

     1287, 1287,    0, 1287, 1287, 1287, 1287,    0, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1288, 1288, 1288,    0, 1288, 1288,    0, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,    0,
     1288, 1289, 1289, 1289,    0, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1290, 1290, 1290,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1291, 1291, 1291,    0,    0,    0,    0,
     1291,    0,    0,    0,    0, 1291,    0,    0,    0, 1291,

     1292, 1292, 1292,    0,    0, 1292,    0, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,    0,
     1292, 1293, 1293, 1293,    0, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1294, 1294, 1294,    0, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1295,    0,    0,    0,    0,    0,    0,
     1295,    0,    0,    0,    0, 1295,    0,    0,    0, 1295,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,    0,

     1296, 1297, 1297,    0,    0,    0,    0,    0, 1297,    0,
        0,    0,    0, 1297,    0,    0,    0, 1297, 1297, 1298,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1298,
        0, 1298,    0,    0,    0, 1298, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301,    0, 1301,
        0, 1301, 1301, 1301, 1301, 1301, 1301, 1301,    0, 1301,
        0, 1301, 1301, 1301,    0, 1301, 1302, 1302, 1302,    0,
     1302, 1302, 1302, 1302, 1302, 1302, 1302,    0, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303,

        0, 1303, 1303, 1303, 1303, 1303, 1303, 1303,    0, 1303,
     1303, 1303, 1303, 1303, 1303,    0, 1303, 1303, 1304, 1304,
     1304,    0, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304,    0, 1304,    0, 1304, 1305,
     1305, 1305,    0, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305,    0, 1305, 1305, 1305,    0, 1305,    0, 1305,
     1306,    0, 1306,    0, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306,    0, 1306,    0,
     1306, 1307,    0, 1307,    0, 1307, 1307, 1307, 1307, 1307,
     1307, 1307,    0, 1307, 1307, 1307, 1307, 1307, 1307, 1307,

     1307, 1307, 1308,    0, 1308,    0, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1312, 1312, 1312,    0, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1314, 1314, 1314,    0, 1314, 1314,
     1314, 1314,    0, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1315, 1315, 1315,    0, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1316,    0,    0, 1316,
        0, 1316,    0, 1316, 1316,    0, 1316,    0, 1316,    0,

        0,    0, 1316, 1317, 1317, 1317,    0, 1317,    0, 1317,
     1317, 1317, 1317, 1317,    0, 1317,    0, 1317, 1317, 1317,
        0, 1317,    0, 1317, 1318,    0,    0, 1318, 1318, 1318,
        0,    0, 1318,    0, 1318, 1318, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320, 1320,
        0, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1322, 1322,
     1322,    0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323,

     1323, 1323,    0, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1325, 1325, 1325,    0, 1325, 1325,    0, 1325,    0, 1325,
     1325, 1325, 1325,    0, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1326, 1326, 1326,    0, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
        0, 1326, 1327, 1327, 1327,    0, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1328, 1328, 1328,    0, 1328, 1328,    0,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,

     1328, 1328,    0, 1328, 1329, 1329, 1329,    0, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330,    0, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1331, 1331, 1331,    0,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332, 1332,
        0,    0,    0,    0, 1332,    0,    0,    0,    0, 1332,
        0,    0,    0, 1332, 1333, 1333, 1333,    0,    0, 1333,
        0, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,

     1333, 1333, 1333,    0, 1333, 1334, 1334, 1334,    0, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1335,    0,    0,    0,
        0,    0,    0, 1335,    0,    0,    0,    0, 1335,    0,
        0,    0, 1335, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336,    0, 1336, 1337, 1337,    0,    0,    0,    0,
        0, 1337,    0,    0,    0,    0, 1337,    0,    0,    0,
     1337, 1337, 1338,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1338,    0, 1338,    0,    0,    0, 1338, 1340,

     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1341,    0, 1341,    0, 1341, 1341, 1341, 1341, 1341, 1341,
     1341,    0, 1341,    0, 1341, 1341, 1341,    0, 1341, 1342,
     1342, 1342,    0, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
        0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1343, 1343, 1343,    0, 1343, 1343, 1343, 1343, 1343, 1343,
     1343,    0, 1343, 1343, 1343, 1343, 1343, 1343,    0, 1343,
     1343, 1344, 1344, 1344,    0, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,    0, 1344,

        0, 1344, 1345, 1345, 1345,    0, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345,    0, 1345, 1345, 1345,    0,
     1345,    0, 1345, 1346,    0, 1346,    0, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
        0, 1346,    0, 1346, 1347,    0, 1347,    0, 1347, 1347,
     1347, 1347, 1347, 1347, 1347,    0, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1348,    0, 1348,    0, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1353, 1353, 1353,    0,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353,    0, 1353, 1354, 1354, 1354,
        0, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355,    0,
        0, 1355,    0, 1355,    0, 1355, 1355,    0, 1355,    0,
     1355,    0,    0,    0, 1355, 1356, 1356, 1356,    0, 1356,
        0, 1356, 1356, 1356, 1356, 1356,    0, 1356,    0, 1356,
     1356, 1356,    0, 1356,    0, 1356, 1357, 1357, 1357,    0,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358,
        0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1360, 1360,
     1360,    0, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1361,
     1361, 1361,    0, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1363, 1363, 1363,    0, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,    0,
     1363, 1364, 1364, 1364,    0, 1364, 1364,    0, 1364,    0,
     1364, 1364, 1364, 1364,    0, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1365, 1365, 1365,    0, 1365, 1365, 1365, 1365,

     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1366, 1366, 1366,    0, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367,    0, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368,    0, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369,    0,
     1369, 1369,    0, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369,    0, 1369, 1370, 1370, 1370,

        0,    0,    0,    0, 1370,    0,    0,    0,    0, 1370,
        0,    0,    0, 1370, 1371, 1371, 1371,    0,    0, 1371,
        0, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371,    0, 1371, 1372, 1372, 1372,    0, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373,    0, 1373, 1374,    0, 1374,
        0, 1374, 1374, 1374, 1374, 1374, 1374, 1374,    0, 1374,
        0, 1374, 1374, 1374,    0, 1374, 1375, 1375, 1375,    0,

     1375, 1375, 1375, 1375, 1375, 1375, 1375,    0, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376,
        0, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376,    0, 1376, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378,
     1378, 1378,    0, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,    0, 1378,
     1379, 1379, 1379,    0, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,    0,

     1379, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1381,    0,    0,    0, 1381,    0,    0,    0,
        0,    0,    0,    0,    0, 1381,    0,    0, 1381, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384,    0, 1384, 1384, 1384,    0, 1384,
     1384, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385,    0, 1385, 1385, 1385,    0,

     1385, 1385, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2013 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "memberdef.h"
#include "membername.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NEVER_INTERACTIVE 1
struct FileState
{
  FileState(int size) : fileBuf(size), 
                        oldFileBuf(0), oldFileBufPos(0) {}
  int lineNr;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  proprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile() : m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;
    /** Returns a reference to the singleton */
    static DefineManager &instance()
    {
      if (theInstance==0) theInstance = new DefineManager;
      return *theInstance;
    }
    /** Deletes the singleton */
    static void deleteInstance()
    {
      delete theInstance;
      theInstance = 0;
    }
    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      return m_contextDefines.find(name);
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }
  private:
    static DefineManager *theInstance;

    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = DefineManager::instance().find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static int                g_yyMLines   = 1;
static int                g_yyColNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static QCString           g_defExtraSpacing;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_guardName;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<bool>       g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor
static bool               g_isSource;

static bool               g_lexInit = FALSE;
static int                g_fenceSize = 0;
static bool               g_ccomment;

//DefineDict* getGlobalDefineDict() 
//{
//  return g_globalDefineDict;
//}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=fi.absFilePath().utf8();
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    g_yyFileDef=findFileDef(Doxygen::includeNameDict,g_yyFileName,ambig);
  }
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
  g_isSource = guessSection(g_yyFileName);
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"warning: More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"warning: Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

#if 0
static bool macroIsAccessible(Define *def)
{
  //printf("macroIsAccessible(%s) input=%s def=%s\n",
  //    def->name.data(),g_inputFileDef?g_inputFileDef->name().data():"<none>",
  //    def->fileDef ? def->fileDef->name().data() : "<none>");
  if (def && def->isPredefined) // predefined macro -> globally accessible
  {
    //printf("%s: predefined macro %s\n",g_inputFileDef->name().data(),def->name.data());
    return TRUE;
  }
  if (def && def->fileDef==g_inputFileDef)
  {
    //printf("%s: macro %s defined in this file at line %d now at %d\n",
    //	g_inputFileDef->name().data(),def->name.data(),def->lineNr,g_yyLineNr);
    return def->lineNr<=g_yyLineNr;
  }
  if (g_inputFileDef && def && def->fileDef) // check if g_inputFileDef actually includes def->fileDef
  {
    QDict<FileDef> includedFiles(257);
    bool b = g_inputFileDef->includes(def->fileDef,&includedFiles);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileDef->name().data(),b);
    return b;
  }
  if (g_inputFileDef && def && !def->fileName.isEmpty())
  {
    bool b = g_inputFileDef->includesByName(def->fileName);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileName.data(),b);
    return b;
  }
  //printf("not accessible!\n");
  return FALSE;
}

static Define *isDefined(const char *name)
{
  Define *def=0;
  if (name)
  {
    def=g_globalDefineDict->find(name);
    if (def && def->undef) def=0;
    if (def && !macroIsAccessible(def)) def=0;
  }
  //printf("isDefined(%s)=%p\n",name,def);
  return def;
}
#endif


static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList("EXCLUDE_PATTERNS");
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = fi.absFilePath().utf8();

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName=%s\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=DefineManager::instance().isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr-g_yyMLines;
  def->columnNr   = g_yyColNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr-g_yyMLines,g_yyColNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberType_Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  static bool searchIncludes = Config_getBool("SEARCH_INCLUDES");
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      QFileInfo fi(g_yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath().utf8();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList("INCLUDE_PATH");
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath().utf8())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath().utf8();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    DefineManager::instance().addInclude(g_yyFileName,absIncFileName);
    DefineManager::instance().addFileToContext(absIncFileName);

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,g_isImported,FALSE);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      DBG_CTX((stderr,"Switching to include file %s\n",incFileName.data()));
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,g_isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",incFileName.data());
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",incFileName.data());
	}
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"Warning: include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(g_yyFileName,g_yyLineNr,sectId);
  g_condStack.push(new bool(g_skip));
  if (!expResult)
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    bool *ctx = g_condStack.pop();
    g_skip=*ctx;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void forceEndCondSection()
{
  while (!g_condStack.isEmpty())
  {
    g_condStack.pop();
  }
  g_skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */




































#line 4242 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define Include 8
#define IncludeID 9
#define EndImport 10
#define DefName 11
#define DefineArg 12
#define DefineText 13
#define SkipCPPBlock 14
#define Ifdef 15
#define Ifndef 16
#define SkipCComment 17
#define ArgCopyCComment 18
#define CopyCComment 19
#define SkipVerbatim 20
#define SkipCPPComment 21
#define RemoveCComment 22
#define RemoveCPPComment 23
#define Guard 24
#define DefinedExpr1 25
#define DefinedExpr2 26
#define SkipDoubleQuote 27
#define SkipSingleQuote 28
#define UndefName 29
#define IgnoreLine 30
#define FindDefineArgs 31
#define ReadString 32
#define CondLineC 33
#define CondLineCpp 34
#define SkipCond 35

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1788 "pre.l"


#line 4470 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1263 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6203 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1790 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1791 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1792 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1793 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1796 "pre.l"
{ BEGIN(Command); g_yyColNr+=preYYleng; g_yyMLines=0;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1797 "pre.l"
{
 					  outputArray(preYYtext,(int)preYYleng);
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1801 "pre.l"
{ // constructors?
					  int i;
					  for (i=(int)preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1810 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1810 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=DefineManager::instance().isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=(int)preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1840 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1845 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1852 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1859 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1862 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1865 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1868 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1872 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1875 "pre.l"
{
					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1878 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1882 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_globalDefineDict->find(preYYtext);
					  //def=DefineManager::instance().isDefined(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1919 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1937 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1939 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1942 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
					  g_yyColNr=1;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1948 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1952 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1977 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1980 "pre.l"
{
                                          g_defArgsStr+=preYYtext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1984 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 1988 "pre.l"
{
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1993 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1996 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1999 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 2002 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 2006 "pre.l"
{ 
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 2011 "pre.l"
{ 
                                          g_defArgsStr+=preYYtext;
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 2014 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 2018 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 2021 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 2024 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 2027 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 2032 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 2039 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
					  g_yyColNr+=preYYleng;
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2044 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2049 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2055 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2060 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2065 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2070 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2082 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 2095 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2098 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2105 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 2109 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 2114 "pre.l"
{
                                          g_expectGuard = FALSE;
                                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 2117 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 2120 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 2124 "pre.l"

	YY_BREAK
case 59:
YY_RULE_SETUP
#line 2125 "pre.l"
{g_yyColNr+=preYYleng;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 2126 "pre.l"
{
  					  Define *def;
  					  if ((def=DefineManager::instance().isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 2138 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2143 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 63:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2146 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 2149 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 2150 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 2151 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 2168 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 2169 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 2177 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 2184 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 2189 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 2192 "pre.l"

	YY_BREAK
case 73:
YY_RULE_SETUP
#line 2193 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2194 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 2195 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 2196 "pre.l"

	YY_BREAK
case 77:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2197 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 2202 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 79:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2211 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 2226 "pre.l"
{ 
					  g_expectGuard = FALSE;
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 2235 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 2240 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 2243 "pre.l"

	YY_BREAK
case 84:
YY_RULE_SETUP
#line 2244 "pre.l"

	YY_BREAK
case 85:
YY_RULE_SETUP
#line 2245 "pre.l"
{ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 2246 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 2249 "pre.l"

	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2250 "pre.l"
{ 
                                        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 2252 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2256 "pre.l"
{ 
                                        }
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2258 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 2262 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 2267 "pre.l"
{ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 2268 "pre.l"
{ }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 2269 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 2272 "pre.l"
{ }
	YY_BREAK
case 97:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2273 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 2280 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 2285 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2297 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 2300 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 2304 "pre.l"
{
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 2306 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  g_defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2319 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 2349 "pre.l"
{ // empty define
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_guardName = preYYtext;
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2377 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 2392 "pre.l"
{
  					  g_defExtraSpacing+="\n";
					  g_yyLineNr++;
                                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 2396 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 2397 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 2398 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr+g_defExtraSpacing;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 2406 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2412 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 113:
YY_RULE_SETUP
#line 2437 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 2444 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 2450 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2464 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2467 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2471 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 2474 "pre.l"
{
                                          static bool markdownSupport = Config_getBool("MARKDOWN_SUPPORT");
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                            g_fenceSize=preYYleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 2487 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 2491 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
                                          g_fenceSize=0;
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
                                            QCString bn=&preYYtext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
					    g_blockName=bn.stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 2508 "pre.l"
{ // conditional section
                                          g_ccomment=TRUE;  
  					  BEGIN(CondLineCpp);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2512 "pre.l"
{ // conditional section
                                          g_ccomment=FALSE;  
  					  BEGIN(CondLineC);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2516 "pre.l"
{
  				          startCondSection(preYYtext);
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
  					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2537 "pre.l"
{ // non-guard character
  					  unput(*preYYtext);
  					  startCondSection(" ");
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2559 "pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            g_ccomment=TRUE;
                                            // end C comment
  					    outputArray("*/",2);
                                          }
                                          else
                                          {
                                            g_ccomment=FALSE;
                                          }
                                          BEGIN(SkipCond);
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 2572 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 2573 "pre.l"
{ }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2574 "pre.l"
{ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2575 "pre.l"
{ g_ccomment=FALSE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2576 "pre.l"
{ g_ccomment=TRUE; }
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2577 "pre.l"
{ 
                                          endCondSection(); 
                                          if (!g_skip)
                                          {
                                            if (g_ccomment)
                                            {
                                              outputArray("/** ",4);
                                            }
                                            BEGIN(g_condCtx);
                                          }
                                        }
	YY_BREAK
case 133:
/* rule 133 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2588 "pre.l"
{
  					  endCondSection();
                                          if (!g_skip) 
                                          {
                                            BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 2595 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,(int)preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2606 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
                                          if (g_fenceSize==preYYleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2613 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2616 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 2619 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2623 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2626 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2630 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 2635 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2641 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2651 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2652 "pre.l"

	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2653 "pre.l"

	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2654 "pre.l"

	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 2655 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2656 "pre.l"

	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2657 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 2660 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2664 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2667 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2670 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2673 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2676 "pre.l"

	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2677 "pre.l"

	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2678 "pre.l"

	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2679 "pre.l"

	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2680 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2684 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2717 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 2721 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
					  g_defText += ' ';
					  g_yyLineNr++;
					  g_yyMLines++;
					}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 2728 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=DefineManager::instance().isDefined(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",g_defName.data());
					    Define *nd = newDefine();
					    DefineManager::instance().addDefine(g_yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (g_isSource && g_includeStack.isEmpty())
					    //{
					    //  g_fileDefineDict->insert(g_defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr-g_yyMLines;
					      def->columnNr = g_yyColNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_yyColNr=1;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2782 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2783 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2784 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2785 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2793 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2800 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2801 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2802 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2806 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2809 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2813 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2814 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2815 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
#line 2816 "pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    DBG_CTX((stderr,"Terminating scanner!\n"));
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    DBG_CTX((stderr,"######## FileName %s\n",g_yyFileName.data()));
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 178:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2848 "pre.l"
case 179:
YY_RULE_SETUP
#line 2848 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCContext=YY_START;
					    g_commentCount=1;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCComment);
                                          }
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2862 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCPPContext=YY_START;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCPPComment);
                                          }
					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2875 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2879 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2884 "pre.l"
ECHO;
	YY_BREAK
#line 6563 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 59);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1263 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 59;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1263 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1262);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2884 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath().utf8());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
  DefineManager::deleteInstance();
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  //g_fileDefineDict->clear();

  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  DefineManager::instance().startContext(g_yyFileName);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList("PREDEFINED");
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
	  argDict.insert(ds.mid(p,l),new int(count++));
	  i=p+l;
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_yyColNr  = 1;
  g_level    = 0;
  g_ifcount  = 0;

  BEGIN( Start );
  
  g_expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  g_guardName.resize(0);
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection();

  // remove locally defined macros so they can be redefined in another source file
  //if (g_fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*g_fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    g_globalDefineDict->remove(di.currentKey());
  //  }
  //  g_fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (DefineManager::instance().defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file:\n");
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(DefineManager::instance().defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",def->name.data());
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file.\n");
    }
  }
  DefineManager::instance().endContext();
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


